<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
  <title>ridiculous_fish</title>
  <link href="http://ridiculousfish.com/blog/"/>
  <link type="application/atom+xml" rel="self" href="http:///blog/atom.xml"/>
  <updated>2016-09-08T14:20:15-07:00</updated>
  <id>http://ridiculousfish.com/blog/</id>
  <author>
    <name>ridiculous_fish</name>
    <email>corydoras@ridiculousfish.com</email>
  </author>

  
  <entry>
    <title>Schrödinger? I hardly know her!</title>
    <link href="http://ridiculousfish.com/blog/posts/Schrodinger.html"/>
    <updated>2016-09-08T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/Schrodinger</id>
    <content type="html">&lt;p&gt;At very small scales, particles are described by wavefunctions that obey the Schrödinger Equation. What do wavefunctions look like?

&lt;p&gt;&lt;a href=&quot;http://ridiculousfish.com/wavefiz&quot;&gt;The Wavefiz&lt;/a&gt; is a nifty visualizer that draws them! It&#39;s real physics: we&#39;re solving the Schrödinger Equation in real time with arbitrary potentials. But it&#39;s also just plain fun to play with!

&lt;p&gt;There&#39;s some non-mathy exercises to do too. Have you heard of the ground state energy or quantum tunnelling? Those pop right out - you can see them visualized.

&lt;p&gt;The visualizer was built using three.js and TypeScript. &lt;a href=&quot;https://github.com/ridiculousfish/wavefiz&quot;&gt;You can pitch in here&lt;/a&gt; on GitHub. And if you like quantum physics, and are near Silicon Valley, come meetup to &lt;a href=&quot;https://www.meetup.com/SanJosePhysics/events/233899350/&quot;&gt;learn quantum mechanics&lt;/a&gt; with us!

&lt;p&gt;Surf over to &lt;a href=&quot;http://ridiculousfish.com/wavefiz/&quot; style=&quot;font-size: 20pt&quot;&gt;the Wavefiz&lt;/a&gt; to see it in action!
</content>
  </entry>
  
  <entry>
    <title>The One Second Dash</title>
    <link href="http://ridiculousfish.com/blog/posts/The-one-second-dash.html"/>
    <updated>2016-08-15T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/The-one-second-dash</id>
    <content type="html">&lt;p&gt;The Amazon Dash is a $5 WiFi button that summons a truck to deliver you water or other stuff. Want your Dash to do something else? The  &lt;a href=&quot;https://medium.com/@edwardbenson/how-i-hacked-amazon-s-5-wifi-button-to-track-baby-data-794214b0bdd8#.ktfyw2h0j&quot;&gt;popular approach&lt;/a&gt; is to sniff its ARP requests. This requires that Dash connect to your network, putting you perilously close to having &lt;a href=&quot;https://www.amazon.com/Amazon-JK29LP-DUDE-Dash-Button/dp/B01F6ETRNA&quot;&gt;some DUDE delivered&lt;/a&gt; with your IoT mood lighting.
	
&lt;p&gt;A more immediate problem is immediacy, or lack thereof: the Dash button only connects to your network &lt;i&gt;after&lt;/i&gt; being pressed, so there&#39;s a ~5 second delay before anything can happen! This makes the ARP Dash hack unsuitable for interactive uses, like doorbells.

&lt;p&gt;Can we make it faster? Here&#39;s one way:

&lt;ol style=&quot;margin: 15px;&quot;&gt;
    &lt;li style=&quot;margin-top: 5px&quot;&gt;&amp;quot;Setup&amp;quot; the Dash with a unique network SSID for a network that doesn&#39;t exist&lt;/li&gt;
    &lt;li style=&quot;margin-top: 5px&quot;&gt;Use a WiFi adapter in monitor mode to observe probe requests on that network SSID&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This responds in &amp;lt; 1 second, which is fast enough for real time uses. And you don&#39;t even have to give the thing your password.

&lt;p&gt;A Raspberry Pi works when equipped with a WiFi adapter capable of monitoring mode. The RT5370 chipset is so capable - &lt;a href=&quot;https://www.amazon.com/gp/product/B017N6KI8W/&quot;&gt;here&#39;s the one&lt;/a&gt; &lt;i&gt;fish&lt;/i&gt; bought. Steer clear of the ubiquitous Realtek RTL8188CUS based devices.

&lt;p&gt;Head on over to the &lt;a href=&quot;https://github.com/ridiculousfish/one-second-dash&quot; style=&quot;font-size: 20pt&quot;&gt;One Second Dash&lt;/a&gt; repo to get started!
</content>
  </entry>
  
  <entry>
    <title>fish shell 2.0</title>
    <link href="http://ridiculousfish.com/blog/posts/fish_shell.html"/>
    <updated>2013-05-17T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/fish_shell</id>
    <content type="html">&lt;p&gt;fish 2.0 is now released! fish is a fully-equipped command line shell (like bash or zsh) that is smart and user-friendly. fish supports powerful features like syntax highlighting, autosuggestions, and tab completions that just work, with nothing to learn or configure.

&lt;p&gt;Go get it:&lt;/p&gt;

&lt;h3&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;http://fishshell.com/&quot;&gt;http://fishshell.com&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This marks the first release of fish in over four years, and includes many new features, fixes, and optimizations. See the &lt;a href=&quot;http://fishshell.com/release_notes.html&quot;&gt;release notes&lt;/a&gt; for a partial list of what&#39;s new.

&lt;p&gt;A big debt of gratitude to everyone who contributed to this release, including:
&lt;ul style=&quot;list-style-type:circle&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/siteshwar&quot;&gt;siteshwar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xiaq&quot;&gt;xiaq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/JanKanis&quot;&gt;JanKanis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/maxfl&quot;&gt;maxfl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zanchey&quot;&gt;zanchey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kballard&quot;&gt;kballard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/adisbladis&quot;&gt;adisbladis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dietsche&quot;&gt;dietsche&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/terlar&quot;&gt;terlar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GlitchMr&quot;&gt;GlitchMr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/lledey&quot;&gt;lledey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/DarkStarSword&quot;&gt;DarkStarSword&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/simukis&quot;&gt;simukis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/SanskritFritz&quot;&gt;SanskritFritz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Soares&quot;&gt;Soares&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hauleth&quot;&gt;hauleth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;and many others&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for sharing your time, code, and ideas!

&lt;p&gt;P.S. Discuss fish in the #fish IRC channel in irc.oftc.net, or use the &lt;a href=&quot;http://webchat.oftc.net&quot;&gt;web chat&lt;/a&gt; (enter fish as the channel).</content>
  </entry>
  
  <entry>
    <title>Yahoo! Chat - A Eulogy</title>
    <link href="http://ridiculousfish.com/blog/posts/YahooChatRooms.html"/>
    <updated>2013-02-21T00:00:00-08:00</updated>
    <id>http://ridiculousfish.com/posts/YahooChatRooms</id>
    <content type="html">&lt;p&gt;&quot;Asswipe,&quot; replied Yahoo&#39;s server. That&#39;s when I knew I had it.

&lt;p&gt;Yahoo&#39;s public chat rooms &lt;a href=&quot;http://www.ymessengerblog.com/&quot;&gt;have passed away&lt;/a&gt;. It is for the best, for the spam had spread everywhere. But they had a good run, operating for a decade and a half, an Internet eternity.

&lt;p&gt;Here are three funny stories from the Yahoo chat protocol.

&lt;h3&gt;Body and Zoul&lt;/h3&gt;

&lt;p&gt;Yahoo chat rooms started life as a Java applet, chugging along in Netscape Navigator 4. Support for chat was later added to Pager, their native app, which did its own chugging in Visual Basic. Initially, Pager had custom text rendering, but then they replaced it with an HTML view.

&lt;p&gt;Oops. Pager didn&#39;t escape message contents, and so it was possible for a message sender to coax the recipient into displaying arbitrary HTML - even fetching images off the web. XSS in its infancy.

&lt;p&gt;Oh dear, what to do? Not everyone would install a security update. But all messages went through Yahoo&#39;s servers, so they could fix it server-side:  block the attack by rewriting the messages before sending them along. So Yahoo replaced the troublesome opening bracket &amp;lt; with a letter that sort of looked like a bracket: a capital Z. Messages containing &amp;lt;html&amp;gt; or &amp;lt;body&amp;gt; would be rewritten to Zhtml&amp;gt; and Zbody&amp;gt;.

&lt;p&gt;And more than a decade later, this methuselan workaround lives on:

&lt;p&gt;&lt;img src=&quot;/blog/images/yahoo_ztml.png&quot;&gt;

&lt;h3&gt;md55555555555...&lt;/h3&gt;

&lt;p&gt;Yahoo chat was not as full of sexually unfulfilled college girls as the spam bots would have you believe. Before the captchas arrived in 2007 (which did little in any case), Yahoo battled the bots by obfuscating the login protocol. And once the bots caught up, obfuscating it again. Rinse and repeat - by the end, the protocol had grown to outrageous complexity. A puny excerpt of the login sequence:

&lt;p&gt;&lt;ol&gt;
&lt;li&gt;md5 the user&#39;s password&lt;/li&gt;
&lt;li&gt;md5 the password, followed by the fixed salt, followed by the password again&lt;/li&gt;
&lt;li&gt;md5 the password, followed by a fixed salt, followed by the second hash, followed by parts of the password, but interspersed with zeros&lt;/li&gt;
&lt;li&gt;hash the password&lt;/li&gt;
&lt;li&gt;hash the third hash&lt;/li&gt;
&lt;li&gt;Iterate the previous two steps 50 times, including the password in the hash every seventh time, and salting the hash too, except every third time&lt;/li&gt;
&lt;li&gt;md5 the result of that loop...&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And we have only barely begun. Should you wish to dive further, see the function &lt;a href=&quot;https://libyahoo2.svn.sourceforge.net/svnroot/libyahoo2/branches/RELEASE_0_7_6_1_BRANCH/libyahoo2/src/libyahoo2.c&quot;&gt;yahoo_process_auth_0x0b&lt;/a&gt;.

&lt;h3&gt;The Sacred, but Mostly the Profane&lt;/h3&gt;

&lt;p&gt;&lt;i&gt;fish&lt;/i&gt; wrote a client for Yahoo chat, but the protocol was not public. Reverse engineering the login protocol for a native OS X client meant running Ethereal in X11 to inspect a Java program running in the OS 9 Classic environment: a remarkable feat, but man, was it slow going. For a long time, connection attempts were met with radio silence and disconnection. Nothing, nothing, nothing...

&lt;p&gt;And then, all at once, Yahoo unleashed a stream of filthy, filthy obscenities. Yessss.

&lt;p&gt;You see, Yahoo was concerned that people might swear on the Internet, so they provided a list of words that the client should filter. But this list might need to be updated dynamically, in case someone on the Internet managed to think up a new word for sex. So rather than build the list into the client, they sent it to you from the server. Right in the first packet. In alphabetical order. Login successful, bitch.

&lt;p&gt;A kind soul has preserved a &lt;a href=&quot;http://yahelite.our4m.com/forum/index.php?action=printpage;topic=2012.0&quot;&gt;packet dump from a successful login&lt;/a&gt;. Cover your childrens&#39; eyes and click the box below to read it:

&lt;pre style=&quot;background-color: white; color: white; border: solid 1px gray; padding: 14px 14px; font-size: 10pt; display: inline-block;&quot; onClick=&quot;this.style.color=&#39;inherit&#39;&quot;&gt;
59 43 48 54 00 00 01 00 : 00 00 00 01 00 00 01 7F    YCHT            
41 73 6B 46 6F 72 42 6F : 6F 7A 65 C0 80 61 68 6F    AskForBooze¿Äaho
6C 65 2C 61 68 6F 6C 65 : 73 2C 61 73 73 68 6F 6C    le,aholes,asshol
65 2C 61 73 73 68 6F 6C : 65 73 2C 61 73 73 77 69    e,assholes,asswi
70 65 2C 62 69 61 74 63 : 68 2C 62 69 74 63 68 2C    pe,biatch,bitch,
62 69 74 63 68 65 73 2C : 62 6C 6F 5F 6A 6F 62 2C    bitches,blo_job,
62 6C 6F 77 5F 6A 6F 62 : 2C 62 6C 6F 77 6A 6F 62    blow_job,blowjob
2C 63 6F 63 6B 73 75 63 : 6B 65 72 2C 63 75 6E 74    ,cocksucker,cunt
2C 63 75 6E 74 73 2C 64 : 69 63 6B 68 65 61 64 2C    ,cunts,dickhead,
66 75 63 6B 2C 66 75 63 : 6B 65 64 2C 66 75 63 6B    fuck,fucked,fuck
69 6E 67 2C 66 75 63 6B : 6F 66 66 2C 66 75 63 6B    ing,fuckoff,fuck
73 2C 68 61 6E 64 6A 6F : 62 2C 68 61 6E 64 6A 6F    s,handjob,handjo
62 73 2C 6D 6F 74 68 65 : 72 66 75 63 6B 65 72 2C    bs,motherfucker,
6D 6F 74 68 65 72 2D 66 : 75 63 6B 65 72 2C 6D 6F    mother-fucker,mo
74 68 65 72 66 75 63 6B : 65 72 73 2C 6D 75 74 68    therfuckers,muth
61 66 75 63 6B 65 72 2C : 6D 75 74 68 61 66 75 63    afucker,muthafuc
6B 65 72 73 2C 6E 69 67 : 67 61 2C 6E 69 67 67 61    kers,nigga,nigga
73 2C 6E 69 67 67 65 72 : 2C 6E 69 67 67 65 72 73    s,nigger,niggers
2C 70 65 64 6F 66 69 6C : 65 2C 70 65 64 6F 70 68    ,pedofile,pedoph
69 6C 65 2C 70 68 61 67 : 2C 70 68 75 63 2C 70 68    ile,phag,phuc,ph
75 63 6B 2C 70 68 75 63 : 6B 65 64 2C 70 68 75 63    uck,phucked,phuc
6B 65 72 2C 73 68 61 74 : 2C 73 68 69 74 2C 73 68    ker,shat,shit,sh
69 74 73 2C 73 68 69 74 : 68 65 61 64 2C 73 68 69    its,shithead,shi
74 74 65 72 2C 73 68 69 : 74 74 69 6E 67 C0 80 54    tter,shitting¿ÄT
61 6E 67 6F 62 68 C0 80 : 20 C0 80 30 C0 80 31       angobh¿Ä ¿Ä0¿Ä1
&lt;/pre&gt;

&lt;p&gt;Eat your heart out, George Carlin.

&lt;p&gt;R.I.P. Yahoo chat. You will be remembered as you were: a crazy phuc. Whatever that means.

</content>
  </entry>
  
  <entry>
    <title>Go Bloviations (Optional Reading)</title>
    <link href="http://ridiculousfish.com/blog/posts/go_bloviations.html"/>
    <updated>2012-09-15T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/go_bloviations</id>
    <content type="html">&lt;p class=&quot;commentary&quot;&gt;This post was written sixteen months ago, when &lt;i&gt;fish&lt;/i&gt; briefly explored Go with the intention of writing a new command line shell. (&lt;i&gt;fish&lt;/i&gt; abandoned Go after discovering that terminal programming is what makes shells so horrible, and term programming is least horrible in C.)

&lt;p class=&quot;commentary&quot;&gt;These are some notes &lt;i&gt;fish&lt;/i&gt; took as he explored Go, and as a result they&#39;re mostly unstructured, unbalanced, and surface-level. There&#39;s likely errors, dumb omissions, and simple misunderstandings on his part. Still it&#39;s nevertheless interesting to see what&#39;s changed in those sixteen months. Original text is in black, new text is in red.&lt;/p&gt;

&lt;h3&gt;Sections&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#go_syntax&quot;&gt;Syntax&lt;/a&gt;&lt;/li&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#go_semicolons&quot;&gt;Semicolons&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;li&gt;&lt;a href=&quot;#go_damnableuse&quot;&gt;That Damnable Use Requirement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#go_ccompatibility&quot;&gt;C Compatibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#go_unicode&quot;&gt;Unicode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#go_errors&quot;&gt;Errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#go_compiletimes&quot;&gt;Compile Times&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#go_concurrency&quot;&gt;Concurrency&lt;/a&gt;&lt;/li&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;#go_fishfails&quot;&gt;&lt;i&gt;fish&lt;/i&gt; Fails at Making a Thread Safe Set&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;#go_deadlocks&quot;&gt;By Introducing Deadlocks&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;#go_races&quot;&gt;And Races Introducing&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;#go_summerfield&quot;&gt;Mark Summerfield Succeeds at Making a Thread Safe Set, But It&#39;s Ugly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;&lt;a href=&quot;#go_conclusions&quot;&gt;Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#go_thumbsup&quot;&gt;Thumbs Up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#go_thumbsdown&quot;&gt;Thumbs Down&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;

&lt;hr&gt;

  &lt;p&gt;I used Google&#39;s new Go language for two days. This qualifies me to bloviate on it, so here goes.
  &lt;p&gt;The language (unsurprisingly) feels like a modernized C, with design decisions that reflect an apparent consensus on best practices. The language is strictly typed, but supports some limited type inference, to save on keypresses (what the designers call &quot;stuttering&quot;). There&#39;s no more header files. It&#39;s garbage collected and supports closures. There&#39;s pointers, but no pointer arithmetic. There&#39;s multiple return values. Strings are built-in and immutable. It feels modern!&lt;/p&gt;
  &lt;p&gt;But it is C-like, in that it omits a lot of the heavyweight bondage and discipline found in other languages. Data aggregation is done through structs, and there&#39;s no access controls: all fields are public. There&#39;s no subtyping - in fact, there&#39;s no type hierarchy at all. There&#39;s no generics, no exceptions, no operator overloading, nada.&lt;/p&gt;
  &lt;p&gt;In C you spend less time building up a super-structure of type relationships, const-correctness, and abstraction, and more time working on the actual problem. Go seems to be designed in the same spirit of simplicity and transparency. Where so many other modern languages focus on this superstucture, it is refreshing to see a modernized language in the spirit of C.&lt;/p&gt;
  &lt;h3 id=&quot;go_syntax&quot;&gt;Syntax&lt;/h3&gt;Much has been made of Go&#39;s syntax, which at first blush seems pointlessly inverted from C. For example, variable and function return types go after the identifier. But I found the syntax to be simpler and more regular than C: there&#39;s fewer extraneous elements, like required parenthesis and useless voids. For example, this Go function I wrote:
  &lt;pre&gt;
SetInactivityTimeout(fn func() int, sec, nsec uint_64)
&lt;/pre&gt;compares favorably, syntax-wise, to its C analog:
  &lt;pre&gt;
void SetInactivityTimeout(int (*fn)(void), uint64_t sec, uint64_t nsec)
&lt;/pre&gt;
&lt;span id=&quot;go_if&quot;&gt;However in other ways&lt;/span&gt;, brevity suffers. Branching is one of the most serious victims: &lt;a href=&quot;http://golang.org/doc/go_faq.html#Does_Go_have_a_ternary_form&quot;&gt;with no ternary operator&lt;/a&gt;, and with the requirement that &#39;if&#39; uses open braces with a particular style, the best you can do is this:
  &lt;pre&gt;
if expr {
    n = trueVal
} else {
    n = falseVal
}
&lt;/pre&gt;

&lt;p class=&quot;commentary&quot;&gt;This remains true.&lt;/p&gt;

&lt;p id=&quot;go_channel_laws&quot;&gt;Another syntax / semantics oddity is the behavior of reading from channels (like a pipe). Whether a read from a channel blocks depends on how the return value is used:
 
 &lt;pre&gt;
 res := &lt;- queue /* waits if the queue is empty */
 res, ok := &lt;- queue /* returns immediately if the queue is empty */
 &lt;/pre&gt;
 
This bears repeating: the behavior of a channel read depends on how the return value is (will be) used. This seems like a violation of the laws of time and space!
 
&lt;p&gt;By the way, the :=&lt;- idiom is called the Overbite Man.

  &lt;h3 id=&quot;go_semicolons&quot;&gt;Semicolons&lt;/h3&gt;
  &lt;p&gt;An aside on semicolons: Go programs don&#39;t terminate statements with semicolons. Wait, let me rephrase: Go allows you to insert the semicolons, but doesn&#39;t require them. Losing semicolons is nice, but the simplicity is only apparent, because to be proficient in Go you still must understand the rules governing Go semicolons.&lt;/p&gt;
  &lt;p&gt;This is because, instead of omitting semicolons from the grammar, they are &lt;a href=&quot;http://golang.org/doc/go_faq.html#semicolons&quot;&gt;injected automatically by the lexer&lt;/a&gt;. This isn&#39;t an academic distinction, because the abstraction is leaky. For example, here&#39;s an error I got from the cgo tool:&lt;/p&gt;
  &lt;pre&gt;
test.go:75:1: expected &#39;;&#39;, found &#39;EOF&#39;
&lt;/pre&gt;The error message&#39;s advice is incorrect. The true problem is that the file didn&#39;t end with a newline.
  &lt;h3 id=&quot;go_damnableuse&quot;&gt;That Damnable Use Requirement&lt;/h3&gt;Go will refuse to compile a file that has an unused variable or package import. This sounds hygenic, like it&#39;s a way to prevent the inevitable accumulation of unused header imports that torment C projects. But in practice, this is a dreadful, dreadful feature. Imagine this:
  &lt;ul&gt;
    &lt;li&gt;Something doesn&#39;t work right, so you add a call to fmt.Printf to help debug it.&lt;/li&gt;
    &lt;li&gt;Compile error: &quot;Undefined: fmt.&quot;&lt;/li&gt;
    &lt;li&gt;You add an import &quot;fmt&quot; at the top.&lt;/li&gt;
    &lt;li&gt;It works, and you debug the problem.&lt;/li&gt;
    &lt;li&gt;Remove the now annoying log.&lt;/li&gt;
    &lt;li&gt;Compile error: &quot;imported and not used: fmt.&quot;&lt;/li&gt;
    &lt;li&gt;Remove the &quot;fmt&quot; knowing full well you&#39;re just going to be adding it back again in a few minutes.&lt;/li&gt;
  &lt;/ul&gt;
  &lt;p&gt;Repeat a dozen times a day, and it&#39;s a recipe for hair-pulling.&lt;/p&gt;
  &lt;p&gt;Furthermore, some developers compile every few lines, as a sort of sanity check. This is not possible in Go: inevitably you will introduce a variable that you just haven&#39;t used yet, and the compile will error out.&lt;/p&gt;
  &lt;p&gt;This one irritant is the most annoying part of writing in Go.&lt;/p&gt;
  
  &lt;p class=&quot;commentary&quot;&gt;The damnable use requirement lives on to this day. This requirement would be right at home in a bondage and discipline language, which may explain why it feels so out of place in Go.&lt;/p&gt;
  
  &lt;h3 id=&quot;go_ccompatibility&quot;&gt;C Compatibility&lt;/h3&gt;
  &lt;p&gt;Here&#39;s a brighter spot. Go has a foreign function interface to C, but it receives only a cursory note on the home page. This is unfortunate, because the FFI works pretty darn well. You pass a C header to the &quot;cgo&quot; tool, and it generates Go code (types, functions, etc.) that reflects the C code (but only the code that&#39;s actually referenced). C constants get reflected into Go constants, and the generated Go functions are stubby and just call into the C functions.&lt;/p&gt;
  &lt;p&gt;The cgo tool failed to parse my system&#39;s ncurses headers, but it worked quite well for a different C library I tried, successfully exposing enums, variables, and functions. Impressive stuff.&lt;/p&gt;
  &lt;p&gt;Where it falls down is function pointers: it is difficult to use a C library that expects you to pass it a function pointer. I struggled with this for an entire afternoon before giving up. &lt;a href=&quot;http://cheesesun.blogspot.com/2010/04/callbacks-in-cgo.html&quot;&gt;Ostsol got it to work&lt;/a&gt; through, by his own description, three levels of indirection.&lt;/p&gt;
  
&lt;p class=&quot;commentary&quot;&gt;The cgo documentation has since been vastly improved and is given higher billing on the home page. While I don&#39;t think it&#39;s quite up to the task of handling term programming, it remains a fabulous feature.

&lt;br&gt;&lt;br&gt;Another welcome change is that Go seems to have hidden some of its Plan 9 naming conventions. For example, at the time of the original post, the Go compiler was &#39;6g&#39;; now it is just &#39;go&#39;.
&lt;/p&gt;
  
  &lt;h3 id=&quot;go_unicode&quot;&gt;Unicode&lt;/h3&gt;
  &lt;p&gt;Go looooves UTF-8. It&#39;s thrilling that Go takes Unicode seriously at all in a language landscape where Unicode support ranges from tacked-on to entirely absent. Strings are all UTF-8 (unsurprisingly, given the identity of the designers). Source code files themselves are UTF-8. Moreover, the API exposes operations like type conversion in terms of large-granularity strings, as opposed to something like C or Haskell where case conversion is built atop a function that converts individual characters. Also, there is explicit support for 32 bit Unicode code points (&quot;runes&quot;), and converting between runes, UTF-8, and UTF16. There&#39;s a lot to like about the promise of the language with respect to Unicode.&lt;/p&gt;
  &lt;p&gt;But it&#39;s not all good. There is no case-insensitive compare (presumably, developers are expected to convert case and then compare, which is different).
  
&lt;p class=&quot;commentary&quot;&gt;Since this was written, Go added an &lt;a href=&quot;http://golang.org/pkg/strings/#EqualFold&quot;&gt;EqualFold&lt;/a&gt; function, which reports whether strings are equal under Unicode case-folding. This seems like a bizarre addition: Unicode-naïve developers looking for a case insensitive compare are unlikely to recognize EqualFold, while Unicode-savvy developers may wonder which of the &lt;a href=&quot;http://unicode.org/reports/tr30/tr30-1.html#_Toc51&quot;&gt;many folding algorithms&lt;/a&gt; you actually get. It is also unsuitable for folding tasks like a case-insensitive sort or hash table.

&lt;p class=&quot;commentary&quot;&gt;Furthermore, EqualFold doesn&#39;t implement a full Unicode case insensitive compare. You can run the following code at &lt;a href=&quot;http://golang.org/&quot;&gt;golang.org&lt;/a&gt;; it ought to output true, but instead outputs false.

&lt;pre class=&quot;commentary&quot;&gt;
package main
import &quot;fmt&quot;
import &quot;strings&quot;
func main() {
    fmt.Println(strings.EqualFold(&quot;ss&quot;, &quot;ß&quot;))
}
&lt;/pre&gt;

&lt;p class=&quot;commentary&quot;&gt;Bad Unicode support remains an issue in Go.
&lt;/p&gt;
  
&lt;p&gt;Operations like substring searching return indexes instead of ranges, which makes it difficult to handle canonically equivalent character sequences. Likewise, string comparison is based on literal byte comparisons: there is no obvious way to handle the precomposed &quot;San José&quot; as the same string as the decomposed &quot;San José&quot;. These are distressing omissions.&lt;/p&gt;
  
  &lt;p&gt;To give a concrete example, do a case-insensitive search for &quot;&lt;a href=&quot;http://en.wikipedia.org/wiki/Berliner_Weisse&quot;&gt;Berliner Weisse&lt;/a&gt;&quot; on this page in a modern Unicode-savvy browser (sorry Firefox users), and it will correctly find the alternate spelling &quot;Berliner Weiße&quot;, a string with a different number of characters.  The Go strings package could not support this.
  
  &lt;p&gt;My enthusiasm for its Unicode support was further dampened when I exercised some of the operations it does support. For example, it doesn&#39;t properly handle the case conversions of Greek sigma (as in the name &quot;Odysseus&quot;) or German eszett:&lt;/p&gt;
  &lt;pre&gt;
package main
import (
  &quot;os&quot;
  . &quot;strings&quot;
)
func main() {
   os.Stdout.WriteString(ToLower(&quot;ὈΔΥΣΣΕΎΣ\n&quot;))
   os.Stdout.WriteString(ToUpper(&quot;Weiße Elster\n&quot;))
}
&lt;/pre&gt;This outputs &quot;ὀδυσσεύσ&quot; and &quot;WEIßE ELSTER&quot;, instead of the correct &quot;ὀδυσσεύς&quot; and &quot;WEISSE ELSTER.&quot;

&lt;p&gt;In fact, &lt;a href=&quot;http://golang.org/src/pkg/strings/strings.go&quot;&gt;reading the source code&lt;/a&gt; it&#39;s clear that string case conversions are currently implemented in terms of individual character case conversion. For the same reason, title case is broken even for Roman characters: strings.ToTitle(&quot;ridiculous fish&quot;) results in &quot;RIDICULOUS FISH&quot; instead of the correct &quot;Ridiculous Fish.&quot; D&#39;oh. 

&lt;p class=&quot;commentary&quot;&gt;Go has addressed this by documenting this weirdo existing behavior and then adding a &lt;a href=&quot;http://golang.org/pkg/strings/#Title&quot;&gt;Title function&lt;/a&gt; that does proper title case mapping. So &lt;span class=&quot;code&quot;&gt;Title&lt;/span&gt; does title case mapping on a string, while &lt;span class=&quot;code&quot;&gt;ToTitle&lt;/span&gt; does title case mapping on individual characters. Pretty confusing.&lt;/p&gt;

&lt;p&gt;Unicode in Go might be summed up as good types underlying a bad API. This sounds like a reparable problem: start with a minimal incomplete string package, and fix it later. But we know from Python the confusion that results from that approach.  It would be better to have a complete Unicode-savvy interface from the start, even if its implementation lags somewhat.

  &lt;h3 id=&quot;go_errors&quot;&gt;Errors&lt;/h3&gt;In the language FAQ, the designers explain why &lt;a href=&quot;http://golang.org/doc/go_faq.html#assertions&quot;&gt;Go does not support assertions&lt;/a&gt;:
  &lt;blockquote&gt;
    ...our experience has been that programmers use them as a crutch to avoid thinking about proper error handling and reporting. Proper error handling means that servers continue operation after non-fatal errors instead of crashing. Proper error reporting means that errors are direct and to the point, saving the programmer from interpreting a large crash trace. Precise errors are particularly important when the programmer seeing the errors is not familiar with the code...Time invested writing a good error message now pays off later when the test breaks.
        
  &lt;/blockquote&gt;This is the &quot;moon rover&quot; philosophy: if something unexpected happens to the moon rover, it should relay as much information as it can, and keep going no matter the cost. This is a defensible position. I would expect to see some sort of error handling infrastructure, and precise error reporting. But there&#39;s not:
  &lt;ul&gt;
    &lt;li&gt;If you index beyond the bounds of an array, the error is &quot;index out of range.&quot; It does not report what the index is, or what the valid range is.&lt;/li&gt;
    &lt;li&gt;If you dereference nil, the error is &quot;invalid memory address or nil pointer dereference&quot; (which is it, and why doesn&#39;t it know?)&lt;/li&gt;
    &lt;li&gt;If your code has so much as a single unused variable or import, the compiler will not &quot;continue operation,&quot; and instead refuse to compile it entirely.
  &lt;/ul&gt;
  
&lt;p class=&quot;commentary&quot;&gt;Some of what I wrote above seems a little snarky / petty, but there it is. Regardless, Go still chooses to not support assertions.&lt;/p&gt;
  
  &lt;h3 id=&quot;go_compiletimes&quot;&gt;Compile times&lt;/h3&gt;Go&#39;s compilation speed receives top billing on the home page, with the claim &quot;typical builds take a fraction of a second.&quot; At first blush it seems to be so. The single-file project I spent a day on compiles in two hundreths of a second. The 45 file math package compiles in just under a second. Wow!
  
 &lt;p class=&quot;commentary&quot;&gt;The compile speed claims seems to have since been removed, so I also removed some ill-conceived ramblings. Here&#39;s a summary of what I found 16 months ago:
 
 &lt;ul class=&quot;commentary&quot;&gt;
 &lt;li&gt;For small compiles, the Go compiler was blazingly fast; on a large synthetic codebase (700 files), it was three times slower than clang compiling C.&lt;/li&gt;
 &lt;li&gt;The Go compiler does not support incremental or parallel compilation (yet). Changing one file requires recompiling them all, one by one.&lt;/li&gt;
 &lt;li&gt;You could theoretically componentize an app into separate packages. However it appears that packages cannot have circular dependencies, so packages are more like libraries than classes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;commentary&quot;&gt;I don&#39;t know to what extent these findings still apply, if at all. Building on the latest release errored with a cryptic &quot;nosplit stack overflow&quot; message, which I did not dig into.
&lt;/p&gt;
  
  &lt;h3&gt;Concurrency&lt;/h3&gt;The most important and unusual feature of Go is its concurrency mechanism. To summarize, the &quot;go&quot; keyword can be applied in front of a function call, which will be executed in the background, concurrent with the remainder of the function and all other so-called &quot;goroutines.&quot; Goroutines are lightweight. Communication between goroutines is via &quot;channels,&quot; which are thread safe queues. A channel is parametrized by some type: you can make a channel of ints, of strings, of structs, etc. This is an attractive mechanism, especially compared to traditional pthreads.
  
  &lt;p class=&quot;commentary&quot;&gt;At this point the notes become sparse; the remainder of the text is new content presented in black so as not to exhaust your retinas.&lt;/p&gt;
  
  &lt;h3&gt;Goroutines&lt;/h3&gt;
  
  &lt;p&gt;A goroutine is a thread which is scheduled in user-space, and so less expensive than kernel threads. Overhead is a few KB. The docs say, &quot;It is practical to create hundreds of thousands of goroutines in the same address space.&quot; Cool!
  
  &lt;p&gt;You can create a goroutine with any function, even a closure. &lt;span id=&quot;go_closures&quot;&gt;But be careful: a questionable design decision was to make&lt;/span&gt; closures capture variables by reference instead of by value. To use an example from Go&#39;s FAQ, this innocent looking code actually contains a serious race:
  
  &lt;pre&gt;
    values := []string{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}
    for _, v := range values {
        go func() {
            fmt.Println(v)
            done &lt;- true
        }()
    }
  &lt;/pre&gt;
  
  The for loop and goroutines share memory for the variable v, so the loop&#39;s modifications to the variable are seen within the closure. For a language that exhorts us to &quot;do not communicate by sharing memory,&quot; it sure makes it easy to accidentally share memory! (This is one reason why the default behavior of Apple&#39;s blocks extension is to capture by value.)
  
  &lt;h3 id=&quot;go_fishfails&quot;&gt;&lt;i&gt;fish&lt;/i&gt; Fails at Making a Thread Safe Set&lt;/h3&gt;
  
  &lt;p&gt;To explore Go&#39;s concurrency, I attempted to make a thread-safe set. The set &quot;runs&quot; in its own goroutine, which not only enables thread safety, but also allows clients to insert data into the set and move on, while the set rehashes in the background - something that a lock-based implementation cannot do!&lt;/p&gt;
  
  &lt;p&gt;Let&#39;s make a type for the set, SafeSet:

&lt;pre&gt;
  type SafeSet struct {
    set map[string] bool
    adder chan string
  }
&lt;/pre&gt;

&lt;p&gt;There&#39;s a map that will be protected by a goroutine, and a channel. The goroutine reads values from the channel, and adds them to the map.

&lt;p&gt;The set needs a way to test for membership. I took a design cue from the old Go tutorial, which implements an object&#39;s methods by having a separate channel for each request &quot;type,&quot; so we add a &quot;test&quot; channel. The test channel must receive the value to test, and also a channel to send the result. So we package up the value to be looked up and the result channel into a little struct. We send this on the &quot;test&#39; channel:

&lt;pre&gt;
&lt;span class=&quot;code_highlight&quot;&gt;type SetTest struct { 
    val string
    result chan bool
}&lt;/span&gt;

type SafeSet struct {
    set map[string] bool
    adder chan string
    &lt;span class=&quot;code_highlight&quot;&gt;tester chan SetTest&lt;/span&gt;
}
&lt;/pre&gt;

&lt;p&gt;Little single-use types like SetTest seems to be a common idiom in Go. Next, we can introduce a function that services a SafeSet, and all of its channels:

&lt;pre&gt;
func (set *SafeSet) run() {
    for {
        select {
            case toadd := &lt;- set.adder:
                set.set[toadd] = true
            case testreq := &lt;- set.tester:
                testreq.result &lt;- set.set[testreq.val]
        }
    }
}
&lt;/pre&gt;

Lastly we make a function that creates a SafeSet, by allocating all of its components and kicking off the goroutine:

&lt;pre&gt;
func newSet() (result SafeSet) {
    result.set = make(map[string] bool)
    result.adder = make(chan string, 16)
    result.tester = make(chan SetTest, 16)
    go result.run()
    return
}
&lt;/pre&gt;

&lt;p&gt;That magic number &quot;16&quot; is the buffer size of the channel: it can hold 16 values in-flight. (A channel can also be unbuffered, which causes a reader to block until a writer is available, and vice-versa.)

&lt;p&gt;The channels are buffered so the client can insert into the set and then move on, even if the set is busy. Not shown is deletion, or wrapper functions; &lt;a href=&quot;https://gist.github.com/3729531&quot;&gt;the entire code is here&lt;/a&gt;.

&lt;p&gt;As far as I can tell, this is idiomatic Go (or at least it was 16 months ago). Much of the code is concerned with packaging requests and then demultiplexing them in the goroutine. This seems like needless boilerplate: why not instead simply pass a closure over a channel that the goroutine will execute? I have never seen this technique used in Go, but it seems natural to me. (It&#39;s essentially how libdispatch works.)

&lt;p&gt;For comparison purposes, I wrote a &lt;a href=&quot;https://gist.github.com/2994621&quot;&gt;similar set in Objective-C&lt;/a&gt;.

&lt;p&gt;In the ObjC SafeSet, the role of the goroutine is played by the dispatch queue, which is passed closures that it executes. &quot;Ravioli types&quot; like SetTest are obviated by the closures, which automatically package referenced values up into blocks. And there&#39;s a convenient facility (&#39;dispatch_sync&#39;) to execute a block synchronously, which in Go you must simulate by reading from a channel.

&lt;p&gt;On the other hand, Go&#39;s channel mechanism gives you close control over buffer sizes, allowing you to implement rate-limiting of client callers. Channels also provide a natural replacement for callbacks. For example, in Go, you can ask to receive OS signals by simply providing a channel of ints, and then reading from the channel however you like. Dispatch has no such natural mechanism: instead you must specify both a handling block and the queue on which it should be executed.

&lt;p&gt;So some tasks are simpler in Go, and others are simpler in libdispatch. There is no need to pick a winner. Both concurrency mechanisms are a huge improvement over traditional techniques like pthreads.

&lt;h3 id=&quot;go_deadlocks&quot;&gt;Deadlocks&lt;/h3&gt;
  
Our SafeSet has a function that checks whether a value is in the set. Perhaps we want to add a new function that takes an array and returns whether any of its members are in the set. Recall that, in order to check if a value is in a set, we allocate a channel and pass it to the set; it returns the boolean answer on the channel. As an optimization, I allocated one channel and used it for all the values:

&lt;pre&gt;
func (set *SafeSet) get_any(strs []string) bool {
    result := false
    recv_chan := make(chan bool)
    for _, s := range strs {
        request := SetTest{s, recv_chan}
        set.tester &lt;- request
    }
    for i := 0; i &lt; len(strs); i++ {
        result = result || &lt;- recv_chan
    }
    return result
}
&lt;/pre&gt;

This works for the first call, but it fails for subsequent calls. The problem is that get_any does not read out all of the values from the channel, so the SafeSet gets stuck writing to them. We could fix it in a few ways; one is to make the channel big enough to hold all values:

&lt;pre&gt;
func (set *SafeSet) get_any(strs []string) bool {
    result := false
    recv_chan := make(chan bool, &lt;span class=&quot;code_highlight&quot;&gt;len(strs)&lt;/span&gt;)
    for _, s := range strs {
        request := SetTest{s, recv_chan}
        set.tester &lt;- request
    }
    for i := 0; i &lt; len(strs); i++ {
        result = result || &lt;- recv_chan
    }
    return result
}
&lt;/pre&gt;

Better, because the SafeSet now has enough space to write all of the output values. But are we guaranteed enough space to write all of the &lt;/i&gt;input&lt;/i&gt; values? Might the &lt;span class=&quot;code&quot;&gt;set.tester &lt;- request&lt;/span&gt; line block?

&lt;p&gt;It might. Or maybe we get lucky, depending on the buffer size that we give the input channel. Up above, we chose a buffer size of 16, without any real justification for that number, but now we see that it has a deep significance.  We can pass &lt;span class=&quot;code&quot;&gt;get_any&lt;/span&gt; an array of size 16 or less, and it will work; if we were incautious, we may not discover that larger arrays fail in testing.

&lt;p&gt;Or maybe we do discover it, but what we don&#39;t realize is that the size of 16 is a global resource. Imagine if two goroutines both attempt to call &lt;span class=&quot;code&quot;&gt;test_any&lt;/span&gt; with an array of length 10: it may be that both manage to get 8 of their values on the input channel, and then deadlock.

&lt;p&gt;It&#39;s worth pointing out that Go detects and reports deadlocks that involve all goroutines. However, if any goroutine in the process is able to run, the deadlock is unreported. So while this deadlock detection is a cool feature, it can be defeated by a simple infinite loop. In a real program, with multiple independent goroutines, the deadlock reporting is unlikely to be useful.

&lt;h3 id=&quot;go_races&quot;&gt;Races&lt;/h3&gt;

&lt;p&gt;But there&#39;s a far more serious bug: a client that inserts into SafeSet may not see that value appear in the set immediately. The client enqueues on the adder channel, and then the tester channel, but there&#39;s no guarantee that the SafeSet will handle the requests in that order. Using multiple channels was an irreparable mistake on my part.

&lt;h3&gt;SafeSet Conclusions&lt;/h3&gt;

My attempt as a newbie to write a SafeSet was discouraging, because I introduced lots of bugs that naive testing missed:

&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;code&quot;&gt;add&lt;/span&gt; followed by &lt;span class=&quot;code&quot;&gt;get&lt;/span&gt; may falsely return that the value is not in the set.
&lt;li&gt;&lt;span class=&quot;code&quot;&gt;get_any&lt;/span&gt; worked the first call, but not subsequent calls.&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;code&quot;&gt;get_any&lt;/span&gt; failed for arrays larger than size 16.&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;code&quot;&gt;get_any&lt;/span&gt; might fail on any size for concurrent access.&lt;/li&gt;
&lt;/ul&gt;

These bugs occurred only because I chose to make the channels buffered. If all channels were unbuffered, none of these problems could occur (but there would be more limited parallelism).

&lt;h3 id=&quot;go_summerfield&quot;&gt;Mark Summerfield&#39;s Attempt&lt;/h3&gt;

&lt;p&gt;Mark Summerfield, in his book &lt;a href=&quot;http://www.amazon.com/gp/product/0321774639/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321774639&amp;linkCode=as2&amp;tag=ridiculousfis-20&quot;&gt;Programming in Go&lt;/a&gt;, also implemented a similar object, which he coincidentally called a SafeMap. Summerfield avoided all of these bugs by multiplexing up all different commands onto a single channel. This means he needs a way to distinguish between commands, and here it is:

&lt;pre&gt;
const (
    remove commandAction = iota
    end
    find
    insert
    length
    update
)
&lt;/pre&gt;

The commands are wrapped up in functions like these:

&lt;pre&gt;
func (sm safeMap) Len() int {
  reply := make(chan interface{})
  sm &lt;- commandData{action: length, result: reply} return (&lt;-reply).(int)
}
&lt;/pre&gt;

(Check out that last line.)

&lt;p&gt;Lastly, the commands are demultiplexed in the goroutine in a big switch statement. So each method of SafeMap must be represented three different ways:

&lt;ul&gt;
&lt;li&gt;A function exposed to clients
&lt;li&gt;A value in an enum (i.e. the Command pattern)
&lt;li&gt;The actual implementation in the goroutine
&lt;/ul&gt;

&lt;p&gt;Summerfield&#39;s approach avoided the bugs I introduced, but also requires a lot of boilerplate and does not allow for much parallelism.

&lt;h3 id=&quot;go_conclusions&quot;&gt;Conclusions&lt;/h3&gt;

On balance, I like Go and I hope it succeeds. My impression is that it&#39;s a strong foundation that gets marred in the details by some poor design decisions. Here&#39;s what I thought was good, and what was other.

&lt;h3 id=&quot;go_thumbsup&quot;&gt;Thumbs Up&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Go captures much of the spirit of C, by eschewing the super-structure of type relationships, const-correctness, and &quot;bondage and discipline&quot; common in other modern languages. A modernized C is a compelling and unfilled niche.&lt;/li&gt;
&lt;li&gt;Go feels modern in a balanced and familiar way, by incorporating features such as limited type inference, garbage collection, and multiple return values. In many areas Go does not try to introduce anything new, but instead codifies and unifies existing best practices from other languages. It&#39;s conservative in its design.&lt;/li&gt;
&lt;li&gt;Go&#39;s inverted syntax for variable declarations is unusual and unfamiliar at first, but proves quickly to be simpler than and superior to C.&lt;/li&gt;
&lt;li&gt;Channels and goroutines combine to make a powerful and flexible concurrency mechanism.&lt;/li&gt;
&lt;li&gt;The C foreign function interface &quot;cgo&quot; works quite well.
&lt;/ul&gt;

&lt;h3 id=&quot;go_thumbsdown&quot;&gt;Thumbs Down&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#go_damnableuse&quot;&gt;The Damnable Use Requirement&lt;/a&gt; leads to hair pulling.
&lt;li&gt;Syntactical warts:
&lt;ul&gt;&lt;li&gt;Branching is laborious due to the &lt;a href=&quot;#go_if&quot;&gt;if statement&#39;s syntax.&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Channel reads &lt;a href=&quot;#go_channel_laws&quot;&gt;violate the laws of time and space&lt;/a&gt; by changing their behavior based on how their return values get used.&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#go_semicolons&quot;&gt;Semicolons are removed in a weird and leaky way&lt;/a&gt; that still required me to understand the rules governing their automatic injection. More JavaScript than Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Despite what they say, the string type is &lt;a href=&quot;#go_unicode&quot;&gt;not Unicode savvy&lt;/a&gt;, and the Unicode additions to it are sparse and non-conforming.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#go_closures&quot;&gt;Closures capture by reference&lt;/a&gt;, which makes it easy to introduce subtle, hard to spot bugs that may not be caught by testing.
&lt;li&gt;&lt;a href=&quot;#go_summerfield&quot;&gt;Mark Summerfield&#39;s SafeMap feels like Java&lt;/a&gt;, because it requires repeating everything multiple times. It&#39;s a distressing example that I hope is not representative of Go.&lt;/li&gt;
&lt;li&gt;I found buffered channels hard to reason about, for two, uh, reasons:
&lt;ul&gt;
  &lt;li&gt;A deadlock can be masked in testing by a channel&#39;s buffer. Unfortunately there are no channels with a dynamic or growable buffer: you must pick a fixed size at channel creation time.
  &lt;li&gt;Threads exchange data only, instead of code and data (like in libdispatch). As a result, it&#39;s tempting to send different actions over different channels, as in the original Go tutorial. But this can introduce bugs: the actions can be dequeued and executed in a order different from how they were enqueued.
&lt;/ul&gt;
&lt;/ul&gt;

&lt;p&gt;Good luck to Go, and I look forwards to hearing about all the things I got wrong!

&lt;p&gt;You can bloviate back at &lt;a href=&quot;http://www.reddit.com/r/programming/comments/10fvmh/go_bloviations/&quot;&gt;reddit&lt;/a&gt; or &lt;a href=&quot;http://news.ycombinator.com/item?id=4568558&quot;&gt;Hacker News&lt;/a&gt;.

&lt;p&gt;

</content>
  </entry>
  
  <entry>
    <title>Can a command line shell be Mac-like?</title>
    <link href="http://ridiculousfish.com/blog/posts/fishfish.html"/>
    <updated>2012-06-06T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/fishfish</id>
    <content type="html">&lt;p&gt;No. But this is the closest yet!

&lt;p&gt;The new fish is a POSIX command line shell with delightful, intuitive features like &lt;a href=&quot;/shell/images/autosuggestion.png&quot;&gt;autosuggestions&lt;/a&gt;, 256 color &lt;a href=&quot;/shell/images/colors.png&quot;&gt;syntax highlighting&lt;/a&gt;, &lt;a href=&quot;/shell/images/web_config.png&quot;&gt;web based configuration&lt;/a&gt;, and lots more. Best of all, these features &lt;i&gt;just work&lt;/i&gt;, out of the box. No arcane syntax, no twiddling obscure knobs.

&lt;p&gt;It runs inside your favorite terminal emulator, such as Terminal.app, xterm, or iTerm. You&#39;ll feel right at home with its familiar syntax, and its new features will make you instantly more productive, without getting in your way.

&lt;p&gt;Of course, the new fish also has the advanced features you expect from a shell, like customizable prompts, user-defined functions, scripting, programmable completions (that just work, out of the box), etc. There&#39;s also a great community and tons of documentation. It&#39;s perfect for anyone who uses the command line, but doesn&#39;t want to spend all their time learning its idiosyncrasies.

&lt;p&gt;&lt;h2&gt;&lt;a href=&quot;/shell/&quot;&gt;Click Here To Try Out the New Fish Shell »&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;You&#39;ll be so glad you did. Seriously, those autosuggestions have ruined me for all other shells.

&lt;p&gt;The new fish is in open beta, but is plenty stable enough for everyday use: I use it exclusively on all of my systems. There&#39;s an OS X installer and a Debian/Ubuntu installer, and a source tarball for other Unix-like OSes. The &lt;a href=&quot;http://ridiculousfish.com/shell/beta.html&quot;&gt;download page&lt;/a&gt; also has contact information for your questions and love letters / hate mail.

&lt;p&gt;I owe a debt of gratitude to Siteshwar Vashisht for his great contributions, and of course the original developer Axel for authoring fish in the first pace.

&lt;p&gt;Now, go fish!
</content>
  </entry>
  
  <entry>
    <title>The Joy of Hex</title>
    <link href="http://ridiculousfish.com/blog/posts/hex-fiend-21.html"/>
    <updated>2011-12-12T00:00:00-08:00</updated>
    <id>http://ridiculousfish.com/posts/hex-fiend-21</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;/hexfiend/&quot;&gt;Hex Fiend 2.1&lt;/a&gt; is here. Hex Fiend is a fast and clever open source hex editor for Mac OS X.

&lt;p&gt;Notable new features include:

&lt;p&gt;&lt;ul&gt;
&lt;li&gt;A binary diff viewer&lt;/li&gt;
&lt;li&gt;Support for reading raw devices (after authentication, natch)&lt;/li&gt;
&lt;li&gt;Selectable string encoding for the text view&lt;/li&gt;
&lt;li&gt;Bookmarks&lt;/li&gt;
&lt;li&gt;Transient untitled documents (aka &quot;reuse that empty Untitled window&quot;)&lt;/li&gt;
&lt;li&gt;Undo preserved across saves, if it can be done efficiently&lt;/li&gt;
&lt;li&gt;Fresh new paint&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To download or see screenshots, visit &lt;a href=&quot;/hexfiend/&quot;&gt;Hex Fiend&#39;s home page&lt;/a&gt;.

&lt;p&gt;&lt;a href=&quot;http://github.com/ridiculousfish/HexFiend/&quot;&gt;Hex Fiend is now hosted on GitHub&lt;/a&gt;, which should make contributing patches easier for everyone.
</content>
  </entry>
  
  <entry>
    <title>Labor of Division (Episode III): Faster Unsigned Division by Constants</title>
    <link href="http://ridiculousfish.com/blog/posts/labor-of-division-episode-iii.html"/>
    <updated>2011-10-19T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/labor-of-division-episode-iii</id>
    <content type="html">&lt;p&gt;This post is available in a &lt;a href=&quot;/blog/posts/labor-of-division-episode-iii.html&quot;&gt;less handy format&lt;/a&gt;. There&#39;s &lt;a href=&quot;http://ridiculousfish.com/files/faster_unsigned_division_by_constants.pdf&quot;&gt;also a PDF&lt;/a&gt;. Comments and discussion are &lt;a href=&quot;http://www.reddit.com/r/programming/comments/li8k8/labor_of_division_faster_unsigned_division_by/&quot;&gt;on reddit&lt;/a&gt;.

&lt;p&gt;This is a technique &lt;i&gt;fish&lt;/i&gt; thought up for improving the performance of unsigned integer division by certain &quot;uncooperative&quot; constants. It does not seem to appear in the literature, nor is it implemented in gcc, llvm, or icc, so &lt;i&gt;fish&lt;/i&gt; is optimistic that it is original.

&lt;p&gt;As is well known (and seen in a &lt;a href=&quot;/blog/posts/labor-of-division-episode-i.html&quot;&gt;previous post&lt;/a&gt;), compilers optimize unsigned division by constants into multiplication by a &quot;magic number.&quot; But not all constants are created equal, and approximately 30% of divisors require magic numbers that are one bit too large, which necessitates special handling (read: are slower).  Of these 30%, slightly less than half (46%) are even, which can be handled at a minimum of increased expense (see below); the remaining odd divisors (659 million, including well known celebrity divisors like 7) need a relatively expensive &quot;fixup&quot; after the multiplication. Or so we used to think. This post gives a variation on the usual algorithm that improves performance for these expensive divisors.

&lt;p&gt;This post presents the algorithm, proves it is correct, proves that it applies in every case we care about, and demonstrates that it is faster. It also contains a reference implementation of the full &quot;magic number&quot; algorithm, incorporating this and all known techniques. In other words, it&#39;s so darn big that it requires a table of contents.

&lt;p&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#divide_3_background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#divide_3_motivation&quot;&gt;Motivation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#divide_3_correctness&quot;&gt;Proof of Correctness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#divide_3_universality&quot;&gt;Proof of Universality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#divide_3_overflow&quot;&gt;Overflow Handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#divide_3_implementation&quot;&gt;Practical Implementation&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#divide_3_benchmark&quot;&gt;Microbenchmark Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#divide_3_reference&quot;&gt;Reference Code&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#divide_3_conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;&lt;a class=&quot;link_anchor&quot; name=&quot;divide_3_background&quot;&gt;Background&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Unsigned integer division is one of the slowest operations on a modern microprocessor. When the divisor is known at compile time, optimizing compilers do not emit division instructions, but instead either a bit shift (for a power of 2), or a multiplication by a sort of reciprocal (for non-powers of 2). This second case involves the identity:

&lt;p&gt;$\lfloor \frac n d \rfloor = \lfloor  \frac n d \times \frac {2^k} {2^k} \rfloor = \lfloor \frac {2^k} d \times \frac n {2^k} \rfloor$

&lt;p&gt;As d is not a power of 2, $\frac {2^k} d$ is always a fraction. It is rounded up to an integer, which is called a &quot;magic number&quot; because multiplying by it performs division, as if by magic. The rounding-up introduces error into the calculation, but we can reduce that error by increasing k. If k is big enough, the error gets wiped out entirely by the floor, and so we always compute the correct result.

&lt;p&gt;The dividend (numerator) is typically an N bit unsigned integer, where N is the size of a hardware register. For most divisors, k can be small enough that a valid magic number can also fit in N bits or fewer. But for many divisors, there is no such magic number.  7, 14, 19, 31, 42...these divisors require an N+1 bit magic number, which introduces inefficiences, as the magic number cannot fit in a hardware register.

&lt;p&gt;Let us call such divisors &quot;uncooperative.&quot; The algorithm presented here improves the performance of dividing by these uncooperative divisors by finding a new magic number which is no more than N bits. The existing algorithm that generates an N+1 bit magic number for uncooperative divisors will be referred to as the &quot;round-up algorithm&quot;, because it rounds the true magic number up.  The version presented here will be called the &quot;round-down algorithm&quot;. We will say that an algorithm &quot;fails&quot; or &quot;succeeds&quot; according to whether it produces a magic number of N bits or fewer; we will show that either the round-up or round-down algorithm (or both) must succeed for all divisors.

&lt;p&gt;All quantities used in the proofs and discussion are non-negative integers.

&lt;h3&gt;A Shift In Time Saves Fourteen&lt;/h3&gt;

&lt;p&gt;For completeness, it is worth mentioning one additional technique for uncooperative divisors that are even. Consider dividing a 32 bit unsigned integer by 14. The smallest valid magic number for 14 is 33 bits, which is inefficient. However, instead of dividing by 14, we can first divide by 2, and then by 7. While 7 is also uncooperative, the divide by 2 ensures the dividend is only a 31 bit number. Therefore the magic number for the subsequent divide-by-7 only needs to be 32 bits, which can be handled efficiently.

&lt;p&gt;This technique effectively optimizes division by even divisors, and is incorporated in the reference code provided later. Now we present a technique applicable for odd divisors.

&lt;h3&gt;&lt;a class=&quot;link_anchor&quot; name=&quot;divide_3_motivation&quot;&gt;Motivation (aka What Goes Up Can Also Go Down)&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;First, an appeal to intuition. A divisor is uncooperative in the round-up algorithm because the rounding-up produces a poor approximation.  That is, $\frac {2^k} d$ is just slightly larger than some integer, so the approximation $\lceil \frac {2^k} d \rceil$ is off by nearly one, which is a lot.  It stands to reason, then, that we could get a better approximation by floor instead of ceil: $m = \lfloor \frac {2^k} d \rfloor$.

&lt;p&gt;A na&amp;iuml;ve attempt to apply this immediately runs into trouble. Let d be any non-power-of-2 divisor, and consider trying to divide d by itself by multiplying with this magic number:

&lt;p&gt;$ \lfloor \frac {2^k} d \rfloor &lt; \frac {2^k} d \implies $ &lt;br&gt;&lt;br&gt;
$ \lfloor \frac {2^k} d \rfloor \times \frac d {2^k} &lt; \frac {2^k} d \times \frac d {2^k} \implies $ &lt;br&gt;&lt;br&gt;
$ \lfloor \lfloor \frac {2^k} d \rfloor \times \frac d {2^k} \rfloor &lt; 1 $

&lt;p&gt;The result is too small.

&lt;p&gt;(Could we replace the outer floor by a ceil? The floor is implemented by a right shift, which throws away the bits that are shifted off. We could conjure up a &quot;rounding up&quot; right shift, and that might work, though it would likely be more expensive than the instructions it replaces.)

&lt;p&gt;So rounding down causes us to underestimate the result. What if we tried to counteract that by incrementing the numerator first?

&lt;p&gt;$\lfloor \frac n d \rfloor \  \stackrel{?}{=} \  \lfloor \lfloor \frac {2^k} d \rfloor \times \frac {\color{#FF3030}{n+1}} {2^k} \rfloor $

&lt;p&gt;This is the round-down algorithm.

&lt;h3&gt;&lt;a class=&quot;link_anchor&quot; name=&quot;divide_3_correctness&quot;&gt;Proof of Correctness&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;First we must show that the round-down algorithm actually works. We proceed much like the proof for the round-up algorithm. We have a known constant d and a runtime variable n, both N bit values. We want to find some k that ensures:

&lt;p&gt;$\lfloor \frac n d \rfloor = \lfloor m \times \frac {n+1} {2^k} \rfloor$&lt;/p&gt;

&lt;p&gt;where: $$ \small \begin{align} \small &amp; m = \lfloor \frac {2^k} d \rfloor \\
&amp; 0 \le n &lt; 2^{N}  \\
&amp; 0 &lt; d &lt; 2^{N} \\
&amp; \text{d not a power of 2} \end{align} $$

&lt;p&gt;Introduce an integer e which represents the error produced by the floor:

&lt;p&gt;$ m = \lfloor \frac {2^k} d \rfloor = \frac {2^k - e} d $&lt;br&gt;&lt;br&gt;$0 &lt; e &lt; d$

&lt;p&gt;Apply some algebra:

&lt;p&gt;$$\begin{align} \lfloor m \times \frac {n+1} {2^k} \rfloor &amp; = \lfloor \frac {2^k - e} d \times \frac {n + 1} {2^k} \rfloor \\
&amp; = \lfloor \frac {n + 1} d \times \frac {2^k - e} {2^k} \rfloor \\
&amp; = \lfloor \frac {n + 1} d \times ( 1 - \frac e {2^k} ) \rfloor \\
&amp; = \lfloor \frac {n+1} d - \frac {n+1} d \times \frac e {2^k} \rfloor \\
&amp; = \lfloor \frac n d + \frac 1 d - \frac e d \times \frac {n+1} {2^k} \rfloor \end{align} $$

&lt;p&gt;We hope that this equals $\lfloor \frac n d \rfloor$. Within the floor, we see the result, plus two terms of opposite signs. We want the combination of those terms to cancel out to something at least zero, but small enough to be wiped out by the floor. Let us compute the fractional contribution of each term, and show that it is at least zero but less than one.

&lt;p&gt;The fractional contribution of the $\frac n d$ term can be as small as zero and as large as $\frac {d-1} d$. Therefore, in order to keep the whole fractional part at least zero but below one, we require:

&lt;p&gt;$ 0 \le \frac 1 d - \frac e d \times \frac {n+1} {2^k} &lt; \frac 1 d$

&lt;p&gt;The term $\frac e d \times \frac {n+1}{2^k}$ is always positive, so the $&lt; \frac 1 d$ is easily satisfied. It remains to show it is at least zero.  Rearranging:

&lt;p&gt;$ 0 \le \frac 1 d - \frac e d \times \frac {n+1} {2^k} \implies \frac e d \times \frac {n+1} {2^k} \le \frac 1 d $

&lt;p&gt;This is very similar to the condition required in the round-up algorithm! Let&#39;s continue to simplify, using the fact that n &lt; 2&lt;sup&gt;N&lt;/sup&gt;.

&lt;p&gt;$ \frac e d \times \frac {n+1} {2^k} \le \frac 1 d$ &lt;br&gt;&lt;br&gt;
$ e \times \frac {n+1} {2^k} \le 1 $ &lt;br&gt;&lt;br&gt;
$ \frac e {2^{k-N}} \le 1 $ &lt;br&gt;&lt;br&gt;
$ e \le 2^{k-N} $

&lt;p&gt;This is the condition that guarantees that our magic number m works. In summary, pick some k &amp;#8805; N, and compute $ \small e = 2^k \mod{d} $. If the resulting e &amp;#8804; 2&lt;sup&gt;k-N&lt;/sup&gt;, the algorithm is guaranteed to produce the correct result for all N-bit dividends.

&lt;h3&gt;&lt;a class=&quot;link_anchor&quot; name=&quot;divide_3_universality&quot;&gt;Proof of Universality (aka Your Weakness Is My Strength)&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;When will this condition be met? Recall the hand-waving from before: the round-up algorithm failed because rounding up produced a poor approximation, so we would expect rounding down to produce a good approximation, which would make the round-down algorithm succeed. Optimistically, we&#39;d hope that round-down will succeed any time round-up fails! Indeed that is the case, and we can formally prove it now.

&lt;p&gt;Here e&lt;sub&gt;up&lt;/sub&gt; refers to the difference produced by rounding 2&lt;sup&gt;k&lt;/sup&gt; up to a multiple of d, as in the round-up algorithm, while e&lt;sub&gt;down&lt;/sub&gt; refers to the difference produced by rounding down to a multiple of d as in round-down. An immediate consequence is e&lt;sub&gt;up&lt;/sub&gt;  + e&lt;sub&gt;down&lt;/sub&gt; = d.

&lt;p&gt;Recall from the round-up algorithm that we try successive values for k, with the smallest k guaranteed to work equal to $ \small N + \lceil log_2 d \rceil $. Unfortunately, this k produces a magic number of N+1 bits, and so too large to fit in a hardware register. Let&#39;s consider the k just below it, which produces a magic number of N bits:

&lt;p&gt;$ k = N + \lceil log_2 d \rceil - 1 = N + \lfloor log_2 d \rfloor $

&lt;p&gt;Assume that d is uncooperative, i.e. the magic number for this power was not valid in the round-up algorithm. It would have been valid if $ e_{up} &lt; 2^{\lfloor log_2 d \rfloor} $; because it was not valid we must have $ e_{up} \ge 2^{\lfloor log_2 d \rfloor} $. Substituting in:

&lt;p&gt;$$\begin{align} e_{up} &amp; \ge 2^{\lfloor log_2 d \rfloor} \implies \\
d - e_{down} &amp; \ge 2^{\lfloor log_2 d \rfloor} \implies \\
e_{down} &amp; \le d - 2^{\lfloor log_2 d \rfloor} \implies \\
e_{down} &amp; \le 2^{\lceil log_2 d \rceil} - 2^{\lfloor log_2 d \rfloor} \implies \\
e_{down} &amp; \le  2 \times 2^{\lfloor log_2 d \rfloor} - 2^{\lfloor log_2 d \rfloor} \implies \\
e_{down} &amp; \le 2^{\lfloor log_2 d \rfloor} \implies \\
e_{down} &amp; \le 2^{k-N} \end{align} $$

&lt;p&gt;Thus we&#39;ve satisfied the condition determined in the proof of correctness. This is an important and remarkable result: the round-down algorithm is guaranteed to have an efficient magic number whenever round-up does not. If the implementation of round-down can be shown to be more efficient, the overflow case for the round-up algorithm can be discarded entirely.

&lt;h3&gt;Recap&lt;/h3&gt;

&lt;p&gt;Here&#39;s the practical algorithm. Given a dividend n and a fixed divisor d, where 0 &amp;#8804; n &lt; 2&lt;sup&gt;N&lt;/sup&gt; and 0 &lt; d &lt; 2&lt;sup&gt;N&lt;/sup&gt;, and where the usual round-up algorithm failed to find an N-bit magic number:

&lt;ol&gt;
&lt;li style=&quot;margin-top: 7px&quot;&gt;Consider in turn values of p in the range 0 through $ \small \lfloor log_2 d \rfloor $, inclusive.&lt;/li&gt;
&lt;li style=&quot;margin-top: 7px&quot;&gt;If $ \small 2^{N + p}\ \bmod{d} \le 2^p $, then we have found a working p. The last value in the range is guaranteed to work.&lt;/li&gt;
&lt;li style=&quot;margin-top: 7px&quot;&gt;Once we have a working p, precompute the magic number $ \small m = \lfloor \frac {2^{N + p}} d \rfloor $, which will be strictly less than 2&lt;sup&gt;N&lt;/sup&gt;.&lt;/li&gt;
&lt;li style=&quot;margin-top: 7px&quot;&gt;Compute $ \small q = (m \times (n+1)) \gg N $. This is typically implemented via a &quot;high multiply&quot; instruction.&lt;/li&gt;
&lt;li style=&quot;margin-top: 7px&quot;&gt;Perform any remaining shift: $ \small q = q \gg p $.&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;&lt;a class=&quot;link_anchor&quot; name=&quot;divide_3_overflow&quot;&gt;Overflow Handling&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This algorithm has a wrinkle. Because n is an N-bit number, it may be as large as 2&lt;sup&gt;N&lt;/sup&gt; - 1, in which event the n+1 term will be an N+1 bit number. If the value is simply incremented in an N-bit register, the dividend will wrap to zero, and the quotient will in turn be zero. Here we present two strategies for efficiently handling the possibility of modulo overflow.

&lt;h4&gt;Distributed Multiply Strategy&lt;/h4&gt;

&lt;p&gt;An obvious approach is to distribute the multiply through, i.e.:

&lt;p&gt;$ \small m \times (n+1) = m \times n + m $

&lt;p&gt;This is a 2N-bit quantity and so cannot overflow. For efficient implementation, this requires that the low half of the m x n  product be available &quot;for free,&quot; so that the sum can be performed and any carry transmitted to the high half. Many modern architectures produce both halves with one instruction, such as Intel x86 (the &lt;i&gt;MUL&lt;/i&gt; instruction) or ARM (&lt;i&gt;UMULL&lt;/i&gt;). It is also available if the register width is twice the bit size of the type, e.g. performing a 32 bit divide on a 64 bit processor.

&lt;h4&gt;Saturating Increment Strategy&lt;/h4&gt;

&lt;p&gt;However, other processors compute the low and high halves separately, such as PowerPC; in this case computing the lower half of the product would be prohibitively expensive, and so a different strategy is needed. A second, surprising approach is to simply elide the increment if n is already at its maximum value, i.e. replace the increment with a &quot;saturating increment&quot; defined by:

&lt;p&gt;$$ \small
\text{SaturInc}(x) =
\begin{cases}
x+1 &amp;  \text{ if } x &lt; 2^N-1 \\
x &amp; \text{ if } x = 2^N-1
\end{cases}
$$

&lt;p&gt;It is not obvious why this should work: we needed the increment in the first place, so how can we just skip it?  We must show that replacing increment with SaturInc will compute the correct result for 2&lt;sup&gt;N&lt;/sup&gt; - 1. A proof of that is presented below.

&lt;h4&gt;Proof of Correctness when using Saturating Increment&lt;/h4&gt;

&lt;p&gt;Consider the practical algorithm presented above, with the +1 replaced by saturating increment. If $ \small n &lt; 2^N-1 $, then saturating increment is the same as +1, so the proof from before holds. Therefore assume that $ \small n = 2^N-1 $, so that incrementing n would wrap to 0.

&lt;p&gt;By inspection, $ \small \text{SaturInc}(2^N - 1) = \text{SaturInc}(2^N - 2) $. Because the algorithm has no other dependence on n, replacing the +1 with SaturInc effectively causes the algorithm to compute the quotient $ \lfloor \frac {2^N - 2} d \rfloor $ when n = 2&lt;sup&gt;N&lt;/sup&gt;-1.

&lt;p&gt;Now d either is or is not a factor of 2&lt;sup&gt;N&lt;/sup&gt;-1. Let&#39;s start by assuming it is not a factor. It is easy to prove that, if x and y are positive integers and y is not a factor of x, then $ \lfloor \frac x y \rfloor = \lfloor \frac {x-1} y \rfloor $. Therefore it must be true that $  \lfloor \frac {2^N - 1} d \rfloor = \lfloor \frac {2^N - 2} d \rfloor $, so the algorithm computes the correct quotient.

&lt;p&gt;Now let us consider the case where d is a factor of 2&lt;sup&gt;N&lt;/sup&gt;-1.  We will prove that d is cooperative, i.e. the round-up algorithm produced an efficient N-bit result for d, and therefore the round-down algorithm is never employed. Because d is a factor of 2&lt;sup&gt;N&lt;/sup&gt;-1, we have $ \small 2^N\  \bmod{d} = 1 $. Consider once again the case of the &quot;last N-bit magic number,&quot; i.e.:

&lt;p&gt;$ \small k = N + \lceil log_2 d \rceil - 1 = N + \lfloor log_2 d \rfloor $

&lt;p&gt;Recall that the round-up algorithm computes $ \small e_{up} = d - (2^k\ \bmod{d}) $. This power is acceptable to the round-up algorithm if $ \small e_{up} \leq 2^{k - N} = 2^{\lfloor log_2 d \rfloor} $. Consider:

&lt;p&gt;$$ \begin{align} 2^k\ \bmod{d} &amp; = 2^{N + \lfloor log_2 d \rfloor}\ \bmod{d} \\
&amp; = 2^N \times 2^{\lfloor log_2 d \rfloor}\ \bmod{d} \\
&amp; = 1 \times 2^{\lfloor log_2 d \rfloor}\ \bmod{d} \\
&amp; = 2^{\lfloor log_2 d \rfloor} \end{align} $$
  
&lt;p&gt;Substituting in:

&lt;p&gt;$$ \begin{align} e_{up} &amp; = d - 2^{\lfloor log_2 d \rfloor} \\
      e_{up} &amp; &lt; 2^{\lceil log_2 d \rceil} - 2^{\lfloor log_2 d \rfloor} \\
      &amp; &lt; 2 \times 2^{\lfloor log_2 d \rfloor} - 2^{\lfloor log_2 d \rfloor} \\
       &amp; &lt; 2^{\lfloor log_2 d \rfloor} \end{align} $$
      
&lt;p&gt;Thus the power k is acceptable to the round-up algorithm, so d is cooperative and the round-down algorithm is never employed.  Thus a saturating increment is acceptable for all uncooperative divisors. Q.E.D.

&lt;p&gt;(As an interesting aside, this last proof demonstrates that all factors of 2&lt;sup&gt;N&lt;/sup&gt;-1 &quot;just barely&quot; have efficient N-bit magic numbers. For example, the divisor 16,711,935 is a factor of 2&lt;sup&gt;32&lt;/sup&gt;-1, and its magic number, while N bits, requires a shift of 23, which is large; in fact it is the largest possible shift, as the floor of the base 2 log of that divisor. But increase the divisor by just one (16711936) and only a 16 bit shift is necessary.)

&lt;p&gt;In summary, distributing the multiplication or using a saturating increment are both viable strategies for avoiding wrapping in the n+1 expression, ensuring that the algorithm works over the whole range of dividends. Implementations can use whichever technique is most efficient&lt;a href=&quot;#divide_3_fn1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;.

&lt;h3&gt;&lt;a class=&quot;link_anchor&quot; name=&quot;divide_3_implementation&quot;&gt;Practical Implementation&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The discussion so far is only of theoretical interest; it becomes of practical interest if the round-down algorithm can be shown to outperform round-up on uncooperative divisors. This is what will be demonstrated below for x86 processors.

&lt;p&gt;x86 processors admit an efficient saturating increment via the two-instruction sequence add 1; sbb 0; (i.e. &quot;add; subtract 0 with borrow&quot;). They also admit an efficient distributed multiply. The author implemented this optimization in the LLVM compiler using both strategies in turn, and then compiled the following C code which simply divides a value by 7, using clang -O3 -S -arch i386 -fomit-frame-pointer (this last flag for brevity):

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sevens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

Here is a comparison of the generated i386 assembly, with corresponding instructions aligned, and instructions that are unique to one or the other algorithm shown in red. (x86-64 assembly produced essentially the same insights, and so is omitted.)

&lt;p&gt;&lt;div style=&quot;display: table; font-size: small; width: 100%;&quot;&gt;
&lt;pre style=&quot;display: table-cell&quot;&gt;
Round-Up (Stock LLVM)
_sevens:
  movl  4(%esp), %ecx
  
  
  movl  $613566757, %edx
  &lt;span style=&quot;color: red&quot;&gt;movl  %ecx, %eax&lt;/span&gt;
  mull  %edx
  &lt;span style=&quot;color: red&quot;&gt;subl  %edx, %ecx
  shrl  %ecx
  addl  %edx, %ecx&lt;/span&gt;
  shrl  $2, %ecx
  movl  %ecx, %eax
  ret
&lt;/pre&gt;
&lt;pre style=&quot;display: table-cell&quot;&gt;
Distributive
_sevens:



  movl  $1227133513, %eax

  mull  4(%esp)
  &lt;span style=&quot;color: red&quot;&gt;addl  $1227133513, %eax
  adcl  $0, %edx&lt;/span&gt;
  
  shrl  %edx
  movl  %edx, %eax
  ret
&lt;/pre&gt;
&lt;pre style=&quot;display: table-cell&quot;&gt;
Saturating Increment
_sevens:
  movl  4(%esp), %eax
  &lt;span style=&quot;color: red&quot;&gt;addl  $1, %eax
  sbbl  $0, %eax&lt;/span&gt;
  movl  $1227133513, %ecx
  
  mull  %ecx
  
  
  
  shrl  %edx
  movl  %edx, %eax
  ret
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The round-down algorithms not only avoid the three-instruction overflow handling, but also avoid needing to store the dividend past the multiply (notice the highlighted MOVL instruction in the round-up algorithm). The result is a net saving of two instructions. Also notice that the variants require fewer registers, which suggests there might be even more payoff (i.e. fewer register spills) when the divide is part of a longer code sequence.

&lt;p&gt;(In the distributive variant the compiler has made the dubious choice to emit the same immediate twice instead of placing it in a register. This is especially deleterious in the loop microbenchmark shown below, because loading the immediate into the register could be hoisted out of the loop. To address this, the microbenchmark tests both the assembly as generated by LLVM, and a version tweaked by hand to address this suboptimal codegen.)

&lt;p&gt;As illustrated, both strategies require only two instructions on x86, which is important because the overhead of the round-up algorithm is three to four instructions. Many processor architectures admit a two-instruction saturating increment through the carry flag&lt;a href=&quot;#divide_3_fn2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;.

&lt;h3 class=&quot;unbreakable&quot;&gt;&lt;a class=&quot;link_anchor&quot; name=&quot;divide_3_benchmark&quot;&gt;Microbenchmark&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;To measure the performance, the author compiled a family of functions. Each function accepts an array of unsigned ints, divides them by a particular uncooperative divisor, and returns the sum; for example:

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;divide_7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Each function in the family had very similar machine code; a representative sample is:

&lt;p&gt;&lt;div style=&quot;display: table; font-size: small; width: 100%;&quot;&gt;
&lt;pre style=&quot;display: table-cell&quot;&gt;
Standard Round-Up
_divide_7:
  pushl  %ebp
  movl  %esp, %ebp
  pushl  %ebx
  pushl  %edi
  pushl  %esi
  xorl  %ecx, %ecx
  movl  12(%ebp), %edi
  testl  %edi, %edi
  je  LBB1_3
  movl  8(%ebp), %ebx
  
LBB1_2:
  movl  (%ebx), %esi
  &lt;span style=&quot;color: red&quot;&gt;movl  %esi, %eax
  movl  $613566757, %edx&lt;/span&gt;
  mull  %edx
  &lt;span style=&quot;color: red&quot;&gt;subl  %edx, %esi
  shrl  %esi
  addl  %edx, %esi&lt;/span&gt;
  shrl  $2, %esi
  addl  %esi, %ecx
  addl  $4, %ebx
  decl  %edi
  jne  LBB1_2
LBB1_3:
  movl  %ecx, %eax
  popl  %esi
  popl  %edi
  popl  %ebx
  popl  %ebp
  ret
&lt;/pre&gt;
&lt;pre style=&quot;display: table-cell&quot;&gt;
Distributive (hand tweaked)
_divide_7:
  pushl  %ebp
  movl  %esp, %ebp
  pushl  %ebx
  pushl  %edi
  pushl  %esi
  xorl  %ecx, %ecx
  movl  12(%ebp), %esi
  testl  %esi, %esi
  je  LBB0_3
  movl  8(%ebp), %edi
  movl  $1227133513, %ebx
LBB0_2:
  movl  (%edi), %eax
  
  
  mull  %ebx
  &lt;span style=&quot;color: red&quot;&gt;addl  %ebx, %eax
  adcl  $0, %edx&lt;/span&gt;
  
  shrl  %edx
  addl  %edx, %ecx
  addl  $4, %edi
  decl  %esi
  jne  LBB0_2
LBB0_3:
  movl  %ecx, %eax
  popl  %esi
  popl  %edi
  popl  %ebx
  popl  %ebp
  ret
&lt;/pre&gt;
&lt;pre style=&quot;display: table-cell&quot;&gt;
Saturating Increment
_divide_7:
  pushl  %ebp
  movl  %esp, %ebp
  pushl  %ebx
  pushl  %edi
  pushl  %esi
  xorl  %ecx, %ecx
  movl  12(%ebp), %esi
  testl  %esi, %esi
  je  LBB1_3
  movl  8(%ebp), %edi
  movl  $1227133513, %ebx
LBB1_2:
  movl  (%edi), %eax
  &lt;span style=&quot;color: red&quot;&gt;addl  $1, %eax
  sbbl  $0, %eax&lt;/span&gt;
  mull  %ebx
  
  
  
  shrl  %edx
  addl  %edx, %ecx
  addl  $4, %edi
  decl  %esi
  jne  LBB1_2
LBB1_3:
  movl  %ecx, %eax
  popl  %esi
  popl  %edi
  popl  %ebx
  popl  %ebp
  ret
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A simple test harness was constructed and the above functions were benchmarked to estimate the time per divide.  The benchmark was compiled with clang on -O3, and run on a 2.93 GHz Core i7 iMac. Test runs were found to differ by less than .1%.

&lt;p&gt;&lt;div class=&quot;unbreakable&quot; style=&quot;border: 1px solid #AAA; background-color: #eee; text-align: center; width: 800px; margin: 20px auto; padding: 0 20px 20px 20px;&quot;&gt;
&lt;h4&gt;Nanoseconds Per Divide&lt;/h4&gt;
&lt;p&gt;&lt;table class=&quot;div_results&quot; style=&quot;margin-left: auto; margin-right: auto; width: 100%&quot;&gt;
  &lt;tr&gt;
   &lt;td style=&quot;height: 24pt; width: 67px; background-color: #ebebeb;&quot;&gt;&lt;/td&gt;
   &lt;td style=&quot;width: 69px; background-color: #ebebeb;&quot;&gt;
    &lt;p style=&quot;text-align: right; font-size: 10px&quot;&gt;&lt;b&gt;Divisor&lt;/b&gt;&lt;/p&gt;&lt;/td&gt;
   &lt;td style=&quot;width: 18px; background-color: #ebebeb;&quot;&gt;&lt;/td&gt;
   &lt;td style=&quot;height: 24pt; width: 67px; background-color: #ebebeb; font-size: 10.0px;&quot;&gt;
    &lt;p&gt;&lt;b&gt;Round Up&lt;/b&gt;&lt;/p&gt;&lt;/td&gt;
   &lt;td style=&quot;width: 47px; background-color: #ebebeb;&quot;&gt;&lt;/td&gt;
   &lt;td colspan=&quot;2&quot; style=&quot;width: 123px; background-color: #ebebeb; font-size: 10.0px;&quot;&gt;
    &lt;p&gt;&lt;b&gt;Saturating Increment&lt;/b&gt;&lt;/p&gt;&lt;/td&gt;
   &lt;td style=&quot;width: 13px; background-color: #ebebeb;&quot;&gt;&lt;/td&gt;
   &lt;td colspan=&quot;2&quot; style=&quot;width: 132px; background-color: #ebebeb; font-size: 10.0px;&quot;&gt;
    &lt;p&gt;&lt;b&gt;Distribute (as generated)&lt;/b&gt;&lt;/p&gt;&lt;/td&gt;
   &lt;td style=&quot;width: 13px; background-color: #ebebeb;&quot;&gt;&lt;/td&gt;
   &lt;td colspan=&quot;2&quot; style=&quot;width: 132px; background-color: #ebebeb; font-size: 10.0px;&quot;&gt;
    &lt;p&gt;&lt;b&gt;Distribute (hand tweaked)&lt;/b&gt;&lt;/p&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black; font-size: 10.0px;&quot;&gt;
    &lt;p&gt;&lt;b&gt;i386&lt;/b&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;7&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.632&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.484&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;9.1%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.488&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;8.9%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.433&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;12.2%&lt;/p&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black; font-size: 10.0px;&quot;&gt;
    &lt;p&gt;&lt;b&gt;uint32&lt;/b&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;37&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.631&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.483&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;9.1%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.486&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;8.9%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.433&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;12.1%&lt;/p&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;123&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.633&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.484&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;9.1%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.488&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;8.9%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.432&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;12.3%&lt;/p&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;763&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.632&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.483&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;9.1%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.487&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;8.9%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.432&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;12.2%&lt;/p&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;1247&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.633&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.484&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;9.1%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.491&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;8.7%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.433&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;12.2%&lt;/p&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;9305&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.631&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.484&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;9.0%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.491&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;8.6%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.439&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;11.7%&lt;/p&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;13307&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.632&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.483&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;9.1%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.489&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;8.7%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.437&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;11.9%&lt;/p&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;52513&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.631&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.483&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;9.1%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.490&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;8.7%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.432&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;12.2%&lt;/p&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;60978747&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.631&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.484&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;9.0%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.488&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;8.8%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.434&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;12.1%&lt;/p&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;106956295&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.631&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.484&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;9.0%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.489&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;8.7%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.433&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;12.1%&lt;/p&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb;&quot;&gt;&lt;/td&gt;
   &lt;td style=&quot;height: 30.0px&quot;&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;
    &lt;p style=&quot;font-size: 10.0px;&quot;&gt;&lt;b&gt;x86_64&lt;/b&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;7&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.537&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.307&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;14.9%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.548&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #b2150a&quot;&gt;-0.7%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.362&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;11.4%&lt;/p&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;
    &lt;p style=&quot;font-size: 10.0px;&quot;&gt;&lt;b&gt;uint32&lt;/b&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;37&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.538&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.307&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;15.0%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.548&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #b2150a&quot;&gt;-0.7%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.362&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;11.4%&lt;/p&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;123&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.537&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.319&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;14.2%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.547&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #b2150a&quot;&gt;-0.6%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.361&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;11.5%&lt;/p&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;763&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.536&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.306&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;15.0%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.547&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #b2150a&quot;&gt;-0.8%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.356&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;11.7%&lt;/p&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;1247&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.538&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.322&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;14.1%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.549&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #b2150a&quot;&gt;-0.7%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.358&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;11.7%&lt;/p&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;9305&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.543&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.322&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;14.3%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.550&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #b2150a&quot;&gt;-0.5%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.361&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;11.8%&lt;/p&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;13307&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.545&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.322&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;14.4%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.550&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #b2150a&quot;&gt;-0.3%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.357&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;12.1%&lt;/p&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;52513&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.541&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.307&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;15.2%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.550&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #b2150a&quot;&gt;-0.6%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.361&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;11.7%&lt;/p&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;60978747&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.538&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.322&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;14.0%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.549&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #b2150a&quot;&gt;-0.7%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.358&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;11.7%&lt;/p&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;106956295&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.537&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.322&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;14.0%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.551&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #b2150a&quot;&gt;-0.9%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.360&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;11.5%&lt;/p&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb;&quot;&gt;&lt;/td&gt;
   &lt;td style=&quot;height: 30.2px&quot;&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;
    &lt;p style=&quot;font-size: 10.0px;&quot;&gt;&lt;b&gt;x86_64&lt;/b&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;7&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.823&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.588&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;12.9%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.505&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;17.4%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;font-size: 10.0px;&quot;&gt;n/a&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;
    &lt;p style=&quot;font-size: 10.0px;&quot;&gt;&lt;b&gt;uint64&lt;/b&gt;&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;39&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.821&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.589&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;12.7%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.506&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;17.3%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;font-size: 10.0px;&quot;&gt;n/a&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;123&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.821&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.592&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;12.6%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.506&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;17.3%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;font-size: 10.0px;&quot;&gt;n/a&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;763&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.822&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.592&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;12.6%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.505&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;17.4%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;font-size: 10.0px;&quot;&gt;n/a&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;1249&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.822&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.589&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;12.8%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.506&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;17.4%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;font-size: 10.0px;&quot;&gt;n/a&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;9311&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.822&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.587&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;12.9%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.507&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;17.3%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;font-size: 10.0px;&quot;&gt;n/a&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;11315&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.822&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.588&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;12.8%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.506&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;17.4%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;font-size: 10.0px;&quot;&gt;n/a&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;52513&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.823&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.591&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;12.7%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.506&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;17.4%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;font-size: 10.0px;&quot;&gt;n/a&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;60978749&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.822&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.590&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;12.7%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.507&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;17.3%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;font-size: 10.0px;&quot;&gt;n/a&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td style=&quot;background-color: #ebebeb; padding: 1.0px 12.0px 1.0px 2.0px; text-align: right; border: none 0px black;&quot;&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;text-align: right;&quot;&gt;106956297&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.821&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.588&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;12.8%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p&gt;1.506&lt;/p&gt;&lt;/td&gt;&lt;td&gt;&lt;p style=&quot;color: #0fcf1d;&quot;&gt;17.3%&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
   &lt;td&gt;&lt;p style=&quot;font-size: 10.0px;&quot;&gt;n/a&lt;/p&gt;&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Microbenchmark results for tested division algorithms on a Core i7. The top group is for 32 bit division in a 32 bit binary, while the bottom two groups are 32 bit and 64 bit division (respectively) in a 64 bit binary.

&lt;p&gt;Times are in nanoseconds per divide (lower is better). Percentages are percent improvement from the Round Up algorithm (higher is better).
&lt;/div&gt;

&lt;p&gt;These results indicate that the round-down algorithms are indeed faster by 9%-17% (excluding the crummy codegen, which should be fixed in the compiler). The benchmark source code is available at &lt;a href=&quot;http://ridiculousfish.com/files/division_benchmarks.tar.gz&quot;&gt;http://ridiculousfish.com/files/division_benchmarks.tar.gz&lt;/a&gt;.

&lt;p&gt;

&lt;p&gt;&lt;h3&gt;&lt;a class=&quot;link_anchor&quot; name=&quot;divide_3_signed&quot;&gt;Extension to Signed Division&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;A natural question is whether the same optimization could improve signed division; unfortunately it appears that it does not, for two reasons:

&lt;p&gt;&lt;ul&gt;
&lt;li&gt;The increment of the dividend must become an increase in the magnitude, i.e. increment if n &gt; 0, decrement if n &lt; 0. This introduces an additional expense.&lt;/li&gt;
&lt;li&gt;The penalty for an uncooperative divisor is only about half as much in signed division, leaving a smaller window for improvements.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thus it appears that the round-down algorithm could be made to work in signed division, but will underperform the standard round-up algorithm.

&lt;p&gt;&lt;h3&gt;&lt;a class=&quot;link_anchor&quot; name=&quot;divide_3_reference&quot;&gt;Reference Code&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The reference implementation for computing the magic number due to Henry Warren (&quot;Hacker&#39;s Delight&quot;) is rather dense, and it may not be obvious how to incorporate the improvements presented here. To ease adoption, we present a reference implementation written in C that incorporates all known optimizations, including the round-down algorithm.

&lt;p&gt;This new reference implementation is available at &lt;a href=&quot;https://raw.github.com/ridiculousfish/libdivide/master/divide_by_constants_codegen_reference.c&quot;&gt;https://raw.github.com/ridiculousfish/libdivide/master/divide_by_constants_codegen_reference.c&lt;/a&gt;

&lt;p&gt;&lt;h3&gt;&lt;a class=&quot;link_anchor&quot; name=&quot;divide_3_conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The following algorithm is an alternative way to do division by &quot;uncooperative&quot; constants, which may outperform the standard algorithm that produces an N+1 bit magic number. Given a dividend n and a fixed divisor d, where 0 &amp;#8804; n &lt; 2&lt;sup&gt;N&lt;/sup&gt; and 0 &lt; d &lt; 2&lt;sup&gt;N&lt;/sup&gt;, and where the standard algorithm failed to find a N-bit magic number:

&lt;ol&gt;
&lt;li style=&quot;margin-top: 7px&quot;&gt;Consider in turn values of p in the range 0 through $ \small \lfloor log_2 d \rfloor $, inclusive.&lt;/li&gt;
&lt;li style=&quot;margin-top: 7px&quot;&gt;If $ \small 2^{N + p}\ \bmod{d} \le 2^p $, then we have found a working p. The last value in the range is guaranteed to work (assuming the standard algorithm fails).&lt;/li&gt;
&lt;li style=&quot;margin-top: 7px&quot;&gt;Once we have a working p, precompute the magic number $ \small m = \lfloor \frac {2^{N + p}} d \rfloor $, which will be strictly less than 2&lt;sup&gt;N&lt;/sup&gt;.&lt;/li&gt;
&lt;li style=&quot;margin-top: 7px&quot;&gt;To divide n by d, compute the value q through one of the following techniques:
&lt;ul&gt;
&lt;li style=&quot;margin-top: 7px&quot;&gt;Compute $ \small q = (m \times n + m)) \gg N $, OR&lt;/li&gt;
&lt;li style=&quot;margin-top: 7px&quot;&gt;Compute $ \small q = (m \times (n+1)) \gg N $. If n+1 may wrap to zero, it is acceptable to use a saturating increment instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;li style=&quot;margin-top: 7px&quot;&gt;Perform any remaining shift: $ \small q = q \gg p $.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;On a Core i7 x86 processor, a microbenchmark showed that this variant &quot;round down&quot; algorithm outperformed the standard algorithm in both 32 bit and 64 bit modes by 9% to 17%, and in addition generated shorter code that used fewer registers. Furthermore, the variant algorithm is no more difficult to implement than is the standard algorithm. The author has provided a reference implementation and begun some preliminary work towards integrating this algorithm into LLVM, and hopes other compilers will adopt it.

&lt;p&gt;

&lt;hr&gt;

&lt;h4&gt;Footnotes&lt;/h4&gt;

&lt;p&gt;&lt;fn id=divide_3_fn1&gt;
1. Of course, if n can statically be shown to not equal 2&lt;sup&gt;N&lt;/sup&gt;-1, then the increment can be performed without concern for modulo overflow. This likely occurs frequently due to the special nature of the value 2&lt;sup&gt;N&lt;/sup&gt;-1.
&lt;/fn&gt;

&lt;p&gt;&lt;fn id=divide_3_fn2&gt;
 2. Many processor architectures admit a straightforward saturating increment by use of the carry flag. PowerPC at first blush appears to be an exception: it has somewhat unusual carry flag semantics, and the obvious approach requires three instructions:

&lt;pre&gt;
    li r2, 0
    addic r3, r3, 1
    subfe r3, r2, r3
&lt;/pre&gt;
 
However PowerPC does admit a non-obvious two-instruction saturating increment. It does not seem to appear in the standard literature, and for that reason it is provided below. Given that the value to be incremented is in r3, execute:

&lt;pre&gt;
    subfic r2, r3, -2
    addze r3, r3
&lt;/pre&gt;

&lt;p&gt;The result is in r3. r2 can be replaced by any temporary register; its value can be discarded.
&lt;/fn&gt;
</content>
  </entry>
  
  <entry>
    <title>Angband 3.3 (Guest Blogger: Elrond)</title>
    <link href="http://ridiculousfish.com/blog/posts/Angband-3.3.html"/>
    <updated>2011-10-14T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/Angband-3.3</id>
    <content type="html">&lt;div style=&quot;overflow: auto&quot;&gt;

&lt;p class=&quot;tengwar&quot;&gt;
&lt;img src=&quot;/blog/images/elrond.jpg&quot; style=&quot;width: 183px; height: 277px; float: left; margin-right: 20px; margin-bottom: 15px;&quot;&gt;

&lt;p class=&quot;tengwar&quot;&gt;Angband 3.3. Best to read this one on the site.</content>
  </entry>
  
  <entry>
    <title>My One Lame Steve Story</title>
    <link href="http://ridiculousfish.com/blog/posts/my-one-lame-steve-story.html"/>
    <updated>2011-10-05T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/my-one-lame-steve-story</id>
    <content type="html">&lt;p&gt;I am at work, heading to a meeting, walking down an empty hallway. As I reach the end, the door opens from the other side, and Steve enters, looking down intently at his iPhone. I step aside so he can pass, but he stops right in the middle of the doorway. He doesn&#39;t see me.

&lt;p&gt;I wait. He pokes at his phone. I nervously shuffle my feet. He still is just standing there. Do I dare clear my throat?

&lt;p&gt; Five seconds of eternity go by. At last he looks up and realizes I&#39;ve been waiting for him. &quot;Hi,&quot; he says sheepishly.

&lt;p&gt;&lt;span style=&quot;font-size: 26pt; font-weight; bold;&quot;&gt;&quot;HI!&quot;&lt;/span&gt; I yell.

&lt;p&gt;The end.

&lt;p&gt;Thank you for everything Steve.</content>
  </entry>
  
  <entry>
    <title>One App's Poison</title>
    <link href="http://ridiculousfish.com/blog/posts/The-app-that-was-fixed-by-a-crash.html"/>
    <updated>2011-09-15T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/The-app-that-was-fixed-by-a-crash</id>
    <content type="html">&lt;p&gt;This is the true story of the app that was fixed by a crash. We travel back to join &lt;i&gt;fish&lt;/i&gt; mid-debugging:

&lt;p&gt;I&#39;m dumbfounded.  The thread is just gone.  And not just any thread: the main thread.

&lt;p&gt;I don&#39;t even know how you make the main thread go away.  exit() gets rid of the whole app.  Will pthread_exit() do it?  Maybe it&#39;s some crazy exception thing?

&lt;p&gt;See, I&#39;ve got a bug report.  &lt;i&gt;Surf&#39;s Up: Epic Waves&lt;/i&gt; doesn&#39;t work on this prelease OS. Last year, the game giddily ran through its half-dozen splash screens before landing on its main menu, full of surf boards and power chords.  Today, it just sits there silently, showing nothing but black, getting all aggro. The game hasn&#39;t changed, but the OS did, and I&#39;ve got to figure out what&#39;s different.

&lt;p&gt;So far this is familiar territory.  A black screen could be any old hang.  I break out sample, crack open the Surfing carapace, peer inside. It&#39;s a big app, with over a dozen threads each doing their separate thing. Nothing unusual at all; in particular nothing that looks like a hang. Except...wait, where&#39;s the main thread? It&#39;s missing. There is NO MAIN THREAD.

&lt;p&gt;I don&#39;t know that the main thread&#39;s disappearance is connected to the hang, but it&#39;s all I have to go on, so let&#39;s investigate.

&lt;p&gt;Does the main thread just dry up and fall off, a sort of programmatic umbilical cord?  Maybe this program doesn&#39;t need it, instead cobbling together an assortment of other threads into working software.

&lt;p&gt;Or maybe it&#39;s violent.  Maybe the app is forcibly decapitated but still running, unaware of its state, like some lumbering twelve-legged headless chicken, flapping uselessly, bumping into things.

&lt;p&gt;This is easy to check.  I boot it up on last year&#39;s OS and take a sample.  The main thread is there!  So it&#39;s decapitation.  Now we just have to find the butcher.

&lt;p&gt;My debugging toolbox overfloweth.  I start the app in gdb - ah, no, it doesn&#39;t like that.  Complains and crashes.

&lt;p&gt;No problem.  I try dtrace - complains and crashes.

&lt;p&gt;One by one, my tools are blunted against the deceptively upbeat &lt;i&gt;Surf&#39;s Up&lt;/i&gt;.  Maybe it intentionally defeats debugging, maybe it&#39;s just some accident of design; either way it&#39;s nearly impenetrable. Only sample works. So I take sample after sample, slogging through them, looking for something, anything, to explain the empty black screen, which now seems to be growing, filling my vision...

&lt;p&gt;I head home, frustated.

&lt;p&gt;&lt;hr&gt;

&lt;p&gt;The next day came with no new ideas, so I decide to consult with my imaginary go-to guy. I close my eyes and picture him: the scruffy beard, the sardonic smirk...

&lt;p&gt;&quot;You&#39;re an idiot,&quot; says House by way of hello. I think it over, but it doesn&#39;t help.  I say &quot;The main thread is not calling exit, it&#39;s not returning, it&#39;s not crashing, so where is it going?&quot;

&lt;p&gt;House says, &quot;You don&#39;t know that. That&#39;s just what it&#39;s telling you. And like I said, you&#39;re an idiot, because you believe it. Everybody lies.&quot;

&lt;p&gt;&quot;The patient,&quot; says House, &quot;starts out fine. And then, from nowhere, WHACK! Off with its head! But the body keeps on going.  Pretty cool!&quot;

&lt;p&gt;House continues, &quot;But how is that possible?  Most patients don&#39;t survive headless.  Somehow, this one does, and we need to figure out how.  We need to catch it in the act.&quot;

&lt;p&gt;&quot;And how would I do that?&quot; I muse.

&lt;p&gt;&quot;Chop off its head.&quot;

&lt;p&gt;&lt;hr&gt;

&lt;p&gt;It&#39;s darkly ingenious.  I don&#39;t have the code for this app, and most of my debugging tools are neutered, but there is one inescapable dependency, one avenue into its underbelly: the OS itself.  That&#39;s code that I control.  I can make the OS treacherous, turn it against the app.

&lt;p&gt;Let&#39;s try to crash the main thread and see what happens. I check out the source for a dynamic library the app uses, choose my line, and add a dose of poison:

&lt;pre&gt;*(int*)NULL = 0;&lt;/pre&gt;

&lt;p&gt;I try my weaponized library against a hapless guinea pig, and it dies immediately.  So far so good. I set the framework path, and launch &lt;i&gt;Surf&#39;s Up&lt;/i&gt;...

&lt;p&gt;Power chords!  My NULL dereference was medicine, not poison!

&lt;p&gt;I feel my sanity begin to give.  &quot;Crashing the app, fixes the app?  As if asking for help from an imaginary version of a fake doctor wasn&#39;t crazy enough. What does this mean?&quot;

&lt;p&gt;&quot;The head can&#39;t fall off,&quot; House answers, &quot;if it&#39;s already gone.&quot;

&lt;p&gt;&quot;You mean, our crash somehow pre-empted a different, bloodier crash?  But the app doesn&#39;t report any crashes at all.&quot;

&lt;p&gt;&quot;Everybody lies,&quot; says House. 

&lt;p&gt;Hmm.  Perhaps the app is surviving through setting a signal handler? It could elide a crash that way, catch it and continue on.  If so, then clearing the signal handler should make the app visibly crash, like every other app. I change my weaponized library to clear the signal handler for SIGBUS.  &lt;i&gt;Surf&#39;s Up&lt;/i&gt; launches, then once again hangs at a black screen.  No crash.

&lt;p&gt;&quot;It didn&#39;t work. I don&#39;t think the app is really crashing,&quot; I say.

&lt;p&gt;&quot;Everybody lies,&quot; repeats House.

&lt;p&gt;I change the code to loop, to reset the handler for ALL signals.  I start up the program.  Black screen.

&lt;p&gt;&quot;This isn&#39;t it,&quot; I say. But I&#39;m out of ideas.

&lt;p&gt;&quot;EVERYBODY LIES&quot; insists House.

&lt;p&gt;Desperate, frantic, I change the code to spawn a thread that does nothing except loop, loop, loop, constantly resetting all signal handlers. Then I launch the app.  Black screen.  Try again.  Black.  Again. Black. Again.

&lt;p&gt;Crash.

&lt;p&gt;&lt;hr&gt;

&lt;p&gt;It seems simple in retrospect. &lt;i&gt;Surf&#39;s Up&lt;/i&gt; went to heroics to swallow signals: its background threads continually set signal handlers that cause only the signalling thread to exit, but leave the remaining threads unharmed. And the app didn&#39;t really need its main thread after all.

&lt;p&gt;Except when it did, because when the main thread crashed of its own accord, it did so while holding a lock. And when other threads tried to acquire that lock, they got stuck, because the thread which was supposed to release it was gone. The lock was forever locked! But the problem could be averted by stopping the main thread preemptively. And the simplest way to stop it was to trigger the app&#39;s own murderous machinery: dereference NULL.

&lt;p&gt;The crash itself was just a mundane, run-of-the-mill regression, one that was already known and already being investigated. But the signal shenanigans of the app manifested the crash in a totally different way, and its debugging defenses hid its misdeeds. Two minutes thus became two days, but the end result was the same.

&lt;p&gt;&lt;i&gt;Surf&#39;s Up&lt;/i&gt; was treacherous, smiling as it swallowed bus errors and segmentation faults, as if nothing had gone wrong. &lt;i&gt;fish&lt;/i&gt; responded to treachery in kind by temporarily recruiting the OS itself to aid in debugging and ultimately defeat the app&#39;s defenses. But these same defenses had a remarkable consequence: attempts to trigger a crash instead precluded a hang. One app&#39;s poison is another app&#39;s surf boards and power chords.
&lt;p&gt;(Discussion threads on &lt;a href=&quot;http://www.reddit.com/r/programming/comments/khip6/the_true_story_of_the_app_that_was_fixed_by_a/&quot;&gt;reddit&lt;/a&gt; and &lt;a href=&quot;http://news.ycombinator.com/item?id=3003320&quot;&gt;Hacker News&lt;/a&gt;)
&lt;p&gt;
</content>
  </entry>
  
  <entry>
    <title>A Quick 'n Dirty Color Sequence</title>
    <link href="http://ridiculousfish.com/blog/posts/colors.html"/>
    <updated>2011-08-29T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/colors</id>
    <content type="html">&lt;style type=&quot;text/css&quot;&gt;
.colorwheel {
	width: 159px;
	height: 159px;
	background: url(/blog/images/color_wheel.png);
	position: relative;
	font-family: Menlo, Monaco, &quot;Courier New&quot;, Courier, mono;
	font-weight: bold;
	color: black;
	margin-top: 20px;
	margin-bottom: 20px;
	margin-left: 30px;
	color: white;
	text-shadow: black 0.1em 0.1em 0.2em;
}

.examplebox {
	display: inline-block;
	width: 60px;
	height: 60px;
	margin-right: -20px;
	margin-bottom: -20px;
	text-align: center;
	font-size: 10pt;
	line-height: 60px;
	border-radius: 30px;
	-moz-border-radius: 30px;
	-moz-box-shadow:inset 0 0 10px black;
	-webkit-box-shadow:inset 0 0 10px black;
	box-shadow:inset 0 0 10px black;
}


.examplebox_container {
	display: block;
	border-style: groove;
	border-color: #CCD;
	width: 80%;
	min-height: 90px;
	margin-left: auto;
	margin-right: auto;
	background: #EEE;
	color: black;
	text-decoration: none;
	line-height: 40pt;
	padding-left: 10px;
	padding-right: 30px;
	padding-top: 10px;
	padding-bottom: 50px;
}

&lt;/style&gt;

&lt;p&gt;Maybe you&#39;ve got a list of things, like friends or appointments or map locations, and you want to give each one its own color so the user can distinguish them easily.  The user can make new friends or appointments, so you don&#39;t know ahead of time how many colors you&#39;ll need.  And when the user adds a new item, you want its color to be as different from all other colors as possible, to avoid confusion. How do you decide on the sequence of colors to give each item? And can it be a random-access sequence? It sounds tricky, maybe like some linear optimization problem, but in fact there&#39;s a marvelously simple and surprising solution.

&lt;p&gt;We can think of colors in terms of hue, saturation, and lightness. Since these colors are going to be presented next to each other, they have to look good together - no bright colors mixing with dark ones, for example - so the color choices will vary only in hue. That way blues, greens, reds, etc. will all be represented, but they&#39;ll all be equally bright and equally saturated.

&lt;p&gt;So let&#39;s try to pick some hues on the edge of the color wheel. We want the colors to be maximally different, so each time we add a new hue, we&#39;ll try to put it as far away from all the others as we can. The first color can be anything, so let&#39;s start with red. The second color then has to go opposite it.

&lt;div class=&quot;colorwheel&quot;&gt;
&lt;span style=&quot;position: absolute; right: 0px; top: 68px;&quot;&gt;1&lt;/span&gt;
&lt;span style=&quot;position: absolute; left: 0px;  top: 68px;&quot;&gt;2&lt;/span&gt;
&lt;/div&gt;

&lt;p&gt;The third color needs to be as far away  as possible from the first two, which means either the top or bottom. The fourth color then must take bottom or top.

&lt;div class=&quot;colorwheel&quot;&gt;
&lt;span style=&quot;position: absolute; right: 0px; top: 68px;&quot;&gt;1&lt;/span&gt;
&lt;span style=&quot;position: absolute; left: 0px;  top: 68px;&quot;&gt;2&lt;/span&gt;
&lt;span style=&quot;position: absolute; left: 72px; top: 0px;&quot;&gt;3&lt;/span&gt;
&lt;span style=&quot;position: absolute; left: 72px; bottom: 0px;&quot;&gt;4&lt;/span&gt;
&lt;/div&gt;

&lt;p&gt;I get it, we just keep on bisecting!

&lt;div class=&quot;colorwheel&quot;&gt;
&lt;span style=&quot;position: absolute; right: 0px;  top: 68px;&quot;&gt;1&lt;/span&gt;
&lt;span style=&quot;position: absolute; left: 0px;   top: 68px;&quot;&gt;2&lt;/span&gt;
&lt;span style=&quot;position: absolute; left: 72px;  top: 0px;&quot;&gt;3&lt;/span&gt;
&lt;span style=&quot;position: absolute; left: 72px;  bottom: 0px;&quot;&gt;4&lt;/span&gt;
&lt;span style=&quot;position: absolute; right: 22px; top: 18px;&quot;&gt;5&lt;/span&gt;
&lt;span style=&quot;position: absolute; left: 22px;  bottom: 18px;&quot;&gt;6&lt;/span&gt;
&lt;span style=&quot;position: absolute; left: 22px;  top: 18px;&quot;&gt;7&lt;/span&gt;
&lt;span style=&quot;position: absolute; right: 22px;  bottom: 18px;&quot;&gt;8&lt;/span&gt;
&lt;/div&gt;

&lt;p&gt;See a pattern yet? Maybe if we write it out as a list of rotations:

&lt;p style=&quot;margin-left: 20px&quot;&gt;$ 0 $, 
$ \frac 1 2 $,
$ \frac 1 4 $,
$ \frac 3 4 $,
$ \frac 1 8 $,
$ \frac 5 8 $,
$ \frac 3 8 $,
$ \frac 7 8 $
&amp;hellip;

&lt;p&gt;It&#39;s easy to continue this series, but it&#39;s not obvious how to compute, say, the 100th element. But what if...what if we write it like this (read top to bottom, left to right):

&lt;p&gt;&lt;div style=&quot;line-height: 47px; width: 100%; margin-left: 20px; &quot;&gt;
&lt;div style=&quot;float: left; margin-right: 15%; &quot;&gt;
$ 0 = \frac 0 2 + \frac 0 4 + \frac 0 8 $ &lt;br /&gt;
$ \frac 1 2 = \frac 1 2 + \frac 0 4 + \frac 0 8 $ &lt;br /&gt;
$ \frac 1 4 = \frac 0 2 + \frac 1 4 + \frac 0 8 $ &lt;br /&gt;
$ \frac 3 4 = \frac 1 2 + \frac 1 4 + \frac 0 8 $ &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
$ \frac 1 8 = \frac 0 2 + \frac 0 4 + \frac 1 8 $ &lt;br /&gt;
$ \frac 5 8 = \frac 1 2 + \frac 0 4 + \frac 1 8 $ &lt;br /&gt;
$ \frac 3 8 = \frac 0 2 + \frac 1 4 + \frac 1 8 $ &lt;br /&gt;
$ \frac 7 8 = \frac 1 2 + \frac 1 4 + \frac 1 8 $ &lt;br /&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And what if now we just look at the pattern of numerators:

&lt;p style=&quot;font-family: Menlo, Monaco, &#39;Courier New&#39;, Courier, mono; margin-left: 20px;&quot;&gt;000 100 010 110 001 101 011 111&lt;/p&gt;

&lt;p&gt;It&#39;s just binary writ backward!

&lt;p&gt;So to compute the Nth color, we want to &quot;mirror image&quot; the bits of N around the decimal point. Another way of doing that is to reverse the bits of N, then shift them right, all the way past the decimal point.  Of course bits shifted past the decimal point are normally discarded, but here we can use the opposite of the usual trick and replace a right shift with a divide.  Do it in floating point and our bits will get preserved.

&lt;p&gt;Thus, the algorithm to compute the hue of the Nth color in this sequence is:

&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Reverse the bits of N&lt;/li&gt;
&lt;li&gt;Convert to floating point&lt;/li&gt;
&lt;li&gt;Divide by 2&lt;sup&gt;32&lt;/sup&gt;, assuming N is 32 bit; or use scalbn() if you&#39;re fancy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So there is, in fact, a practical use case for reversing the bits of an integer.

&lt;p&gt;You can try it. Click in the area below to add colored circles, and you&#39;ll see the  quick &#39;n dirty sequence of colors, starting at 216 degrees. You&#39;ll need a CSS3-savvy browser that supports HSL colors.  (The JavaScript source is right underneath me!)

&lt;script type=&quot;text/javascript&quot;&gt;

function get_hue(idx) {
   /* Here we use 31 bit numbers because JavaScript doesn&#39;t have a 32 bit unsigned type, and so the conversion to float would produce a negative value. */
   var bitcount = 31;
   
   /* Reverse the bits of idx into ridx */
   var ridx = 0, i = 0;
   for (i=0; i &lt; bitcount; i++) {
      ridx = (ridx &lt;&lt; 1) | (idx &amp; 1);
      idx &gt;&gt;&gt;= 1;
   }
   
   /* Divide by 2**bitcount */
   var hue = ridx / Math.pow(2, bitcount);
   
   /* Start at .6 (216 degrees) */
   return (hue + .6) % 1;
}

var next_hue = 0;
function add_colored_thingy(to_whom) {
   var hue = get_hue(next_hue++);
   var degrees = Math.round(hue * 360);
   var newElement = &#39;&lt;span&gt;&lt;span class=&quot;examplebox&quot; style=&quot;background-color: hsl(&#39; + degrees + &#39;, 100%, 65%);&quot;&gt;&#39; + degrees.toString() + &quot;&lt;\/span&gt;&lt;\/span&gt;&quot;;
   to_whom.innerHTML = to_whom.innerHTML + newElement;
}
&lt;/script&gt;

&lt;p&gt;&lt;a class=&quot;examplebox_container&quot; onclick=&quot;add_colored_thingy(this);&quot; href=&quot;javascript:void(0)&quot;&gt; &lt;/a&gt;

&lt;p&gt;If your browser width is such that the number of circles per row is a power of two, you&#39;ll see how the distance between colors is strictly one-dimensional.</content>
  </entry>
  
  <entry>
    <title>Resited</title>
    <link href="http://ridiculousfish.com/blog/posts/Resited.html"/>
    <updated>2011-08-21T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/Resited</id>
    <content type="html">&lt;p&gt;ridiculous_fish now comes with 90% less scrolling and 100% less commenting.&lt;/p&gt;

&lt;p&gt;Comments can be posted on the relevant reddit or Hacker News threads, or tweet  &lt;a href=&quot;http://twitter.com/#!/ridiculous_fish&quot;&gt;@ridiculous_fish&lt;/a&gt; to tell &lt;em&gt;fish&lt;/em&gt; he’s full of carp.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Labor of Division (Episode II)</title>
    <link href="http://ridiculousfish.com/blog/posts/labor-of-division-episode-ii.html"/>
    <updated>2010-12-30T00:00:00-08:00</updated>
    <id>http://ridiculousfish.com/posts/labor-of-division-episode-ii</id>
    <content type="html">Speaking of integer division, &lt;a href=&quot;http://libdivide.com&quot;&gt;here&#39;s a nice library&lt;/a&gt; that performs the multiply-and-shift optimization at runtime.  It does vectors too.  Cool!</content>
  </entry>
  
  <entry>
    <title>Will It Optimize?</title>
    <link href="http://ridiculousfish.com/blog/posts/will-it-optimize.html"/>
    <updated>2010-07-23T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/will-it-optimize</id>
    <content type="html">&lt;style type=&quot;text/css&quot;&gt;
.fish_quiz_pre {
	margin-top: 0px;
	margin-bottom: 0px;
}
.fish_quiz_question {
	display: table;
	table-layout: fixed;
	border-spacing: 15px 0px;
	width: 100%;
}
.fish_quiz_question div {
	display: table-cell;
	width: 50%;
	background: #F0F0F8;
	border-style: groove;
	border-width: 2px;
	padding: 5px;
}
.fish_quiz_choices {
	display: table;
	table-layout: fixed;
	border-spacing: 15px 15px;
	width: 100%;
}
.fish_quiz_choices a {
	display: table-cell;
	margin: 5px
	color: black;
	text-decoration: none;
	padding: 5px;
	text-align: center;
	border-style: outset;
	border-width: 2px;
	font-size: 12pt;
	width: 100%;
}
.fish_quiz_choices a:link {
	color: inherit;
}
a.choice_yes {
	background-color: #97fe97;
}
a.choice_no {
	background-color: #fcfd97;
}
a.choice_incorrect {
	background-color: #fe9797;
}
.fish_quiz_choices a:hover {
	border-style: solid;
	border-color: #AAA;
}
.choice_yes {
	background-color: #97fe97;
}
.choice_no {
	background-color: #fcfd97;
}
.choice_incorrect {
	background-color: #fe9797;
}
.fish_answer {
	margin-left: 20px;
}
&lt;/style&gt;
&lt;!--[if IE]&gt;
&lt;style type=&quot;text/css&quot;&gt;
.fish_quiz_choices a {
	width: 240px;
}
&lt;/style&gt;
&lt;![endif]--&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
var AnswersAndComments = new Array();
AnswersAndComments[&#39;0_s3&#39;] = &quot;Oh, no, it&#39;s correct!&quot;
AnswersAndComments[&#39;1_s1&#39;] = &quot;Right on!&quot;
AnswersAndComments[&#39;2_s2&#39;] = &quot;GCC does this, or something similarly efficient.&quot;
AnswersAndComments[&#39;5_s1&#39;] = &quot;Nope!&quot;
AnswersAndComments[&#39;0_s1&#39;] = &quot;Very good!&quot;
AnswersAndComments[&#39;5_s2&#39;] = &quot;Right!&quot;
AnswersAndComments[&#39;2_c&#39;] = &quot;This softball is a straightforward exercise in strength reduction.  In fact, I fudged a bit: there&#39;s a variety of possible ways to optimize it.  On i386, gcc uses an add instruction, but on x86-64 it uses a \&quot;leal\&quot; instruction, and on PowerPC it does a left shift by 1.  In all cases, it does something more efficient than multiplying by 2.&lt;br \/&gt;\n&lt;br \/&gt;\nBut don&#39;t get too complacent, because the next one is tougher.&quot;
AnswersAndComments[&#39;2_s1&#39;] = &quot;Yep.&quot;
AnswersAndComments[&#39;3_c&#39;] = &quot;Everyone knows that floating point arithmetic is not exact, and that lends it an aura of mystery: perhaps this optimization is incorrect because it introduces slightly different floating point error?&lt;br \/&gt;\n&lt;br \/&gt;\nIt does not.  A good way to mentally model basic floating point arithmetic operators is to think of them as computing an exact result, and then rounding to the nearest representable floating point number.  From this perspective, it&#39;s obvious that this optimization is allowed, since multiplying by 2 is mathematically the same as adding yourself to yourself.  However, special values complicate this analysis: see below.&lt;br \/&gt;\n&lt;br \/&gt;\nNote that this exactness criterion is only true for \&quot;basic floating point arithmetic operators.\&quot; Functions like sin or sqrt may not be so exact.  Good implementations of these functions try to get within 1 \&quot;ulp,\&quot; which essentially means that they may not return the closest representable value, but instead the second-closest (unless the result is exactly representable, in which case they get it exactly right).  Of course, there&#39;s no guarantee that the math functions in your C implementation are \&quot;good\&quot; in this sense.&lt;br \/&gt;\n&lt;br \/&gt;\n2 is rather unique in that it can be optimized this way.  We could optimize multiplication by 3 or 4 into two additions, and it may indeed be faster, but this would introduce an imprecise intermediate result, and gcc does not do this.  This need to avoid imprecise intermediate results often prevents compilers from exploiting mathematical properties like associativity when optimizing FP arithmetic.  So do special values: see below.&lt;br \/&gt;\n&lt;br \/&gt;\nEven so, when optimizations are enabled, gcc by default performs certain optimizations that change the result if they &lt;i&gt;reduce&lt;\/i&gt; the amount of error.  A good example is the fused multiply-add instruction.  This instruction is notable for computing its result without any intermediate error: that is, it may be more precise than the multiply and add instructions executed separately.  On the PowerPC, gcc only generates this instructions at higher optimization levels, so turning on optimization improves precision.  Before long this will likely affect x86 as well, as Intel is adding such an instruction in 2011 (the \&quot;FMA instruction set\&quot;).&lt;br \/&gt;\n&lt;br \/&gt;\nAnother example is the x87 floating point architecture: x87 registers have higher precision than the double type, so presumably more optimizations may improve precision here as well, if fewer intermediate results are spilled to memory.  This example does not affect the Mac, because Mac OS X only uses x87 for the long double type, which has as much precision as the register.&lt;br \/&gt;\n&lt;br \/&gt;\nA second potential objection to this optimization is that it mishandles special values like negative zero, infinity, or NaN.  These values really do ruin many, many seemingly benign optimizations.  For example, you cannot optimize x - x to 0, because the result must be NaN if x is NaN.  Likewise, you cannot distribute a negative sign through a sum, because you may get negative zero instead of zero, or vice-versa.  However, you can verify that each of these values is handled correctly by the optimization proposed here.&lt;br \/&gt;\n&lt;br \/&gt;\nThe point is that floating point math is harder for compilers to optimize effectively than is integer arithmetic.  This particular example is an exception, not the rule.&quot;
AnswersAndComments[&#39;3_s1&#39;] = &quot;Very good!&quot;
AnswersAndComments[&#39;1_c&#39;] = &quot;GCC does this optimization, because strlen is a \&quot;built-in function:\&quot; one that gcc recognizes and optimizes specially.  Disabling built-ins with -fno-builtin defeats this optimization.&lt;br \/&gt;\n&lt;br \/&gt;\nLike the example above, this illustrates that optimizations may change the Big-O efficiency of the algorithm.&quot;
AnswersAndComments[&#39;4_s2&#39;] = &quot;Actually, the optimization isn&#39;t even right.&quot;
AnswersAndComments[&#39;4_s3&#39;] = &quot;Very good!&quot;
AnswersAndComments[&#39;1_s3&#39;] = &quot;It looks correct to me!&quot;
AnswersAndComments[&#39;4_s1&#39;] = &quot;Ha, I thought that might get you!  I added this to illustrate one of the dangers of micro-optimizations: that you may screw them up.&quot;
AnswersAndComments[&#39;0_c&#39;] = &quot;In fact, GCC does this optimization.  Wild, huh?  GCC can transform some functions that are recursive but not tail-recursive into a tail-recursive form, and then perform tail recursion elimination on them.  Most functional language compilers can&#39;t even do that!&lt;br \/&gt;\n&lt;br \/&gt;\nI love this example because it attacks the notion that tail-recursion is a privileged form of recursion.  We already knew that a tail recursive function may be optimized to run in constant space, if compiler support\u00a0is present.  But this example proves that a non-tail recursive function may &lt;i&gt;also&lt;\/i&gt; be optimized to run in constant space.  Thus tail recursion becomes merely a subset of the optimizable recursive functions, interesting only because of the limitations of certain compilers.&quot;
AnswersAndComments[&#39;3_s2&#39;] = &quot;Nope!&quot;
AnswersAndComments[&#39;4_c&#39;] = &quot;The right shift operator is equivalent to division that rounds towards negative infinity, but normal division rounds towards zero.  Thus the proposed optimization will produce the wrong result for odd negative numbers.  &lt;br \/&gt;\n&lt;br \/&gt;\nThe result can be \&quot;fixed up\&quot; by adding the most significant bit to the numerator before shifting, and gcc does this.&quot;
AnswersAndComments[&#39;3_s3&#39;] = &quot;Well...&quot;
AnswersAndComments[&#39;0_s2&#39;] = &quot;Ha, I thought that might get you!&quot;
AnswersAndComments[&#39;2_s3&#39;] = &quot;Oh, no, it&#39;s correct!&quot;
AnswersAndComments[&#39;5_s3&#39;] = &quot;Oh man...back to K&amp;R with you!&quot;
AnswersAndComments[&#39;1_s2&#39;] = &quot;Gotcha!&quot;
AnswersAndComments[&#39;5_c&#39;] = &quot;GCC does not do this even for very long \&quot;chains,\&quot;, at least not the ancient 4.2.1 version I tried (maybe newer versions do better?)  The switch statement was optimized to a jump table, while the if statements became a long sequence of compares.&lt;br \/&gt;\n&lt;br \/&gt;\nI was surprised.  Happily, clang performs this optimization.&quot;
function answered(question, choice) {
   var elem = document.getElementById(&#39;fish_answer_&#39; + question);
   var snide = AnswersAndComments[question + &#39;_s&#39; + (choice + 1)];
   var comment = AnswersAndComments[question + &#39;_c&#39;];
   elem.innerHTML = snide + &#39;&lt;&#39; + &#39;p&gt;&#39; + comment + &#39;&lt;/&#39; + &#39;p&gt;&#39;;
}
&lt;/script&gt;

&lt;p&gt;See how well you know (or can anticipate) gcc&#39;s optimizer.  For each question, the left box contains some code, while the right box contains code that purports to do the same thing, but that illustrates a particular optimization.  Will gcc apply that optimization?  Put another way, will the code on the left be as fast as the code on the right, when compiled with an optimizing gcc?

&lt;p&gt;I used a pretty ancient gcc 4.2.1 for these tests.  If newer versions have different behavior, please leave a comment.
&lt;p style=&quot;margin-bottom: 15px&quot;&gt;Beware: not all proposed optimizations are actually valid!
&lt;p&gt;&lt;b&gt;1. Recursion elimination&lt;/b&gt;
&lt;p&gt;
Can GCC replace recursive functions with a loop?
&lt;p&gt;
&lt;div class=&quot;fish_quiz_question&quot;&gt;
	&lt;div class=&quot;question_part&quot;&gt;&lt;pre class=&quot;fish_quiz_pre&quot;&gt;&lt;span style=&quot;color: Indigo;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;factorial&lt;/span&gt;(&lt;span style=&quot;color: Indigo;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt;) {
   &lt;span style=&quot;color: DarkRed;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt; &amp;gt; &lt;span style=&quot;color: DarkBlue;&quot;&gt;1&lt;/span&gt;) &lt;span style=&quot;color: DarkRed;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt; * &lt;span style=&quot;color: MediumBlue;&quot;&gt;factorial&lt;/span&gt;(&lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt;-&lt;span style=&quot;color: DarkBlue;&quot;&gt;1&lt;/span&gt;);
   &lt;span style=&quot;color: DarkRed;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: DarkRed;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: DarkBlue;&quot;&gt;1&lt;/span&gt;;
}&lt;/pre&gt;&lt;/div&gt;
	&lt;div class=&quot;question_part&quot;&gt;&lt;pre class=&quot;fish_quiz_pre&quot;&gt;&lt;span style=&quot;color: Indigo;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;factorial&lt;/span&gt;(&lt;span style=&quot;color: Indigo;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt;) {
   &lt;span style=&quot;color: Indigo;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;result&lt;/span&gt; = &lt;span style=&quot;color: DarkBlue;&quot;&gt;1&lt;/span&gt;;
   &lt;span style=&quot;color: DarkRed;&quot;&gt;while&lt;/span&gt; (&lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt; &amp;gt; &lt;span style=&quot;color: DarkBlue;&quot;&gt;1&lt;/span&gt;) &lt;span style=&quot;color: MediumBlue;&quot;&gt;result&lt;/span&gt; *= &lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt;--;
   &lt;span style=&quot;color: DarkRed;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;result&lt;/span&gt;;
}&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;fish_quiz_choices&quot;&gt;
	&lt;a class=&quot;choice_yes&quot; href=&quot;javascript:answered(0,0)&quot;&gt;I think GCC does this&lt;/a&gt;
	&lt;a class=&quot;choice_no&quot; href=&quot;javascript:answered(0,1)&quot;&gt;I think GCC cannot do this&lt;/a&gt;
	&lt;a class=&quot;choice_incorrect&quot; href=&quot;javascript:answered(0,2)&quot;&gt;I say this optimization is incorrect!&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;fish_answer&quot; id=&quot;fish_answer_0&quot;&gt;
&lt;/div&gt;
&lt;p&gt;&lt;hr /&gt;&lt;b&gt;2. Loop-invariant strlen()&lt;/b&gt;
&lt;p&gt;
Will GCC hoist out strlen()?
&lt;p&gt;
&lt;div class=&quot;fish_quiz_question&quot;&gt;
	&lt;div class=&quot;question_part&quot;&gt;&lt;pre class=&quot;fish_quiz_pre&quot;&gt;&lt;span style=&quot;color: Indigo;&quot;&gt;unsigned&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;sum&lt;/span&gt;(&lt;span style=&quot;color: DarkRed;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: Indigo;&quot;&gt;unsigned&lt;/span&gt; &lt;span style=&quot;color: Indigo;&quot;&gt;char&lt;/span&gt; *&lt;span style=&quot;color: MediumBlue;&quot;&gt;s&lt;/span&gt;) {
   &lt;span style=&quot;color: Indigo;&quot;&gt;unsigned&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;result&lt;/span&gt; = &lt;span style=&quot;color: DarkBlue;&quot;&gt;0&lt;/span&gt;;
   &lt;span style=&quot;color: DarkRed;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: MediumBlue;&quot;&gt;size_t&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;i&lt;/span&gt;=&lt;span style=&quot;color: DarkBlue;&quot;&gt;0&lt;/span&gt;; &lt;span style=&quot;color: MediumBlue;&quot;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;strlen&lt;/span&gt;(&lt;span style=&quot;color: MediumBlue;&quot;&gt;s&lt;/span&gt;); &lt;span style=&quot;color: MediumBlue;&quot;&gt;i&lt;/span&gt;++) {
      &lt;span style=&quot;color: MediumBlue;&quot;&gt;result&lt;/span&gt; += &lt;span style=&quot;color: MediumBlue;&quot;&gt;s&lt;/span&gt;[&lt;span style=&quot;color: MediumBlue;&quot;&gt;i&lt;/span&gt;];
   }
   &lt;span style=&quot;color: DarkRed;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;result&lt;/span&gt;;
}&lt;/pre&gt;&lt;/div&gt;
	&lt;div class=&quot;question_part&quot;&gt;&lt;pre class=&quot;fish_quiz_pre&quot;&gt;&lt;span style=&quot;color: Indigo;&quot;&gt;unsigned&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;sum&lt;/span&gt;(&lt;span style=&quot;color: DarkRed;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: Indigo;&quot;&gt;unsigned&lt;/span&gt; &lt;span style=&quot;color: Indigo;&quot;&gt;char&lt;/span&gt; *&lt;span style=&quot;color: MediumBlue;&quot;&gt;s&lt;/span&gt;) {
   &lt;span style=&quot;color: Indigo;&quot;&gt;unsigned&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;result&lt;/span&gt; = &lt;span style=&quot;color: DarkBlue;&quot;&gt;0&lt;/span&gt;;
   &lt;span style=&quot;color: MediumBlue;&quot;&gt;size_t&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;length&lt;/span&gt; = &lt;span style=&quot;color: MediumBlue;&quot;&gt;strlen&lt;/span&gt;(&lt;span style=&quot;color: MediumBlue;&quot;&gt;s&lt;/span&gt;);
   &lt;span style=&quot;color: DarkRed;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: MediumBlue;&quot;&gt;size_t&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;i&lt;/span&gt;=&lt;span style=&quot;color: DarkBlue;&quot;&gt;0&lt;/span&gt;; &lt;span style=&quot;color: MediumBlue;&quot;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;length&lt;/span&gt;; &lt;span style=&quot;color: MediumBlue;&quot;&gt;i&lt;/span&gt;++) {
      &lt;span style=&quot;color: MediumBlue;&quot;&gt;result&lt;/span&gt; += &lt;span style=&quot;color: MediumBlue;&quot;&gt;s&lt;/span&gt;[&lt;span style=&quot;color: MediumBlue;&quot;&gt;i&lt;/span&gt;];
   }
   &lt;span style=&quot;color: DarkRed;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;result&lt;/span&gt;;
}&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;fish_quiz_choices&quot;&gt;
	&lt;a class=&quot;choice_yes&quot; href=&quot;javascript:answered(1,0)&quot;&gt;I think GCC does this&lt;/a&gt;
	&lt;a class=&quot;choice_no&quot; href=&quot;javascript:answered(1,1)&quot;&gt;I think GCC cannot do this&lt;/a&gt;
	&lt;a class=&quot;choice_incorrect&quot; href=&quot;javascript:answered(1,2)&quot;&gt;I say this optimization is incorrect!&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;fish_answer&quot; id=&quot;fish_answer_1&quot;&gt;
&lt;/div&gt;
&lt;p&gt;&lt;hr /&gt;&lt;b&gt;3. Multiplication by 2 to addition - integer&lt;/b&gt;
&lt;p&gt;
Will GCC transform an integer multiplication by 2 to addition?
&lt;p&gt;
&lt;div class=&quot;fish_quiz_question&quot;&gt;
	&lt;div class=&quot;question_part&quot;&gt;&lt;pre class=&quot;fish_quiz_pre&quot;&gt;&lt;span style=&quot;color: Indigo;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;double_it&lt;/span&gt;(&lt;span style=&quot;color: Indigo;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt;) {
   &lt;span style=&quot;color: DarkRed;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt; * &lt;span style=&quot;color: DarkBlue;&quot;&gt;2&lt;/span&gt;;
}&lt;/pre&gt;&lt;/div&gt;
	&lt;div class=&quot;question_part&quot;&gt;&lt;pre class=&quot;fish_quiz_pre&quot;&gt;&lt;span style=&quot;color: Indigo;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;double_it&lt;/span&gt;(&lt;span style=&quot;color: Indigo;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt;) {
   &lt;span style=&quot;color: DarkRed;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt; + &lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt;;
}&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;fish_quiz_choices&quot;&gt;
	&lt;a class=&quot;choice_yes&quot; href=&quot;javascript:answered(2,0)&quot;&gt;I think GCC does this&lt;/a&gt;
	&lt;a class=&quot;choice_no&quot; href=&quot;javascript:answered(2,1)&quot;&gt;I think GCC cannot do this&lt;/a&gt;
	&lt;a class=&quot;choice_incorrect&quot; href=&quot;javascript:answered(2,2)&quot;&gt;I say this optimization is incorrect!&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;fish_answer&quot; id=&quot;fish_answer_2&quot;&gt;
&lt;/div&gt;
&lt;p&gt;&lt;hr /&gt;&lt;b&gt;4. Multiplication by 2 to addition - floating point&lt;/b&gt;
&lt;p&gt;
Will GCC transform a floating point multiplication by 2 to addition?
&lt;p&gt;
&lt;div class=&quot;fish_quiz_question&quot;&gt;
	&lt;div class=&quot;question_part&quot;&gt;&lt;pre class=&quot;fish_quiz_pre&quot;&gt;&lt;span style=&quot;color: Indigo;&quot;&gt;float&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;double_it&lt;/span&gt;(&lt;span style=&quot;color: Indigo;&quot;&gt;float&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt;) {
   &lt;span style=&quot;color: DarkRed;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt; * &lt;span style=&quot;color: DarkBlue;&quot;&gt;2.0f&lt;/span&gt;;
}&lt;/pre&gt;&lt;/div&gt;
	&lt;div class=&quot;question_part&quot;&gt;&lt;pre class=&quot;fish_quiz_pre&quot;&gt;&lt;span style=&quot;color: Indigo;&quot;&gt;float&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;double_it&lt;/span&gt;(&lt;span style=&quot;color: Indigo;&quot;&gt;float&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt;) {
   &lt;span style=&quot;color: DarkRed;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt; + &lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt;;
}&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;fish_quiz_choices&quot;&gt;
	&lt;a class=&quot;choice_yes&quot; href=&quot;javascript:answered(3,0)&quot;&gt;I think GCC does this&lt;/a&gt;
	&lt;a class=&quot;choice_no&quot; href=&quot;javascript:answered(3,1)&quot;&gt;I think GCC cannot do this&lt;/a&gt;
	&lt;a class=&quot;choice_incorrect&quot; href=&quot;javascript:answered(3,2)&quot;&gt;I say this optimization is incorrect!&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;fish_answer&quot; id=&quot;fish_answer_3&quot;&gt;
&lt;/div&gt;
&lt;p&gt;&lt;hr /&gt;&lt;b&gt;5. Division by 2 to right shift&lt;/b&gt;
&lt;p&gt;
Will GCC transform an integer division by 2 to a right shift?
&lt;p&gt;
&lt;div class=&quot;fish_quiz_question&quot;&gt;
	&lt;div class=&quot;question_part&quot;&gt;&lt;pre class=&quot;fish_quiz_pre&quot;&gt;&lt;span style=&quot;color: Indigo;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;halve_it&lt;/span&gt;(&lt;span style=&quot;color: Indigo;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt;) {
   &lt;span style=&quot;color: DarkRed;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt; / &lt;span style=&quot;color: DarkBlue;&quot;&gt;2&lt;/span&gt;;
}&lt;/pre&gt;&lt;/div&gt;
	&lt;div class=&quot;question_part&quot;&gt;&lt;pre class=&quot;fish_quiz_pre&quot;&gt;&lt;span style=&quot;color: Indigo;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;halve_it&lt;/span&gt;(&lt;span style=&quot;color: Indigo;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt;) {
   &lt;span style=&quot;color: DarkRed;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt; &amp;gt;&amp;gt; &lt;span style=&quot;color: DarkBlue;&quot;&gt;1&lt;/span&gt;;
}&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;fish_quiz_choices&quot;&gt;
	&lt;a class=&quot;choice_yes&quot; href=&quot;javascript:answered(4,0)&quot;&gt;I think GCC does this&lt;/a&gt;
	&lt;a class=&quot;choice_no&quot; href=&quot;javascript:answered(4,1)&quot;&gt;I think GCC cannot do this&lt;/a&gt;
	&lt;a class=&quot;choice_incorrect&quot; href=&quot;javascript:answered(4,2)&quot;&gt;I say this optimization is incorrect!&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;fish_answer&quot; id=&quot;fish_answer_4&quot;&gt;
&lt;/div&gt;
&lt;p&gt;&lt;hr /&gt;&lt;b&gt;6. If-else chains to switch statements&lt;/b&gt;
&lt;p&gt;
Will GCC apply the same optimizations to if-else chains as it does to switch statements?
&lt;p&gt;
&lt;div class=&quot;fish_quiz_question&quot;&gt;
	&lt;div class=&quot;question_part&quot;&gt;&lt;pre class=&quot;fish_quiz_pre&quot;&gt;&lt;span style=&quot;color: Indigo;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;function&lt;/span&gt;(&lt;span style=&quot;color: Indigo;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt;) {
   &lt;span style=&quot;color: DarkRed;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt; == &lt;span style=&quot;color: DarkBlue;&quot;&gt;0&lt;/span&gt;) &lt;span style=&quot;color: MediumBlue;&quot;&gt;f0&lt;/span&gt;();
   &lt;span style=&quot;color: DarkRed;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: DarkRed;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt; == &lt;span style=&quot;color: DarkBlue;&quot;&gt;1&lt;/span&gt;) &lt;span style=&quot;color: MediumBlue;&quot;&gt;f1&lt;/span&gt;();
   &lt;span style=&quot;color: DarkRed;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: DarkRed;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt; == &lt;span style=&quot;color: DarkBlue;&quot;&gt;2&lt;/span&gt;) &lt;span style=&quot;color: MediumBlue;&quot;&gt;f2&lt;/span&gt;();
   &lt;span style=&quot;color: DarkRed;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: DarkRed;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt; == &lt;span style=&quot;color: DarkBlue;&quot;&gt;3&lt;/span&gt;) &lt;span style=&quot;color: MediumBlue;&quot;&gt;f3&lt;/span&gt;();
   &lt;span style=&quot;color: DarkRed;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: DarkRed;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt; == &lt;span style=&quot;color: DarkBlue;&quot;&gt;4&lt;/span&gt;) &lt;span style=&quot;color: MediumBlue;&quot;&gt;f4&lt;/span&gt;();
   &lt;span style=&quot;color: DarkRed;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: DarkRed;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt; == &lt;span style=&quot;color: DarkBlue;&quot;&gt;5&lt;/span&gt;) &lt;span style=&quot;color: MediumBlue;&quot;&gt;f5&lt;/span&gt;();
}&lt;/pre&gt;&lt;/div&gt;
	&lt;div class=&quot;question_part&quot;&gt;&lt;pre class=&quot;fish_quiz_pre&quot;&gt;&lt;span style=&quot;color: Indigo;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;function&lt;/span&gt;(&lt;span style=&quot;color: Indigo;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt;) {
   &lt;span style=&quot;color: DarkRed;&quot;&gt;switch&lt;/span&gt; (&lt;span style=&quot;color: MediumBlue;&quot;&gt;x&lt;/span&gt;) {
      &lt;span style=&quot;color: DarkRed;&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: DarkBlue;&quot;&gt;0&lt;/span&gt;: &lt;span style=&quot;color: MediumBlue;&quot;&gt;f0&lt;/span&gt;(); &lt;span style=&quot;color: DarkRed;&quot;&gt;break&lt;/span&gt;;
      &lt;span style=&quot;color: DarkRed;&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: DarkBlue;&quot;&gt;1&lt;/span&gt;: &lt;span style=&quot;color: MediumBlue;&quot;&gt;f1&lt;/span&gt;(); &lt;span style=&quot;color: DarkRed;&quot;&gt;break&lt;/span&gt;;
      &lt;span style=&quot;color: DarkRed;&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: DarkBlue;&quot;&gt;2&lt;/span&gt;: &lt;span style=&quot;color: MediumBlue;&quot;&gt;f2&lt;/span&gt;(); &lt;span style=&quot;color: DarkRed;&quot;&gt;break&lt;/span&gt;;
      &lt;span style=&quot;color: DarkRed;&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: DarkBlue;&quot;&gt;3&lt;/span&gt;: &lt;span style=&quot;color: MediumBlue;&quot;&gt;f3&lt;/span&gt;(); &lt;span style=&quot;color: DarkRed;&quot;&gt;break&lt;/span&gt;;
      &lt;span style=&quot;color: DarkRed;&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: DarkBlue;&quot;&gt;4&lt;/span&gt;: &lt;span style=&quot;color: MediumBlue;&quot;&gt;f4&lt;/span&gt;(); &lt;span style=&quot;color: DarkRed;&quot;&gt;break&lt;/span&gt;;
      &lt;span style=&quot;color: DarkRed;&quot;&gt;case&lt;/span&gt; &lt;span style=&quot;color: DarkBlue;&quot;&gt;5&lt;/span&gt;: &lt;span style=&quot;color: MediumBlue;&quot;&gt;f5&lt;/span&gt;(); &lt;span style=&quot;color: DarkRed;&quot;&gt;break&lt;/span&gt;;
   }
}&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;fish_quiz_choices&quot;&gt;
	&lt;a class=&quot;choice_yes&quot; href=&quot;javascript:answered(5,0)&quot;&gt;I think GCC does this&lt;/a&gt;
	&lt;a class=&quot;choice_no&quot; href=&quot;javascript:answered(5,1)&quot;&gt;I think GCC cannot do this&lt;/a&gt;
	&lt;a class=&quot;choice_incorrect&quot; href=&quot;javascript:answered(5,2)&quot;&gt;I say this optimization is incorrect!&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;fish_answer&quot; id=&quot;fish_answer_5&quot;&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;b&gt;Summing up&lt;/b&gt;

&lt;p&gt;It is tempting to think of compiler optimizations as reducing the constant in your program&#39;s big-O complexity, and nothing else.  They aren&#39;t supposed to be able to make your program asymptotically faster, or affect its output.

&lt;p&gt;However, as we saw, they really can reduce the asymptotic complexity in space (question 1) and time (question 2).  They can also affect calculated results (discussion of question 4) and maybe even whether your program goes into an infinite loop (&lt;a href=&quot;http://blog.regehr.org/archives/161&quot;&gt;see here&lt;/a&gt;).

&lt;p&gt;On the flip side, several &quot;obvious&quot; optimizations are subtly incorrect and so will not be performed by the compiler, especially when they involve floating point.  If your floating point code is demonstrably a bottleneck and you don&#39;t need exact precision or care about special FP values, you may be able to realize a speedup by doing some optimizations manually.  However, untying the compiler&#39;s hands through options like -ffast-math is probably a better idea, and then only for the affected files, since these flags have a global impact.

&lt;p&gt;And lastly, this isn&#39;t meant to be a prescriptive post, but we all know why micro-optimizing is usually a mistake: it wastes your time, it&#39;s easy to screw up (see question 5), and it typically produces no measurable speedup.

&lt;p&gt;Code smart, and be safe out there!
</content>
  </entry>
  
  <entry>
    <title>Labor of Division (Episode I)</title>
    <link href="http://ridiculousfish.com/blog/posts/labor-of-division-episode-i.html"/>
    <updated>2010-02-15T00:00:00-08:00</updated>
    <id>http://ridiculousfish.com/posts/labor-of-division-episode-i</id>
    <content type="html">Here&#39;s how you divide an unsigned int by 13 in C:
&lt;pre&gt;
unsigned divide(unsigned x) { return x / 13; }
&lt;/pre&gt;
It gets better, I promise.  Here&#39;s the corresponding x64 assembly that gcc produces:
&lt;pre&gt;
_divide:
        movl    $1321528399, %edx
        movl    %edi, %eax
        mull    %edx
        shrl    $2, %edx
        movl    %edx, %eax
        ret
&lt;/pre&gt;

&lt;p&gt;Instead of division, there&#39;s multiplication by a bizarre number: 1321528399.  What wickedness is this?

&lt;p&gt;1321528399 is an example of a &quot;magic number:&quot; a number that lets you substitute speedy multiplication for pokey division, as if by magic.  In this post, I become a big fat spoilsport and ruin the trick for everyone.

&lt;p&gt;Dividing by 13 is different than multiplying by 1321528399, so there must be more here than meets the eye.  Compiling it as PowerPC reveals a bit more:
&lt;pre&gt;
_divide:
        lis r0,0x4ec4
        ori r0,r0,60495
        mulhwu r3,r3,r0
        srwi r3,r3,2
        blr
&lt;/pre&gt;

&lt;p&gt;mulhwu means &quot;multiply high word unsigned.&quot;  It multiplies  by 1321528399, but takes the high 32 bits of the 64 bit result, not the low 32 bits like we are used to.  x86-64 does the same thing (notice the shift right instruction operates on %edx, which contains the high bits, not %eax which is the low bits).  After multiplying, it shifts the result right by two.   In C:
&lt;pre&gt;
unsigned divide(unsigned x) {
   return (unsigned)(x*1321528399ULL &gt;&gt; 34);
}
&lt;/pre&gt;

&lt;p&gt;So dividing by 13 is the same as multiplying by 1321528399 and then dividing by 2&lt;sup&gt;34&lt;/sup&gt;.  That means that 2&lt;sup&gt;34&lt;/sup&gt; divided by 13 would be 1321528399, right?  In fact, it&#39;s 1321528398.769 and change.  Pretty close, but we&#39;re not optimizing horseshoes, so how can we be sure this works all the time?
&lt;div class=&quot;dotbox&quot;&gt;&amp;#160;&lt;/div&gt;
&lt;h4&gt;The answer to the question right above this line&lt;/h4&gt;

&lt;p&gt;It&#39;s provable, and hopefully we can get some intuition about the whole thing.  In the following proof, division is exact, not that integer-truncating stuff that C does; to round down I&#39;ll use floor.  Also, this only covers unsigned division: every number that appears is non-negative.  (Signed division is broadly similar, though does differ in some details.)  Lastly, we&#39;re going to assume that the denominator d is not a power of 2, which is weirdly important.  If d were a power of 2, we&#39;d skip the multiplication and just use shifts, so we haven&#39;t lost any generality.

&lt;p&gt;We have some fixed positive denominator &lt;i&gt;d&lt;/i&gt; and some variable nonegative numerator &lt;i&gt;n&lt;/i&gt;, and we want to compute the quotient $\frac n d$ - no, wait, $\lfloor \frac n d \rfloor$, since that&#39;s what C does.  We&#39;ll multiply the top and bottom by 2&lt;sup&gt;k&lt;/sup&gt;, where k is some positive integer power - it represents the precision in a sense, and we&#39;ll pick its value later:

&lt;p&gt;$\lfloor \frac n d \rfloor = \lfloor  \frac n d \times \frac {2^k} {2^k} \rfloor = \lfloor \frac {2^k} d \times \frac n {2^k} \rfloor$

&lt;p&gt;We&#39;re going to call that $\frac {2^k} d$ term &lt;i&gt;m&lt;sub&gt;exact&lt;/sub&gt;&lt;/i&gt;, because it&#39;s our &quot;magic number&quot; that lets us compute division through multiplication.  So we have:
&lt;br /&gt;$m_{exact} = \frac {2^k} d $&lt;br&gt;&lt;br&gt;
$ \lfloor \frac n d \rfloor = \lfloor m_{exact} \times \frac n {2^k} \rfloor$

&lt;p&gt;This equality looks promising, because we&#39;ve hammered our expression into the shape we want; but we haven&#39;t really done anything yet.  The problem is that m&lt;sub&gt;exact&lt;/sub&gt; is a fraction, which is hard for computers to multiply.  (We know it&#39;s a fraction because d is not a power of 2).  The tricky part is finding an integer approximation of m&lt;sub&gt;exact&lt;/sub&gt; that gives us the same result for any dividend up to the largest possible one (UINT_MAX in our case).  Call this approximation &lt;i&gt;m&lt;/i&gt;.  So we have $m \approx m_{exact} $, where m is an integer.

&lt;p&gt;When it comes to approximation, closer is better, so let&#39;s start by just rounding m down: $m = \lfloor m_{exact} \rfloor$.  Since m&lt;sub&gt;exact&lt;/sub&gt; cannot be an integer, m must be strictly less than m&lt;sub&gt;exact&lt;/sub&gt;.  Does this m work, which is to say, does it behave the same as m&lt;sub&gt;exact&lt;/sub&gt; over the range we care about?

&lt;p&gt;We&#39;ll try it when the numerator equals the denominator: n = d.  Of course then the quotient is supposed to be 1.  This leads to:

&lt;p&gt;$\frac d d = m_{exact} \times \frac d {2^k}$ &lt;br&gt;
$\implies \frac d d &gt; m \times \frac d {2^k}$&lt;br&gt;
$\implies 1 &gt; \lfloor m \times \frac d {2^k} \rfloor$

&lt;p&gt;That&#39;s bad, because that last expression is supposed to be 1.  The approximation $m = \lfloor m_{exact} \rfloor$ is too small, no matter what k is.

&lt;p&gt;Ok, let&#39;s round up instead: $m = \lceil m_{exact} \rceil = \lceil \frac {2^k} d \rceil$.  Does this value for m work?

&lt;p&gt;Now, $\lceil \frac {2^k} d \rceil$ just means dividing 2&lt;sup&gt;k&lt;/sup&gt; by d and then rounding up.  That&#39;s the same as rounding up 2&lt;sup&gt;k&lt;/sup&gt; to the next multiple of d &lt;i&gt;first&lt;/i&gt;, and then dividing exactly by d.  (We know that 2&lt;sup&gt;k&lt;/sup&gt; is not itself a multiple of d because d is not a power of 2!)  So we can write:

&lt;p&gt;$m = \lceil \frac {2^k} d \rceil = \frac {2^k + e} d$. 

&lt;p&gt;where e is the &quot;thing to add to get to the next multiple of d,&quot; which means that 0 &lt; e &lt; d.  (Formally, e = d - 2&lt;sup&gt;k&lt;/sup&gt; mod d.)  This value e is sort of a measure of how much &quot;damage&quot; the ceil does - that is, how bad the approximation m is.

&lt;p&gt;So let&#39;s plug this new m into our division expression, and then apply some algebra:

&lt;p&gt;$\lfloor m \times \frac n {2^k} \rfloor = \lfloor \frac {2^k + e} d \times \frac n {2^k} \rfloor = \lfloor \frac n d + \frac e d \times \frac n {2^k} \rfloor  $

&lt;p&gt;This last expression is really cool, because it shows the wholesome result we&#39;re after, $\lfloor \frac n d \rfloor$, and also an insidious &quot;error term:&quot; that $\frac e d \times \frac n {2^k}$, which represents how much our ceil is causing us to overestimate.  It also shows that we can make the error term smaller by cranking up k: that&#39;s the sense in which k is a precision.
&lt;div class=&quot;dotbox&quot;&gt;&amp;#160;&lt;/div&gt;
&lt;h4&gt;K&#39;s Choice&lt;/h4&gt;

&lt;p&gt;We could pick some huge precision k, get a very precise result, and be done.  But we defined m to be $\lceil \frac {2^k}  d \rceil$, so if k is too big, then m will be too big to fit in a machine register and we can&#39;t efficiently multiply by it.  So instead let&#39;s pick the smallest k that&#39;s precise enough, and hope that fits into a register.  Since there are several variables involved, our strategy will be to find upper bounds for them, replace the variables with their upper bounds, and simplify the expression until we can solve for k.

&lt;p&gt;So we want the smallest k so that $\lfloor \frac n d \rfloor = \lfloor \frac n d + \frac e d \times \frac n {2^k} \rfloor $.  This will be true if the error term $\frac e d \times \frac n {2^k}$ is less than 1, because then the floor operation will wipe it out, right?  Oops, not quite, because there&#39;s also a fractional contribution from $\frac n d$.   We need to be sure that the error term, &lt;i&gt;plus&lt;/i&gt; the fractional contribution of $\frac n d$, is less than 1 for that equality to be true.

&lt;p&gt;We&#39;ll start by putting an upper bound on the fractional contribution.  How big can it be?  If you divide any integer by d, the fractional part of the result is no more than $\frac {d - 1} d$.  Therefore the fractional contribution of $\frac n d$ is at most $\frac {d - 1} d$, and so if our error term is less than $\frac 1 d$, it will be erased by the floor and our equality will be true.

&lt;p&gt;So k will be big enough when &amp;#160;&amp;#160;$\frac e d \times \frac n {2^k} &lt; \frac 1 d$.

&lt;p&gt;Next we&#39;ll tackle $\frac e d$.  We know from up above that e is at most d-1, so we have $\frac e d &lt; 1$.  So we can ignore that factor: $\frac n {2^k} &lt; \frac 1 d \implies \frac e d \times \frac n {2^k}  &lt; \frac 1 d$.

&lt;p&gt;The term $\frac n {2^k}$ has a dependence on n, the numerator.  How big can the numerator be?  Let&#39;s say we&#39;re dividing 32 bit unsigned integers: n &amp;#8804; 2&lt;sup&gt;32&lt;/sup&gt;.  (The result is easily extended to other widths).  We can make $\frac n {2^k}$ less than 1 by picking k = 32.  To make it even smaller, less than $\frac 1 d$, we must increase k by $\log_2 d$.  That is,

&lt;p&gt;$k &gt; 32 + \log_2 d \implies \frac n {2^k} &lt; \frac 1 d$

&lt;p&gt;Since we want k to be an integer, we have to round this up: $k = 32 + \lceil \log_2 d \rceil$.  We know that value for k works.

&lt;p&gt;What does that precision do to m, our magic number?  Maybe this k makes m too big to fit into a 32 bit register!  We defined $m = \lceil \frac {2^k} d \rceil$; plugging in k we have $m = \lceil \frac {2^{32 + \lceil log_2 d \rceil} } d \rceil $.


&lt;p&gt;This is a gross expression, but we can put an upper bound on it.  Note that $d &lt; {2 ^ { \lceil log_2 d \rceil } }$, so we can write the following:

&lt;p&gt;$m &lt;= \lceil \frac {2^{32 + \lceil log_2 d \rceil} } {2 ^ { \lfloor log_2 d \rfloor } } \rceil = \lceil {2^{32 + \lceil log_2 d \rceil - \lfloor log_2 d \rfloor} } \rceil $
&lt;br&gt;&lt;br&gt;
$ = \lceil {2 ^ { 32 + 1}} \rceil = 2^{33}$

&lt;p&gt;Nuts!  Our approximation m just barely does &lt;i&gt;not&lt;/i&gt; fit into a 32 bit word!

&lt;p&gt;Since we rounded some stuff, you might think that we were too lazy and a more careful analysis would produce a tighter upper bound.  But in fact our upper bound is exact: the magic number for an N-bit division really may need to be as large as N+1 bits.  The good news is, there may be smaller numbers that fit in N bits for specific divisors.  More on that later!
&lt;div class=&quot;dotbox&quot;&gt;&amp;#160;&lt;/div&gt;
&lt;h4&gt;We are fruitful and multiply&lt;/h4&gt;

&lt;p&gt;In any case, we now have our magic number m.  To perform the division, we need to compute $ \lfloor \frac {m n} {2^k} \rfloor$ as efficiently as possible.  m is a 33 bit number, so how can a 32 bit processor efficiently multiply by that?  One way would be to use a bignum library, but that would be too slow.  A better approach is to multiply by the low 32 bits, and handle the 33rd bit specially, like this:

&lt;p&gt;$$\begin{align} m n &amp; = (m - 2^{32} + 2^{32})n \\
&amp; = (m - 2^{32})n + 2^{32} n \end{align}$$

&lt;p&gt;This looks very promising: m - 2&lt;sup&gt;32&lt;/sup&gt; is definitely a 32 bit number.  Furthermore, we can compute that 2&lt;sup&gt;32&lt;/sup&gt;n term very easily: we don&#39;t even need to shift, just add n to the high word of the product.  Unfortunately, it&#39;s not right: a 32 bit number times a 33 bit number is 65 bits, so the addition overflows.

&lt;p&gt;But we can prevent the overflow by distributing one of the 2s in the denominator, through the following trick:

$$ \begin{align} \lfloor \frac {n + q} {2^k} \rfloor &amp; = \lfloor  \frac {n - q + 2q} {2^k} \rfloor \\ 
&amp; = \lfloor  ( \frac {n - q + 2q} 2 ) / {2^{k-1}} \rfloor \\
&amp; = \lfloor ( \lfloor \frac {n - q} 2 \rfloor + q ) / {2^{k-1}} \rfloor \end{align} $$

&lt;p&gt;Here q is the magic number (minus that 33rd bit) times n, and n is just n, the numerator.  (Everything should be multiplied by 2&lt;sup&gt;32&lt;/sup&gt;, but that&#39;s sort of implicit in the fact that we are working in the register containing the high product, so we can ignore it.)

&lt;p&gt;Can the subtraction n - q underflow?  No, because q is just n times the 32 bit magic number, and then divided by 2&lt;sup&gt;32&lt;/sup&gt;.  The magic number (now bereft of its 33rd bit) is less than 2&lt;sup&gt;32&lt;/sup&gt;, so we have q &lt; n, so n - q cannot underflow.

&lt;p&gt;What about that +q?  Can that overflow?  No, because we can just throw out the floor to get an upper bound of $\frac {n + q} 2$ which is a 32 bit number.

&lt;p&gt;So we have a practical algorithm.  Given a dividend n and a fixed divisor d, where 0 &lt; d &lt; 2&lt;sup&gt;32&lt;/sup&gt; and 0 &amp;#8804; n &lt; 2&lt;sup&gt;32&lt;/sup&gt;:
&lt;ol&gt;
&lt;li style=&quot;margin: 3px&quot;&gt;Precompute $p = \lceil log_2 d \rceil$
&lt;li style=&quot;margin: 3px&quot;&gt;Precompute $m = \lceil \frac {2^{32 + p}} d \rceil$.  This will be a 33 bit number, so keep only the low 32 bits.&lt;/li&gt;
&lt;li style=&quot;margin: 3px&quot;&gt;Compute $q = (m \times n) \gg 32$.  Most processors can do this with one &quot;high multiply&quot; instruction.&lt;/li&gt;
&lt;li style=&quot;margin: 3px&quot;&gt;Compute $t = ((n - q) \gg 2) + q$, which is an overflow-safe way of computing (n + q) &amp;#x226B; 1.  This extra addition corrects for dropping the 33rd bit of m.&lt;/li&gt;
&lt;li style=&quot;margin: 3px&quot;&gt;Perform the remaining shift p: $t = t &amp;#x226B; (p-1)$&lt;/li&gt;
&lt;/ol&gt;
That&#39;s it!  We know how to efficiently replace division with multiplication.  We can see all these steps in action.  Here is the assembly that Clang generates for division by 7, along with my commentary:
&lt;pre&gt;
_divide_by_7:
 movl $613566757, %ecx  &lt;i&gt;613566757 is the low 32 bits of (2**35)/7, rounded up&lt;/i&gt;
 movl %edi, %eax 
 mull %ecx              &lt;i&gt;Multiply the dividend by the magic number&lt;/i&gt;
 subl %edx, %edi        &lt;i&gt;The dividend minus the high 32 bits of the product in %edx (%eax has the low)&lt;/i&gt;
 shrl %edi              &lt;i&gt;Initial shift by 1 to prevent overflow&lt;/i&gt;
 addl %edx, %edi        &lt;i&gt;Add in the high 32 bits again, correcting for the 33rd bit of the magic number&lt;/i&gt;
 movl %edi, %eax        &lt;i&gt;Move the result into the return register&lt;/i&gt;
 shrl $2, %eax          &lt;i&gt;Final shift right of floor(log_2(7))&lt;/i&gt;
 ret
&lt;/pre&gt;
&lt;div class=&quot;dotbox&quot;&gt;&amp;#160;&lt;/div&gt;
&lt;h4&gt;Improving the algorithm for particular divisors&lt;/h4&gt;

&lt;p&gt;This algorithm is the best we can do for the general case, but we may be able to improve on this for certain divisors.  The key is that e term: the value we add to get to the next multiple of d.  We reasoned that e was less than d, so we used $\frac e d &lt; 1$ as an upper bound for e.  But it may happen that a multiple of d is only slightly larger than a power of 2.  In that case, e will be small, and if we&#39;re lucky, it will be small enough to push the entire &quot;error term&quot; under $\frac 1 d$.

&lt;p&gt;For example, let&#39;s try it for the divisor 11.  With the general algorithm, we would need $k = 32 + \lceil log_2 11 \rceil = 36$.  But what if we choose k = 35 instead?  2&lt;sup&gt;35&lt;/sup&gt; + 1 is a multiple of 11, so we have e = 1, and we compute:

&lt;p&gt;$\frac e d \times \frac n {2^k} = \frac 1 d \times \frac n {2^{35}} &lt; \frac 1 d$

&lt;p&gt;So k = 35 forces the error term to be less than $\frac 1 d$, and therefore k = 35 is a good enough approximation.  This is good news, because then $m = \lceil \frac {2^{35}} {11} \rceil = 3123612579 &lt; 2^{32}$, so our magic number fits in 32 bits, and we don&#39;t need to worry about overflow!  We can avoid the subtraction, addition, and extra shifting in the general algorithm.  Indeed, clang outputs:
&lt;pre&gt;_divide_by_11:
  movl  $-1171354717, %ecx
  movl  %edi, %eax
  mull  %ecx
  movl  %edx, %eax
  shrl  $3, %eax
  ret
&lt;/pre&gt;

&lt;p&gt;The code for dividing by 11 is shorter than for dividing by 7, because a multiple of 11 happens to be very close to a power of 2.  This shows the way to an improved algorithm: We can simply try successive powers of 2, from 32 up to $32 + \lfloor log_2 d \rfloor$, and see if any of them happen to be close enough to a multiple of d to force the error term below $\frac 1 d$.  If so, the corresponding magic number fits in 32 bits and we can generate very efficient code.  If not, we can always fall back to the general algorithm.

&lt;p&gt;The power 32 will work if $\frac e d \leq \frac 1 d$, the power 33 will work if $\frac e d \leq \frac 2 d$, the power 34 will work if $\frac e d \leq \frac 4 d$, etc., up to $32 + \lfloor log_2 d \rfloor$, which will work if $\frac e d \leq \frac 1 2$.  By &quot;chance&quot;, we&#39;d expect this last power to work half the time, the previous power to work 25% of the time, etc.  Since we only need one,  most divisors actually should have an efficient, 32 bit or fewer magic number.  The infinite series $\frac 1 2 + \frac 1 4 + \frac 1 8$ sums to 1, so our chances get better with increasing divisors.

&lt;p&gt;It&#39;s interesting to note that if a divisor d has one of these more efficient magic numbers for a power $k &lt; 32 + \lceil log_2 d \rceil$, it also has one for all higher powers.  This is easy to see: if 2&lt;sup&gt;k&lt;/sup&gt; + e is a multiple of d, then 2&lt;sup&gt;k+1&lt;/sup&gt; + 2e is also a multiple of d. 

&lt;p&gt;$\frac e d \times \frac n {2^k} \leq \frac 1 d \implies \frac {2e} d \times \frac n {2^{k+1}} \leq \frac 1 d $

&lt;p&gt;This is good news.  It means that we only have to check one case, $ \lceil \frac {2^{32 + \lfloor log_2 d \rfloor}} d \rceil$ (a 32 bit value) to see if there is a more efficient magic number, because if any smaller power works, that one works too.  If that that power fails, we can go to the 33 bit number, which we know must work.  This is useful information in case we are computing magic numbers at runtime.

&lt;p&gt;Still, gcc and LLVM don&#39;t settle for just any magic number - both try to find the &lt;i&gt;smallest&lt;/i&gt; magic number.  Why?  There&#39;s a certain aesthetic appeal in not using bigger numbers than necessary, and most likely the resulting smaller multiplier and smaller shifts are a bit faster.  In fact, in a very few cases, the resulting shift may be zero!  For example, the code for diving by 641:
&lt;pre&gt;
_divide_by_641:
        movl    $6700417, %ecx
        movl    %edi, %eax
        mull    %ecx
        movl    %edx, %eax
        ret
&lt;/pre&gt;

&lt;p&gt;No shifts at all!  For this to happen, we must have $\frac e d \le \frac 1 d$, which of course means that e = 1, so 641 must evenly divide 2&lt;sup&gt;32&lt;/sup&gt; + 1.  Indeed it does.

&lt;p&gt;This inspires a way to find the other &quot;super-efficient&quot; shiftless divisors: compute the factors of 2&lt;sup&gt;32&lt;/sup&gt; + 1.  Sadly, the only other factor is 6700417.  I have yet to discover an occasion to divide by this factor, but if I do, I&#39;ll be ready.
&lt;div class=&quot;dotbox&quot;&gt;&amp;#160;&lt;/div&gt;
&lt;h4&gt;So that&#39;s how it works&lt;/h4&gt;
Did you skip ahead?  It&#39;s OK.  Here&#39;s the summary.
Every divisor has a magic number, and most have more than one!  A magic number for &lt;i&gt;d&lt;/i&gt; is nothing more than a precomputed quotient: a power of 2 divided by &lt;i&gt;d&lt;/i&gt; and then rounded up.  At runtime, we do the same thing, except backwards: multiply by this magic number and then divide by the power of 2, rounding down.  The tricky part is finding a power big enough that the &quot;rounding up&quot; part doesn&#39;t hurt anything.  If we are lucky, a multiple of &lt;i&gt;d&lt;/i&gt; will happen to be only slightly larger than a power of 2, so rounding up doesn&#39;t change much and our magic number will fit in 32 bits.  If we are unlucky, well, we can always fall back to a 33 bit number, which is almost as efficient.

&lt;p&gt;I humbly acknowledge the legendary &lt;del&gt;Guy Steele&lt;/del&gt; &lt;b&gt;Henry Warren&lt;/b&gt; (must have been a while) and his book Hacker&#39;s Delight, which introduced me to this line of proof.  (Except his version has, you know, rigor.)
</content>
  </entry>
  
  <entry>
    <title>cdecl</title>
    <link href="http://ridiculousfish.com/blog/posts/cdecl.html"/>
    <updated>2009-11-12T00:00:00-08:00</updated>
    <id>http://ridiculousfish.com/posts/cdecl</id>
    <content type="html">Quick, what is &quot;&lt;span style=&quot;font-family: Courier, mono;&quot;&gt;char (*(*(* const x[3])())[5])(int)&lt;/span&gt;?&quot;

&lt;p&gt;If you immediately blurted out &quot;&lt;span style=&quot;font-size: smaller;&quot;&gt;x&amp;shy;is&amp;shy;an&amp;shy;array&amp;shy;of&amp;shy;three&amp;shy;const&amp;shy;pointers&amp;shy;to&amp;shy;functions&amp;shy;returning&amp;shy;pointers&amp;shy;to&amp;shy;arrays&amp;shy;of&amp;shy;five&amp;shy;pointers&amp;shy;to&amp;shy;functions&amp;shy;taking&amp;shy;int&amp;shy;returning&amp;shy;char&lt;/span&gt;&quot;, and your last name doesn&#39;t end with &quot;itchie,&quot; then chances are you used my new website:
&lt;span style=&quot;font-size: x-large&quot;&gt;&lt;a href=&quot;http://www.cdecl.org&quot;&gt;www.cdecl.org&lt;/a&gt;&lt;/span&gt;

&lt;p&gt;Yes, the venerable cdecl - the C gibberish to English translator - is now online.  With AJAX!  Every C declaration will be as an open book to you!  Your coworkers&#39; scruffy beards and suspenders will be nigh useless!

&lt;p&gt;Write C casts and declarations in plain English!  Write plain English in the chicken scratchings and line noise we call C!  The possibilities are twain!

&lt;p&gt;(&lt;a href=&quot;http://cdecl.org/?q=char+%28*%28*%28*+const+x%5B3%5D%29%28%29%29%5B5%5D%29%28int%29&quot;&gt;Click here&lt;/a&gt; to try it with that declaration!)


&lt;p&gt;ANNNNND...it gets better!  Did I mention that &lt;i&gt;my&lt;/i&gt; version of cdecl &lt;b&gt;supports blocks?&lt;/b&gt;  That&#39;s right, now you can totally nail that API that requires a &lt;span style=&quot;font-size: x-small&quot;&gt;&lt;a href=&quot;http://cdecl.org/?q=declare+foo+as+block+%28pointer+to+block+%28block%28pointer+to+int%29+returning+int%29+returning+void%29+returning+pointer+to+block%28void%29+returning+int&quot;&gt;block taking a pointer to a block taking a block taking a pointer to an int returning an int returning a pointer to a block taking void returning int&lt;/a&gt;&lt;/span&gt;!

&lt;p&gt;This site:
&lt;ul&gt;
&lt;li&gt;Converts readable English variable declarations or typecasts to C&lt;/li&gt;
&lt;li&gt;Converts C variable declarations or typecasts to English&lt;/li&gt;
&lt;li&gt;Supports &lt;a href=&quot;http://developer.apple.com/mac/articles/cocoa/introblocksgcd.html&quot;&gt;Apple&#39;s blocks extension&lt;/a&gt; to C&lt;/li&gt;
&lt;li&gt;Uses AJAX and has nifty effects&lt;/li&gt;
&lt;li&gt;Allows you to generate permalinks, so you can send &lt;a href=&quot;http://cdecl.ridiculousfish.com/?q=declare+broiled+as+char&quot;&gt;hilarious&lt;/a&gt; declarations to your friends, or add them gratuitously to your blog&lt;/li&gt;
&lt;/ul&gt;

A note on licensing. The cdecl readme states:

&lt;blockquote style=&quot;border-left: 2px solid #369; padding-left: 10px; font-size: smaller;&quot;&gt;You may well be wondering what the status of cdecl is.  So am I.  It was twice posted to comp.sources.unix, but neither edition carried any mention of copyright.  This version is derived from the second edition.  I have no reason to believe there are any limitations on its use, and strongly believe it to be in the Public Domain.&lt;/blockquote&gt;

I hereby place my blocks changes to cdecl in the public domain.  The cdecl source code, including my changes, is available for download on the site.</content>
  </entry>
  
  <entry>
    <title>I Didn't Order That, So Why Is It On My Bill, Episode 2</title>
    <link href="http://ridiculousfish.com/blog/posts/i-didnt-order-that-so-why-is-it-on-my-bill-episode-2.html"/>
    <updated>2009-09-17T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/i-didnt-order-that-so-why-is-it-on-my-bill-episode-2</id>
    <content type="html">This is the second episode of I Didn&#39;t Order That, So Why Is It On My Bill: C++ features you never use, but pay for anyways.  &lt;a href=&quot;/blog/archives/2009/06/22/i-didnt-order-that-so-why-is-it-on-my-bill-episode-1/#fish_made_a_mess&quot;&gt;See episode one here&lt;/a&gt;.


&lt;p&gt;For those who like their punchlines first: std::string is designed to allow copy-on-write.  But once operator[] is called, that string is ruined for COW forevermore. The reason is that it has to guard against a future write at any time, because you may have stashed away the internal pointer that operator[] returns - a feature that you surely know better than to use, but that costs you nevertheless.


&lt;p&gt;The C++ standard string class is std::string. Here&#39;s a string containing 10 megabytes of the letter &#39;x&#39;:

&lt;pre&gt;
#include &amp;lt;string&amp;gt;
using std::string;
int main(void) {
    string the_base(1024 * 1024 * 10, &#39;x&#39;);
}
&lt;/pre&gt;

Big string.  Now let&#39;s make a hundred copies, one by one:

&lt;pre&gt;
#include &amp;lt;string&amp;gt;
using std::string;
int main(void) {
    string the_base(1024 * 1024 * 10, &#39;x&#39;);
    &lt;span style=&quot;color: red&quot;&gt;for (int i = 0; i &amp;lt; 100; i++) {
        string the_copy = the_base;
    }&lt;/span&gt;
}
&lt;/pre&gt;

This runs in .02 seconds, which is very fast.  Suspiciously fast!  This old iMac can&#39;t schlep a gigabyte of data in two hundredths of a second.  It&#39;s using copy-on-write.


&lt;p&gt;So let&#39;s write and measure the copy:

&lt;pre&gt;
#include &amp;lt;string&amp;gt;
using std::string;
int main(void) {
    string the_base(1024 * 1024 * 10, &#39;x&#39;);
    for (int i = 0; i &amp;lt; 100; i++) {
        string the_copy = the_base;
        &lt;span style=&quot;color: red&quot;&gt;the_copy[0] = &#39;y&#39;;&lt;/span&gt;
    }
}
&lt;/pre&gt;

The program now runs in 2.5 seconds.  These scant 100 writes resulted in a 100x slowdown.  Not surprising: it&#39;s exactly what we would expect from a COW string.


&lt;p&gt;the_copy[0] returns a reference to a char.  But maybe we aren&#39;t going to write into it - perhaps we only want to read.  How can these copy-on-write strings know when the write occurs, so they can copy?  The answer is that they cannot - they must be pessimistic and assume you will write, even if you never do.  We can trick it: don&#39;t assign anything, and still see the performance hit:

&lt;pre&gt;
#include &amp;lt;string&amp;gt;
using std::string;
int main(void) {
    string the_base(1024 * 1024 * 10, &#39;x&#39;);
    for (int i = 0; i &amp;lt; 100; i++) {
        string the_copy = the_base;
        &lt;span style=&quot;color: red&quot;&gt;the_copy[0];&lt;/span&gt;
    }
}
&lt;/pre&gt;

No writes!  Just a read!  But same performance as before.  This isn&#39;t copy on write - it&#39;s copy on read!


&lt;p&gt;Things get even worse.  operator[] returns a reference: basically a sugary pointer.  You can read from it or write to it.  Or you can be a jerk and just hang onto it:

&lt;pre&gt;
string original = &quot;hello&quot;;
char &amp; ref = original[0];
string clone = original;
ref = &#39;y&#39;;
&lt;/pre&gt;


&lt;p&gt;In case that&#39;s not clear, we made a string, stashed away a reference to the first character, &lt;i&gt;copied&lt;/i&gt; the string, and then wrote to the string&#39;s guts.  The write is just a normal store to a memory location, so the poor string is caught completely unaware.  If the copy-on-write were naive, then we would have modified both the original and the copy.


&lt;p&gt;Oh man, is that evil.  But the string&#39;s got to be paranoid and guard against it anyways - in fact, the C++ standard explicitly calls out this case as something that has to work!  In other words, when you get a reference to a char inside a string, the string is tainted.  It can never participate in copy-on-write again, because you just might have stashed away the internal pointer it handed back, and write into the string as a completely unexpected time.


&lt;p&gt;Of course you know better than to hang onto internal pointers.  You &lt;i&gt;probably&lt;/i&gt; don&#39;t need this feature.  But you pay for it anyways:

&lt;pre&gt;
#include &amp;lt;string&amp;gt;
using std::string;
int main(void) {
    string the_base(1024 * 1024 * 10, &#39;x&#39;);
    &lt;span style=&quot;color: red&quot;&gt;the_base[0];&lt;/span&gt;
    for (int i = 0; i &amp;lt; 100; i++) {
        string the_copy = the_base;
    }
}
&lt;/pre&gt;


&lt;p&gt;This takes the 2.5 seconds.  Just one silly read wrecked all of the COW machinery for all the future copies.  You&#39;re paying for writes that never come!


&lt;p&gt;Could the C++ standard have fixed this?  Sure - the C++ standard goes into great detail about when iterators and references into strings are invalidated, and all it would have taken would be to add the copy constructor and operator=() to the list of reference-invalidating functions (section 23.1.5, for those who are following along in the standard).  A second option would have been to declare that operator=() invalidates existing references for writing, but not for reading.  But the standards committee preferred simplicity, convenience and safety to performance - uncharacteristically, if you&#39;ll forgive a smidgen of editorializing.


&lt;p&gt;If you call a reference-invalidating function, you can, in principle, get back in the COW fast lane.  Although GNU STL does not take advantage of this in all cases, it does when resizing strings:

&lt;pre&gt;
#include &amp;lt;string&amp;gt;
using std::string;
int main(void) {
    string the_base(1024 * 1024 * 10, &#39;x&#39;);
    the_base[0];
    &lt;span style=&quot;color: red&quot;&gt;the_base.push_back(&#39;x&#39;);&lt;/span&gt;
    for (int i = 0; i &lt; 100; i++) {
        string the_copy = the_base;
    }
}
&lt;/pre&gt;


&lt;p&gt;Allowing the string to modify itself allowed it to know that any previous references were invalidated.  We&#39;re fast again!  It&#39;s called a COW, and it&#39;s not about to blow it now.


&lt;p&gt;The moral is that you should avoid using operator[], the at() function, iterators, etc. to read from a non-const string - especially a long string - if it may be copied in the future.  If you do use these functions, you risk paying for a write that you don&#39;t make, and for hanging onto an internal pointer that you released.  Unfortunately, there&#39;s no good function for just reading from a non-const string.  You can do it by adding a crazy cast:

&lt;pre&gt;
#include &amp;lt;string&amp;gt;
using std::string;
int main(void) {
	string the_base(1024 * 1024 * 10, &#39;x&#39;);
	&lt;span style=&quot;color: red&quot;&gt;const_cast&amp;lt;const string &amp;&amp;gt;(the_base)[0];&lt;/span&gt;
	for (int i = 0; i &lt; 100; i++) {
		string the_copy = the_base;
	}
}
&lt;/pre&gt;


&lt;p&gt;This hits the fast path too.


&lt;p&gt;Scene.  I hope you enjoyed this post.  As usual the point is not to rag on C++, but to explore aspects of its design that, for whatever reason, tilt a tradeoff away from performance.
</content>
  </entry>
  
  <entry>
    <title>I'm Bringing Hexy Back</title>
    <link href="http://ridiculousfish.com/blog/posts/im-bringing-hexy-back.html"/>
    <updated>2009-07-31T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/im-bringing-hexy-back</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;/hexfiend/&quot;&gt;&lt;img src=&quot;/images/hex_icon.png&quot; style=&quot;float: right; margin-left: 10px;&quot; /&gt;&lt;/a&gt;


&lt;p&gt;Hooray, it&#39;s Hex Fiend 2, a nearly complete rewrite of Hex Fiend that incorporates even better techniques for working with big files.  Hex Fiend is my fast and clever hex editor for Mac OS X.

&lt;p style=&quot;font-size: larger&quot;&gt;&lt;a href=&quot;/hexfiend/&quot;&gt;Click On Me To Get Hex Fiend&lt;/a&gt;


&lt;p&gt;This app is about exploring the implementation of standard desktop UI features in the realm of files too large to fully read into main memory.  Is it possible to do copy and paste, find and replace, undo and redo, on a document that may top a hundred gigabytes, and make it feel natural?  Where do we run into trouble?


&lt;p&gt;More on that later.  For now, here&#39;s what&#39;s better about Hex Fiend 2:

&lt;ul&gt;&lt;li style=&quot;margin-top: 10px&quot;&gt;&lt;b&gt;It&#39;s embeddable.&lt;/b&gt;  The most requested feature was &amp;quot;I want a hex view in my app.&amp;quot;  Now it&#39;s really easy: Hex Fiend 2 is built as a relatively slim shell on top of a bundle-embeddable .framework.  There&#39;s &lt;a href=&quot;/hexfiend/docs/&quot;&gt;a real API&lt;/a&gt;, sample code, and everything.  See the Developer section of the Hex Fiend page.

&lt;li style=&quot;margin-top: 10px&quot;&gt;&lt;b&gt;It&#39;s faster.&lt;/b&gt;  All around. Text rendering is speedier, and the backing data representation more efficient.  It needs less I/O too.


&lt;p&gt;The save algorithm is especially improved.  For example, inserting one byte at the beginning of a 340 MB file and hitting Save would take 52 seconds and 340 additional MB of temporary disk space with Hex Fiend.  In Hex Fiend 2 it&#39;s reduced to 22 seconds and requires no temporary disk space.
&lt;li style=&quot;margin-top: 10px&quot;&gt;&lt;b&gt;Better UI.&lt;/b&gt;  It supports discontiguous selection.  Scroll-wheel scrolling no longer feels weird.  You can group the bytes into blocks (credit to Blake), and you can hide and show different views (thanks to bbum).  The big dorky line number view now shrinks to fit.  The data inspector panel is inline.  It has Safari-style inline find and replace and &quot;pop out&quot; selection highlighting.&lt;/li&gt;
&lt;li style=&quot;margin-top: 10px&quot;&gt;&lt;b&gt;Long operations support progress reporting, cancellation, and don&#39;t block the UI.&lt;/b&gt;   For example, find and replace now has a progress bar and a cancel button, and you can keep using your document (or others) while it works.&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;li style=&quot;margin-top: 10px&quot;&gt;&lt;b&gt;Longstanding bugfixes&lt;/b&gt;.  Backwards searching is now optimized.  Certain coalesced undo bugs have been addressed.  There&#39;s some basic cross-file dependency tracking.&lt;/li&gt;
&lt;/ul&gt;

I hope you find it useful.
</content>
  </entry>
  
  <entry>
    <title>I Didn't Order That, So Why Is It On My Bill, Episode 1</title>
    <link href="http://ridiculousfish.com/blog/posts/i-didnt-order-that-so-why-is-it-on-my-bill-episode-1.html"/>
    <updated>2009-06-22T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/i-didnt-order-that-so-why-is-it-on-my-bill-episode-1</id>
    <content type="html">&lt;p&gt;C++ was designed to ensure you &amp;quot;only pay for what you use,&amp;quot; and at that it is mostly successful.  But it&#39;s not &lt;i&gt;entirely&lt;/i&gt; successful, and I thought it might be interesting to explore some counterexamples: C++ features you don&#39;t use but still negatively impact performance, and ways in which other languages avoid those issues.


&lt;p&gt;So here&#39;s the first episode of I Didn&#39;t Order That, So Why Is It On My Bill, to be continued until I can&#39;t think of any more.


&lt;p&gt;&lt;b&gt;Inline Functions&lt;/b&gt;


&lt;p&gt;The C++ standard says this:


&lt;p&gt;&lt;span style=&quot;font: 12pt Monaco, Courier, mono;&quot;&gt;A static local variable in an extern inline function always refers to the same object.&lt;/span&gt;


&lt;p&gt;In other words, static variables in inline functions work just like static variables in any function. That&#39;s reasonable, because that&#39;s probably what you want.  That&#39;s what statics are &lt;i&gt;for&lt;/i&gt;, after all.


&lt;p&gt;But wait, it also says this:


&lt;p&gt;&lt;span style=&quot;font: 12pt Monaco, Courier, mono;&quot;&gt;An inline function with external linkage shall have the same address in all translation units.&lt;/span&gt;


&lt;p&gt;That&#39;s borderline silly.  Who cares what the address of the function is?  When&#39;s the last time you used the function pointer address for anything except calling it?  Dollars to donuts says never.  You aren&#39;t using a function pointer as a hash table key.  You aren&#39;t comparing the same function via pointers from different files.  And if you did, you&#39;d probably have the good sense to ensure the functions are defined exactly once (i.e. not inline).  You can easily live without this feature.


&lt;p&gt;So hopefully I&#39;ve established that you don&#39;t use this feature.  Now I have to show how you&#39;re paying for it anyways.  Well, this feature complicates linking.  Ordinarily, there should be only one copy of a function, and if the linker finds more than one it gives you a multiple definition error.  But with inline functions, the compiler is expected to generates multiple copies of the code and it&#39;s up to the linker to sort it out.  See &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gcc/Vague-Linkage.html&quot;&gt;vague linkage&lt;/a&gt;.


&lt;p&gt;So the linker has more work to do, and link time is increased.  Again, who cares?  Linking occurs after compilation, and I promised you a runtime cost.  But ah - link time is runtime when we&#39;re using dynamic libraries!


&lt;p&gt;Every time you start up a program, the linker has to make sure that your implementation of vector&amp;lt;int&amp;gt;::capacity() has the same address as the vector&amp;lt;int&amp;gt;::capacity() defined in libWhoGivesAHoot.dylib &lt;i&gt;just in case&lt;/i&gt; you decide to go and compare their function pointers.


&lt;p&gt;And it gets a little worse.  You know how class templates have to live in header files?  The function definition goes right there in the class declaration, and that makes them inline automatically.  So nearly every function in a template gets this inline uniquing treatment.  Every template function in a class that cannot or should not be inlined - because its address is taken, because it is recursive, because you&#39;re optimizing for size, or simply because it&#39;s too darn big and inlining is counterproductive - will incur a launch time cost.


&lt;p&gt;The situation is dire enough that gcc added a &amp;quot;-fvisibility-inlines-hidden&amp;quot; flag.  This is a minor violation of the C++ standard, but will improve launch time in cases with a lot of dynamic libraries.  In other words, this flag says: I&#39;m not using this feature, please take it off my bill.


&lt;p&gt;C does not have this problem.  Why not?  C (in the C99 standard) has very different semantics for inline functions.  To oversimplify a bit, a C99 inline function acts as sort of an alias for a real function, which must be defined once and only once.  Furthermore, inline functions can&#39;t have static variables, or have their addresses taken.  This approach is more limiting, but doesn&#39;t require the linker to bend over backwards, and so avoids the performance penalty of the C++ approach.</content>
  </entry>
  
  <entry>
    <title>Roundy</title>
    <link href="http://ridiculousfish.com/blog/posts/roundy.html"/>
    <updated>2009-06-01T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/roundy</id>
    <content type="html">&lt;p&gt;This post is in homage to my old page, &lt;a href=&quot;/images/sleep_roundly.png&quot;&gt;a triumph of curvaceousness&lt;/a&gt;.  May it sleep roundly.

    
&lt;p&gt;As any usability expert will tell you, the foundation of sound web page design is rounded corners. Their smooth curves lend an organic, almost sensual feel to a site, while other pages are un-navigable morasses of right angles.
    
&lt;p&gt;Rounded corners are easy with tables and images!  But tables make your page Web 2.0-incompatible, so most browsers cannot render it.
    
&lt;p&gt;So when I decided to get some roundy corners for myself, I looked around, and the best I was able to find was &lt;a href=&quot;http://www.html.it/articoli/niftycube/index.html&quot;&gt;Nifty Corners&lt;/a&gt;. There&#39;s a lot to like about Nifty Corners, but look what happens if you try to make them overlap or put them on a, say, not-fixed-color background:
    &lt;div style=&quot;text-align: center; margin: 15px; font-size: small; &quot;&gt;
        &lt;a href=&quot;/blog/roundy/nifty.html&quot;&gt;&lt;img style=&quot;border: 1px solid gray;&quot; src=&quot;/blog/roundy/pain_agony.png&quot; alt=&quot;pain_agony.png&quot; /&gt;&lt;br&gt;
        Click on the image to see the actual page.&lt;/a&gt;
    &lt;/div&gt;
    
&lt;p&gt;Notice that the corners of the boxes suffer.  The problem is that the area around the corner cannot be drawn transparently - it needs to be over a fixed color. &lt;a href=&quot;http://developer.mozilla.org/en/CSS/-moz-border-radius&quot;&gt;Browser specific extensions&lt;/a&gt; would be perfect if they weren&#39;t browser specific.
    
&lt;p&gt;But I like crazy backgrounds and overlapping boxes.  So in a half-hearted effort for geek cred, here&#39;s how my roundy corners worked.
    &lt;table cellpadding=&quot;10px&quot; style=&quot;margin-left: auto; margin-right: auto; border: solid; border-width: 1px; border-color: gray;&quot;&gt;
        &lt;tr&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: right; width: 400px&quot;&gt;This is a div:&lt;/td&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: left; width: 310px&quot;&gt;
                &lt;div style=&quot;width: 200px; height: 20px;&quot;&gt;&lt;/div&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: right; width: 400px&quot;&gt;This is a bordered div:&lt;/td&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: left; width: 310px&quot;&gt;
                &lt;div style=&quot;width: 200px; height: 20px; border: 2px solid blue&quot;&gt;&lt;/div&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: right; width: 400px&quot;&gt;This is a thickly bordered div:&lt;/td&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: left; width: 310px&quot;&gt;
                &lt;div style=&quot;width: 200px; height: 20px; border: 15px solid blue&quot;&gt;&lt;/div&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: right; width: 400px&quot;&gt;This is a thickly bordered div with differently colored borders:&lt;/td&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: left; width: 310px&quot;&gt;
                &lt;div style=&quot;width: 200px; height: 20px; border: 15px solid; border-right-color: red; border-left-color: green; border-top-color: blue; border-bottom-color: yellow&quot;&gt;&lt;/div&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: right; width: 400px&quot;&gt;This is a div bordered only on the left and right:&lt;/td&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: left; width: 310px&quot;&gt;
                &lt;div style=&quot;width: 200px; height: 20px; border-left: 10px solid green; border-right: 10px solid red&quot;&gt;&lt;/div&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: right; width: 400px&quot;&gt;This is a div bordered more thickly on the right:&lt;/td&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: left; width: 310px&quot;&gt;
                &lt;div style=&quot;width: 200px; height: 20px; border-left: 10px solid green; border-right: 80px solid red&quot;&gt;&lt;/div&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: right; width: 400px&quot;&gt;Closer:&lt;/td&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: left; width: 310px&quot;&gt;
                &lt;div style=&quot;width: 100px; height: 20px; border-left: 10px solid green; border-right: 80px solid red&quot;&gt;&lt;/div&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: right; width: 400px&quot;&gt;Closer:&lt;/td&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: left; width: 310px&quot;&gt;
                &lt;div style=&quot;width: 20px; height: 20px; border-left: 10px solid green; border-right: 80px solid red&quot;&gt;&lt;/div&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: right; width: 400px&quot;&gt;Contact:&lt;/td&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: left; width: 310px&quot;&gt;
                &lt;div style=&quot;width: 0px; height: 20px; border-left: 10px solid green; border-right: 80px solid red&quot;&gt;&lt;/div&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: right; width: 400px&quot;&gt;This is a bunch of divs in a stack:&lt;/td&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: left; width: 310px&quot;&gt;
                &lt;div style=&quot;width: 0px; height: 20px; border-left: 10px solid green; border-right: 80px solid red; margin-bottom: 2px&quot;&gt;&lt;/div&gt;
                &lt;div style=&quot;width: 0px; height: 20px; border-left: 10px solid green; border-right: 80px solid red; margin-bottom: 2px&quot;&gt;&lt;/div&gt;
                &lt;div style=&quot;width: 0px; height: 20px; border-left: 10px solid green; border-right: 80px solid red; margin-bottom: 2px&quot;&gt;&lt;/div&gt;
                &lt;div style=&quot;width: 0px; height: 20px; border-left: 10px solid green; border-right: 80px solid red; margin-bottom: 2px&quot;&gt;&lt;/div&gt;
                &lt;div style=&quot;width: 0px; height: 20px; border-left: 10px solid green; border-right: 80px solid red; margin-bottom: 2px&quot;&gt;&lt;/div&gt;
                &lt;div style=&quot;width: 0px; height: 20px; border-left: 10px solid green; border-right: 80px solid red; margin-bottom: 2px&quot;&gt;&lt;/div&gt;
                &lt;div style=&quot;width: 0px; height: 20px; border-left: 10px solid green; border-right: 80px solid red; margin-bottom: 2px&quot;&gt;&lt;/div&gt;
                &lt;div style=&quot;width: 0px; height: 20px; border-left: 10px solid green; border-right: 80px solid red; margin-bottom: 2px&quot;&gt;&lt;/div&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: right; width: 400px&quot;&gt;This is a bunch of divs in a stack with different right border widths:&lt;/td&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: left; width: 310px&quot;&gt;
                &lt;div style=&quot;width: 0px; height: 20px; border-left: 10px solid green; border-right: 80px solid red; margin-bottom: 2px&quot;&gt;&lt;/div&gt;
                &lt;div style=&quot;width: 0px; height: 20px; border-left: 10px solid green; border-right: 95px solid red; margin-bottom: 2px&quot;&gt;&lt;/div&gt;
                &lt;div style=&quot;width: 0px; height: 20px; border-left: 10px solid green; border-right: 101px solid red; margin-bottom: 2px&quot;&gt;&lt;/div&gt;
                &lt;div style=&quot;width: 0px; height: 20px; border-left: 10px solid green; border-right: 105px solid red; margin-bottom: 2px&quot;&gt;&lt;/div&gt;
                &lt;div style=&quot;width: 0px; height: 20px; border-left: 10px solid green; border-right: 108px solid red; margin-bottom: 2px&quot;&gt;&lt;/div&gt;
                &lt;div style=&quot;width: 0px; height: 20px; border-left: 10px solid green; border-right: 110px solid red; margin-bottom: 2px&quot;&gt;&lt;/div&gt;
                &lt;div style=&quot;width: 0px; height: 20px; border-left: 10px solid green; border-right: 112px solid red; margin-bottom: 2px&quot;&gt;&lt;/div&gt;
                &lt;div style=&quot;width: 0px; height: 20px; border-left: 10px solid green; border-right: 113px solid red; margin-bottom: 2px&quot;&gt;&lt;/div&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: right; width: 400px&quot;&gt;This is a bunch of divs in a stack with different right border widths, set to float right:&lt;/td&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: left; width: 310px&quot;&gt;
                &lt;div style=&quot;width: 130px&quot;&gt;
                    &lt;div style=&quot;width: 0px; height: 20px; border-left: 10px solid green; border-right: 80px solid red; margin-bottom: 2px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 20px; border-left: 10px solid green; border-right: 95px solid red; margin-bottom: 2px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 20px; border-left: 10px solid green; border-right: 101px solid red; margin-bottom: 2px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 20px; border-left: 10px solid green; border-right: 105px solid red; margin-bottom: 2px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 20px; border-left: 10px solid green; border-right: 108px solid red; margin-bottom: 2px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 20px; border-left: 10px solid green; border-right: 110px solid red; margin-bottom: 2px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 20px; border-left: 10px solid green; border-right: 112px solid red; margin-bottom: 2px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 20px; border-left: 10px solid green; border-right: 113px solid red; margin-bottom: 2px; float: right&quot;&gt;&lt;/div&gt;
                &lt;/div&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: right; width: 400px&quot;&gt;Smaller:&lt;/td&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: left; width: 310px&quot;&gt;
                &lt;div style=&quot;width: 65px&quot;&gt;
                    &lt;div style=&quot;width: 0px; height: 10px; border-left: 10px solid green; border-right: 40px solid red; margin-bottom: 1px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 10px; border-left: 10px solid green; border-right: 48px solid red; margin-bottom: 1px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 10px; border-left: 10px solid green; border-right: 50px solid red; margin-bottom: 1px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 10px; border-left: 10px solid green; border-right: 52px solid red; margin-bottom: 1px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 10px; border-left: 10px solid green; border-right: 54px solid red; margin-bottom: 1px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 10px; border-left: 10px solid green; border-right: 55px solid red; margin-bottom: 1px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 10px; border-left: 10px solid green; border-right: 55px solid red; margin-bottom: 1px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 10px; border-left: 10px solid green; border-right: 56px solid red; margin-bottom: 1px; float: right&quot;&gt;&lt;/div&gt;
                &lt;/div&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: right; width: 400px&quot;&gt;Smaller:&lt;/td&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: left; width: 310px&quot;&gt;
                &lt;div style=&quot;width: 34px&quot;&gt;
                    &lt;div style=&quot;width: 0px; height: 5px; border-left: 5px solid green; border-right: 16px solid red; margin-bottom: 1px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 5px; border-left: 5px solid green; border-right: 20px solid red; margin-bottom: 1px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 5px; border-left: 5px solid green; border-right: 24px solid red; margin-bottom: 1px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 5px; border-left: 5px solid green; border-right: 26px solid red; margin-bottom: 1px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 5px; border-left: 5px solid green; border-right: 27px solid red; margin-bottom: 1px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 5px; border-left: 5px solid green; border-right: 27px solid red; margin-bottom: 1px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 5px; border-left: 5px solid green; border-right: 28px solid red; margin-bottom: 1px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 5px; border-left: 5px solid green; border-right: 28px solid red; margin-bottom: 1px; float: right&quot;&gt;&lt;/div&gt;
                &lt;/div&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: right; width: 400px&quot;&gt;One pixel high!&lt;/td&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: left; width: 310px&quot;&gt;
                &lt;div style=&quot;width: 23px&quot;&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid green; border-right: 11px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid green; border-right: 13px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid green; border-right: 14px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid green; border-right: 15px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid green; border-right: 15px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid green; border-right: 16px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid green; border-right: 16px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid green; border-right: 16px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                &lt;/div&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: right; width: 400px&quot;&gt;Make the left border pastel red to soften the edge. Tweak the border widths to get the desired curve. Add a solid div on top:&lt;/td&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: left; width: 310px&quot;&gt;
                &lt;div style=&quot;width: 21px&quot;&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 8px solid #FF6060; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 10px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 12px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 14px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 15px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 16px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 17px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 17px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                &lt;/div&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: right; width: 400px&quot;&gt;Four corners:&lt;/td&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: left; width: 310px&quot;&gt;
                &lt;div style=&quot;width: 21px; float: left&quot;&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 8px solid #FF6060; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 10px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 12px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 14px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 15px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 16px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 17px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 17px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;div style=&quot;width: 21px; float: right&quot;&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 8px solid #FF6060; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 10px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 12px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 14px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 15px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 16px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 17px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 17px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;div style=&quot;width: 50px; height: 50px&quot;&gt;&lt;/div&gt;
                &lt;div&gt;
                    &lt;div style=&quot;width: 21px; float: left&quot;&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 17px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 17px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 16px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 15px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 14px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 12px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 10px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 8px solid #FF6060; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div style=&quot;width: 21px; float: right&quot;&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 17px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 17px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 16px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 15px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 14px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 12px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 10px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 8px solid #FF6060; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: right; width: 400px&quot;&gt;Connect the top and bottom with one div each:&lt;/td&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: left; width: 310px&quot;&gt;
                &lt;div style=&quot;width: 21px; float: left;&quot;&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 8px solid #FF6060; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 10px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 12px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 14px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 15px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 16px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 17px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 17px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;div style=&quot;width: 21px; float: right&quot;&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 8px solid #FF6060; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 10px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 12px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 14px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 15px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 16px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 17px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 17px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;div style=&quot;border-style: solid; border-width: 1px 0px 10px 0px; border-color: red; border-top-color: #FF6060; margin: 0 12px 0 12px&quot;&gt;&lt;/div&gt;
                &lt;div style=&quot;width: 50px; height: 50px&quot;&gt;&lt;/div&gt;
                &lt;div&gt;
                    &lt;div style=&quot;width: 21px; float: left&quot;&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 17px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 17px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 16px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 15px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 14px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 12px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 10px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 8px solid #FF6060; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div style=&quot;width: 21px; float: right&quot;&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 17px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 17px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 16px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 15px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 14px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 12px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 10px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 8px solid #FF6060; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div style=&quot;border-style: solid; border-width: 10px 0px 1px 0px; border-color: red; border-bottom-color: #FF6060; margin: 0 12px 0 12px&quot;&gt;&lt;/div&gt;
                &lt;/div&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: right; width: 400px&quot;&gt;Add a div in the center where stuff goes:&lt;/td&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: left; width: 310px&quot;&gt;
                &lt;div style=&quot;width: 21px; float: left;&quot;&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 8px solid #FF6060; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 10px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 12px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 14px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 15px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 16px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 17px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 17px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;div style=&quot;width: 21px; float: right&quot;&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 8px solid #FF6060; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 10px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 12px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 14px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 15px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 16px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 17px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 17px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;div style=&quot;border-style: solid; border-width: 1px 0px 10px 0px; border-color: red; border-top-color: #FF6060; margin: 0 12px 0 12px&quot;&gt;&lt;/div&gt;
                &lt;div style=&quot;height: 50px; border-width: 0 1px 0 1px; border-color: #FF6060; border-style: solid; background-color: red; margin-left: 1px; margin-right: 1px&quot;&gt;&lt;/div&gt;
                &lt;div&gt;
                    &lt;div style=&quot;width: 21px; float: left&quot;&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 17px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 17px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 16px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 15px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 14px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 12px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 10px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 8px solid #FF6060; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div style=&quot;width: 21px; float: right&quot;&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 17px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 17px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 16px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 15px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 14px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 12px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 10px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 8px solid #FF6060; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div style=&quot;border-style: solid; border-width: 10px 0px 1px 0px; border-color: red; border-bottom-color: #FF6060; margin: 0 12px 0 12px&quot;&gt;&lt;/div&gt;
                &lt;/div&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: right; width: 400px&quot;&gt;And the stuff doth go:&lt;/td&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: left; width: 310px&quot;&gt;
                &lt;div style=&quot;width: 21px; float: left;&quot;&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 8px solid #FF6060; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 10px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 12px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 14px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 15px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 16px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 17px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 17px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;div style=&quot;width: 21px; float: right&quot;&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 8px solid #FF6060; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 10px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 12px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 14px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 15px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 16px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 17px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 17px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;div style=&quot;border-style: solid; border-width: 1px 0px 10px 0px; border-color: red; border-top-color: #FF6060; margin: 0 12px 0 12px&quot;&gt;&lt;/div&gt;
                &lt;div style=&quot;height: 50px; border-width: 0 1px 0 1px; border-color: #FF6060; border-style: solid; background-color: red; margin-left: 1px; margin-right: 1px&quot;&gt;
                    &lt;div style=&quot;text-align: center; color: white; font-size: 24pt; font-family: Verdana, Arial, Helvetica, sans-serif; font-weight: bold&quot;&gt;
                        Yo mama!
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;div style=&quot;width: 21px; float: left&quot;&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 17px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 17px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 16px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 15px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 14px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 12px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 10px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 8px solid #FF6060; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div style=&quot;width: 21px; float: right&quot;&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 17px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 17px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 16px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 15px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 14px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 12px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 10px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 8px solid #FF6060; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div style=&quot;border-style: solid; border-width: 10px 0px 1px 0px; border-color: red; border-bottom-color: #FF6060; margin: 0 12px 0 12px&quot;&gt;&lt;/div&gt;
                &lt;/div&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        
       &lt;tr&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: right; width: 400px&quot;&gt;Broken apart to show some of the pieces:&lt;/td&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: left; width: 310px&quot;&gt;
                &lt;div style=&quot;width: 21px; float: left;&quot;&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 8px solid #FF6060; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 10px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 12px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 14px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 15px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 16px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 17px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 17px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;div style=&quot;width: 21px; float: right&quot;&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 8px solid #FF6060; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 10px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 12px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 14px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 15px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 16px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 17px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 17px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;div style=&quot;border-style: solid; border-width: 1px 0px 10px 0px; border-color: red; border-top-color: #FF6060; margin: 0 30px 10px 30px&quot;&gt;&lt;/div&gt;
                &lt;div style=&quot;height: 50px; border-width: 0 1px 0 1px; border-color: #FF6060; border-style: solid; background-color: red; margin-left: 1px; margin-right: 1px&quot;&gt;
                    &lt;div style=&quot;text-align: center; color: white; font-size: 24pt; font-family: Verdana, Arial, Helvetica, sans-serif; font-weight: bold&quot;&gt;
                        Yo mama!
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;div&gt;
                    &lt;div style=&quot;width: 21px; float: left&quot;&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 17px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 17px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 16px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 15px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 14px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 12px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 10px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 8px solid #FF6060; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div style=&quot;width: 21px; float: right&quot;&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 17px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 17px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 16px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 15px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 14px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 12px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 10px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                        &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 8px solid #FF6060; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div style=&quot;border-style: solid; border-width: 10px 0px 1px 0px; border-color: red; border-bottom-color: #FF6060; margin: 10px 30px 0 30px&quot;&gt;&lt;/div&gt;
                &lt;/div&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        
        &lt;tr&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: right; width: 400px&quot;&gt;These overlap nicely (at least in Safari, IE6, and Firefox), respect z-order, and work well with non-solid backgrounds.  They do not require images, tables, or JavaScript.&lt;/td&gt;
            &lt;td style=&quot;border: solid; border-width: 1px; border-color: gray; text-align: left; background: url(/blog/roundy/noisy.png);&quot;&gt;
            &lt;div style=&quot;height: 130px; overflow: hidden;&quot;&gt;
				&lt;div style=&quot;width: 21px; float: left;&quot;&gt;
					&lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 8px solid #FF6060; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
					&lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 10px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
					&lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 12px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
					&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 14px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
					&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 15px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
					&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 16px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
					&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 17px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
					&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 17px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
					&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
					&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
					&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
				&lt;/div&gt;
				&lt;div style=&quot;width: 21px; float: right&quot;&gt;
					&lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 8px solid #FF6060; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
					&lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 10px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
					&lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 12px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
					&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 14px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
					&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 15px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
					&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 16px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
					&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 17px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
					&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 17px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
					&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
					&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
					&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
				&lt;/div&gt;
				&lt;div style=&quot;border-style: solid; border-width: 1px 0px 10px 0px; border-color: red; border-top-color: #FF6060; margin: 0 12px 0 12px&quot;&gt;&lt;/div&gt;
				&lt;div style=&quot;height: 50px; border-width: 0 1px 0 1px; border-color: #FF6060; border-style: solid; background-color: red; margin-left: 1px; margin-right: 1px&quot;&gt;
					&lt;div style=&quot;text-align: center; color: white; font-size: 24pt; font-family: Verdana, Arial, Helvetica, sans-serif; font-weight: bold&quot;&gt;
						Yo mama!
					&lt;/div&gt;
				&lt;/div&gt;
				&lt;div&gt;
					&lt;div style=&quot;width: 21px; float: left&quot;&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 18px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 17px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 17px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 16px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 15px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #FF6060; border-right: 14px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 12px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 10px solid red; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #FF6060; border-right: 8px solid #FF6060; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
					&lt;/div&gt;
					&lt;div style=&quot;width: 21px; float: right&quot;&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 18px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 17px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 17px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 16px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 15px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #FF6060; border-left: 14px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 12px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 10px solid red; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #FF6060; border-left: 8px solid #FF6060; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
					&lt;/div&gt;
					&lt;div style=&quot;border-style: solid; border-width: 10px 0px 1px 0px; border-color: red; border-bottom-color: #FF6060; margin: 0 12px 0 12px&quot;&gt;&lt;/div&gt;
				&lt;/div&gt;
				
				&lt;div style=&quot;position: relative; left: 120px; bottom: 55px; width: 120px; margin-bottom: -40px&quot;&gt;
					&lt;div style=&quot;width: 21px; float: left;&quot;&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid blue; border-right: 8px solid blue; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid blue; border-right: 10px solid blue; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid blue; border-right: 12px solid blue; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid blue; border-right: 14px solid blue; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid blue; border-right: 15px solid blue; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid blue; border-right: 16px solid blue; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid blue; border-right: 17px solid blue; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid blue; border-right: 17px solid blue; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid blue; border-right: 18px solid blue; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid blue; border-right: 18px solid blue; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid blue; border-right: 18px solid blue; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
					&lt;/div&gt;
					&lt;div style=&quot;width: 21px; float: right&quot;&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid blue; border-left: 8px solid blue; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid blue; border-left: 10px solid blue; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid blue; border-left: 12px solid blue; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid blue; border-left: 14px solid blue; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid blue; border-left: 15px solid blue; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid blue; border-left: 16px solid blue; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid blue; border-left: 17px solid blue; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid blue; border-left: 17px solid blue; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid blue; border-left: 18px solid blue; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid blue; border-left: 18px solid blue; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid blue; border-left: 18px solid blue; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
					&lt;/div&gt;
					&lt;div style=&quot;border-style: solid; border-width: 1px 0px 10px 0px; border-color: blue; border-top-color: blue; margin: 0 12px 0 12px&quot;&gt;&lt;/div&gt;
					&lt;div style=&quot;height: 40px; border-width: 0 1px 0 1px; border-color: blue; border-style: solid; background-color: blue; margin-left: 1px; margin-right: 1px&quot;&gt;
						&lt;div style=&quot;text-align: center; color: white; font-size: 14pt; font-family: Verdana, Arial, Helvetica, sans-serif; font-weight: bold&quot;&gt;
							No, yo mama!
						&lt;/div&gt;
					&lt;/div&gt;
					&lt;div&gt;
						&lt;div style=&quot;width: 21px; float: left&quot;&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid blue; border-right: 18px solid blue; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid blue; border-right: 18px solid blue; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid blue; border-right: 18px solid blue; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid blue; border-right: 17px solid blue; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid blue; border-right: 17px solid blue; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid blue; border-right: 16px solid blue; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid blue; border-right: 15px solid blue; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid blue; border-right: 14px solid blue; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid blue; border-right: 12px solid blue; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid blue; border-right: 10px solid blue; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid blue; border-right: 8px solid blue; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;/div&gt;
						&lt;div style=&quot;width: 21px; float: right&quot;&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid blue; border-left: 18px solid blue; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid blue; border-left: 18px solid blue; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid blue; border-left: 18px solid blue; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid blue; border-left: 17px solid blue; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid blue; border-left: 17px solid blue; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid blue; border-left: 16px solid blue; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid blue; border-left: 15px solid blue; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid blue; border-left: 14px solid blue; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid blue; border-left: 12px solid blue; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid blue; border-left: 10px solid blue; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid blue; border-left: 8px solid blue; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;/div&gt;
						&lt;div style=&quot;border-style: solid; border-width: 10px 0px 1px 0px; border-color: blue; border-bottom-color: blue; margin: 0 12px 0 12px&quot;&gt;&lt;/div&gt;
					&lt;/div&gt;
				&lt;/div&gt;

				&lt;div style=&quot;position: relative; left: 8px;  width: 120px; margin-top: 80px; bottom: 135px; margin-bottom: 0&quot;&gt;
					&lt;div style=&quot;width: 21px; float: left;&quot;&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid green; border-right: 8px solid green; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid green; border-right: 10px solid green; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid green; border-right: 12px solid green; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid green; border-right: 14px solid green; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid green; border-right: 15px solid green; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid green; border-right: 16px solid green; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid green; border-right: 17px solid green; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid green; border-right: 17px solid green; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid green; border-right: 18px solid green; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid green; border-right: 18px solid green; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid green; border-right: 18px solid green; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
					&lt;/div&gt;
					&lt;div style=&quot;width: 21px; float: right&quot;&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid green; border-left: 8px solid green; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid green; border-left: 10px solid green; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid green; border-left: 12px solid green; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid green; border-left: 14px solid green; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid green; border-left: 15px solid green; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid green; border-left: 16px solid green; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid green; border-left: 17px solid green; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid green; border-left: 17px solid green; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid green; border-left: 18px solid green; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid green; border-left: 18px solid green; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid green; border-left: 18px solid green; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
					&lt;/div&gt;
					&lt;div style=&quot;border-style: solid; border-width: 1px 0px 10px 0px; border-color: green; border-top-color: green; margin: 0 12px 0 12px&quot;&gt;&lt;/div&gt;
					&lt;div style=&quot;height: 20px; border-width: 0 1px 0 1px; border-color: green; border-style: solid; background-color: green; margin-left: 1px; margin-right: 1px&quot;&gt;
						&lt;div style=&quot;text-align: center; color: white; font-size: 12pt; font-family: Verdana, Arial, Helvetica, sans-serif; font-weight: bold&quot;&gt;
							Touch&amp;eacute;!
						&lt;/div&gt;
					&lt;/div&gt;
					&lt;div&gt;
						&lt;div style=&quot;width: 21px; float: left&quot;&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid green; border-right: 18px solid green; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid green; border-right: 18px solid green; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid green; border-right: 18px solid green; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid green; border-right: 17px solid green; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid green; border-right: 17px solid green; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid green; border-right: 16px solid green; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid green; border-right: 15px solid green; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid green; border-right: 14px solid green; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid green; border-right: 12px solid green; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid green; border-right: 10px solid green; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid green; border-right: 8px solid green; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
						&lt;/div&gt;
						&lt;div style=&quot;width: 21px; float: right&quot;&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid green; border-left: 18px solid green; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid green; border-left: 18px solid green; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid green; border-left: 18px solid green; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid green; border-left: 17px solid green; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid green; border-left: 17px solid green; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid green; border-left: 16px solid green; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid green; border-left: 15px solid green; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid green; border-left: 14px solid green; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid green; border-left: 12px solid green; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid green; border-left: 10px solid green; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
							&lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid green; border-left: 8px solid green; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
						&lt;/div&gt;
						&lt;div style=&quot;border-style: solid; border-width: 10px 0px 1px 0px; border-color: green; border-bottom-color: green; margin: 0 12px 0 12px&quot;&gt;&lt;/div&gt;
					&lt;/div&gt;
				&lt;/div&gt;
				&lt;/div&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;/table&gt;
        &lt;br&gt;
	Hey!  Flexible widths!
	&lt;div style=&quot;margin-left: 15%; margin-right: 15%; margin-top: 10px&quot;&gt;
		&lt;div style=&quot;width: 21px; float: left;&quot;&gt;
		    &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #67CAFF; border-right: 8px solid #67CAFF; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
		    &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #67CAFF; border-right: 10px solid #009fff; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
		    &lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #67CAFF; border-right: 12px solid #009fff; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
		    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #67CAFF; border-right: 14px solid #009fff; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
		    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #67CAFF; border-right: 15px solid #009fff; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
		    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #67CAFF; border-right: 16px solid #009fff; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
		    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #67CAFF; border-right: 17px solid #009fff; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
		    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #67CAFF; border-right: 17px solid #009fff; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
		    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #67CAFF; border-right: 18px solid #009fff; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
		    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #67CAFF; border-right: 18px solid #009fff; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
		    &lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #67CAFF; border-right: 18px solid #009fff; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
		&lt;/div&gt;
		&lt;div style=&quot;width: 21px; float: right&quot;&gt;
		    &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #67CAFF; border-left: 8px solid #67CAFF; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
		    &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #67CAFF; border-left: 10px solid #009fff; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
		    &lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #67CAFF; border-left: 12px solid #009fff; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
		    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #67CAFF; border-left: 14px solid #009fff; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
		    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #67CAFF; border-left: 15px solid #009fff; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
		    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #67CAFF; border-left: 16px solid #009fff; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
		    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #67CAFF; border-left: 17px solid #009fff; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
		    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #67CAFF; border-left: 17px solid #009fff; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
		    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #67CAFF; border-left: 18px solid #009fff; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
		    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #67CAFF; border-left: 18px solid #009fff; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
		    &lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #67CAFF; border-left: 18px solid #009fff; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
		&lt;/div&gt;
		&lt;div style=&quot;border-style: solid; border-width: 1px 0px 10px 0px; border-color: #009fff; border-top-color: #67CAFF; margin: 0 12px 0 12px&quot;&gt;&lt;/div&gt;
		&lt;div style=&quot;height: 50px; border-width: 0 1px 0 1px; border-color: #67CAFF; border-style: solid; background-color: #009fff; margin-left: 1px; margin-right: 1px&quot;&gt;
		    &lt;div style=&quot;text-align: center; color: white; font-size: 24pt; font-family: Verdana, Arial, Helvetica, sans-serif; font-weight: bold&quot;&gt;
			Resize me!
		    &lt;/div&gt;
		&lt;/div&gt;
		&lt;div&gt;
		    &lt;div style=&quot;width: 21px; float: left&quot;&gt;
			&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #67CAFF; border-right: 18px solid #009fff; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
			&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #67CAFF; border-right: 18px solid #009fff; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
			&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #67CAFF; border-right: 18px solid #009fff; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
			&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #67CAFF; border-right: 17px solid #009fff; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
			&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #67CAFF; border-right: 17px solid #009fff; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
			&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #67CAFF; border-right: 16px solid #009fff; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
			&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #67CAFF; border-right: 15px solid #009fff; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
			&lt;div style=&quot;width: 0px; height: 1px; border-left: 1px solid #67CAFF; border-right: 14px solid #009fff; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
			&lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #67CAFF; border-right: 12px solid #009fff; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
			&lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #67CAFF; border-right: 10px solid #009fff; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
			&lt;div style=&quot;width: 0px; height: 1px; border-left: 2px solid #67CAFF; border-right: 8px solid #67CAFF; margin-bottom: 0px; float: right&quot;&gt;&lt;/div&gt;
		    &lt;/div&gt;
		    &lt;div style=&quot;width: 21px; float: right&quot;&gt;
			&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #67CAFF; border-left: 18px solid #009fff; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
			&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #67CAFF; border-left: 18px solid #009fff; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
			&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #67CAFF; border-left: 18px solid #009fff; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
			&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #67CAFF; border-left: 17px solid #009fff; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
			&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #67CAFF; border-left: 17px solid #009fff; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
			&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #67CAFF; border-left: 16px solid #009fff; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
			&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #67CAFF; border-left: 15px solid #009fff; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
			&lt;div style=&quot;width: 0px; height: 1px; border-right: 1px solid #67CAFF; border-left: 14px solid #009fff; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
			&lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #67CAFF; border-left: 12px solid #009fff; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
			&lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #67CAFF; border-left: 10px solid #009fff; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
			&lt;div style=&quot;width: 0px; height: 1px; border-right: 2px solid #67CAFF; border-left: 8px solid #67CAFF; margin-bottom: 0px; float: left&quot;&gt;&lt;/div&gt;
		    &lt;/div&gt;
		    &lt;div style=&quot;border-style: solid; border-width: 10px 0px 1px 0px; border-color: #009fff; border-bottom-color: #67CAFF; margin: 0 12px 0 12px&quot;&gt;&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;
    
    &lt;h3&gt;But but but...&lt;/h3&gt;
    &lt;ul&gt;
    &lt;li&gt;Isn&#39;t that, like, a humongous flood of markup?  Won&#39;t the page take a long time to download?&lt;/li&gt;
    &lt;/ul&gt;
    &lt;p style=&quot;margin-left: 55px&quot;&gt;
    	Well, I worried about that too.  But happily, all modern browsers support gzip compression - and boy does it work!  Even though my last posting with comments is 382 KB in size, you only need to download 19.8 KB (Mac users can look in Safari&#39;s Activity Viewer for the download size).  So it ends up being smaller than, say, Yahoo!&#39;s home page - and that&#39;s just the HTML, not even counting all of its images.  As a result, the page loads quite fast.
    
    &lt;ul&gt;
    &lt;li&gt;Well, don&#39;t all those divs make the page unmaintainable?&lt;/li&gt;
    &lt;/ul&gt;
    &lt;p style=&quot;margin-left: 55px&quot;&gt;
    	Yeah, I suppose so.  I use a script to generate these boxes, so the source is readable to me - even if the generated HTML isn&#39;t.
    
</content>
  </entry>
  
  <entry>
    <title>Buzz</title>
    <link href="http://ridiculousfish.com/blog/posts/buzz.html"/>
    <updated>2007-04-25T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/buzz</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://buzz.vox.com/library/post/leaving-apple.html&quot;&gt;Buzz&lt;/a&gt; is leaving Apple, has already left.  Buzz joined Apple two months after I joined, on the same team.  He was the first candidate I ever interviewed, although I can&#39;t remember what I asked him.  Without Buzz&#39;s encouragement and inspiration, I&#39;d have never started this blog, and he was first to link to me.  So thank you and farewell, Buzz.

&lt;p&gt;On another thread, I&#39;ve fixed the &lt;a href=&quot;/angband&quot;&gt;Angband screensaver&lt;/a&gt; to remember the last character it played with.  The user defaults had to be synchronized.  Thanks to everyone who pointed this out.</content>
  </entry>
  
  <entry>
    <title>Angband</title>
    <link href="http://ridiculousfish.com/blog/posts/42.html"/>
    <updated>2007-04-13T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/42</id>
    <content type="html">&lt;img src=&quot;/angband/images/gollum.png&quot; style=&quot;float: left&quot;&gt;
&lt;b&gt;Guest blogger: Gollum (Smeagol)&lt;/b&gt;

&lt;p&gt;Where isst it?  So it iss back - so &lt;i&gt;fissh&lt;/i&gt;, the fish, raw and wriggling, he hasst brought its back!

&lt;p&gt;Angband, the Hells of Iron, yest, the ancient ASCII roguelike, child spawn of Moria and VMS, it iss here once more.  We wants it!

&lt;p&gt;You hasst not seen it, Angband?  But perhapss you have seen one like it, the filthy, filthy &lt;b&gt;NetHack&lt;/b&gt;, yess, full of such stupids and jokeses, and no Smeagol!  We hates it for ever!  But we loves Angband, yess, Angband has Smeagol and the fat hobbitses and yes, it has my preciouss!  We loves it, Angband!

&lt;p&gt;We hass thought it lost.  When OS X was a little child and hungry for software, we knows how it calls to &lt;i&gt;fissh&lt;/i&gt;.  We knows how &lt;i&gt;fissh&lt;/i&gt; missed Angband, dearly missed Smeagol, yes.  And we knows how &lt;i&gt;fissh&lt;/i&gt; stoles it, and worked his tricksy little magic, so he could go down into a Carbonized Angband on OS X.  And we knows &lt;i&gt;fissh&lt;/i&gt; did, and it was easy, Carbon madess it simple.

&lt;p&gt;But &lt;i&gt;fissh&lt;/i&gt; hasst brought it to Cocoa, now, all fresh and it glitterses so subpixel pretty with Quartz, and resizesss so smooth, and animates with pretty graphics!  So precious to &lt;i&gt;fissh&lt;/i&gt;.

&lt;p&gt;And ssuch love for Angband so &lt;i&gt;fissh&lt;/i&gt; made a &lt;b&gt;borg screensaveres&lt;/b&gt;!  So now you can visits Smeagol and wring the filthy little neck of Saruman and murderes the fat Morgoth in your sleep!  The screensaveres, yes!

&lt;p&gt;&lt;a href=&quot;/angband/&quot;&gt;Goes there now&lt;/a&gt;, fat hobbitses!  The &lt;b&gt;game&lt;/b&gt; and the &lt;b&gt;screensaveres&lt;/b&gt; and the &lt;b&gt;source codess&lt;/b&gt;!  Angband need you, yess!
&lt;div style=&quot;width: 216px; height: 227px; margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;
&lt;a href=&quot;/angband/&quot;&gt;&lt;img src=&quot;/angband/images/logo_bitty.png&quot; style=&quot;border: none&quot;&gt;&lt;/a&gt;
&lt;a href=&quot;/angband/&quot;&gt;Angband for Mac OS X&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;b&gt;Edit:&lt;/b&gt; &lt;i&gt;fissh&lt;/i&gt; has fixed the problem with the screensaveres needing Angband to have been launched first.  It should work no problems now.</content>
  </entry>
  
  <entry>
    <title>Barrier</title>
    <link href="http://ridiculousfish.com/blog/posts/barrier.html"/>
    <updated>2007-02-17T00:00:00-08:00</updated>
    <id>http://ridiculousfish.com/posts/barrier</id>
    <content type="html">&lt;p&gt;&lt;div style=&quot;background-color: #fff0cb; border: 1px solid #c0c030; font-size: larger; padding: 5px; margin: 5px;&quot;&gt;
&amp;quot;&lt;a href=&quot;http://www.intel.com/pressroom/archive/releases/20060926corp_b.htm&quot;&gt;That&#39;s a lot of cores.&lt;/a&gt;  &lt;span style=&quot;color: #43174c&quot;&gt;And while 80-core floating point monsters like that aren&#39;t likely to show up in an iMac any time soon, multicore chips in multiprocessor computers are here today.  Single chip machines are so 2004.  Programmers better get crackin&#39;.  The megahertz free ride is over - and we have work to do.&amp;quot;&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;There, that&#39;s the noisome little pitch everyone&#39;s been spreading like so much thermal paste.  As if multiprocessing is something new!  But of course it&#39;s not - heck, I remember Apple shipping dualies more than ten years ago, as the Power Macintosh 9500.  Multiprocessing is more &lt;i&gt;accessible&lt;/i&gt; (read: cheaper) now, but it&#39;s anything save new.  It&#39;s been around long enough that we should have it figured out by now.

&lt;p&gt;So what&#39;s my excuse?  I admit it - I don&#39;t get multiprocessing, not, you know, really get it, and that&#39;s gone on long enough.  It&#39;s time to get to the bottom of it - or if not to the bottom, at least deep enough that my ears start popping.
&lt;h3&gt;Threadinology&lt;/h3&gt;

&lt;p&gt;Where to start, where to start...well, let&#39;s define our terms.  Ok, here&#39;s the things I mean when I say the following, uh, things:
&lt;ul&gt;&lt;li style=&quot;margin-bottom: 6px&quot;&gt;&lt;b&gt;Threads&lt;/b&gt; are just preemptively scheduled contexts of execution that share an address space.  But you already know what threads are.  Frankly, for my purposes, they&#39;re all pretty much the same whether you&#39;re using Objective-C or C++ or Java on Mac OS X or Linux or Windows...&lt;/li&gt;
&lt;li style=&quot;margin-bottom: 6px&quot;&gt;&lt;b&gt;Threading&lt;/b&gt; means creating multiple threads.  But you often create multiple threads for simpler control flow or to get around blocking system calls, not to improve performance through true simultaneous execution.
&lt;li&gt;&lt;b&gt;Multithreading&lt;/b&gt; is the physically simultaneous execution of multiple threads for increased performance, which requires a dualie or more.  Now things get hard.
&lt;/ul&gt;

&lt;p&gt;Yeah, I know.  &amp;quot;Multithreading is hard&amp;quot; is a clich&amp;eacute;, and it bugs me, because it is not some truism describing a fundamental property of nature, but it&#39;s something &lt;i&gt;we did&lt;/i&gt;.  We made multithreading hard because we optimized so heavily for the single threaded case.

&lt;p&gt;What do I mean?  Well, processor speeds outrun memory so much that we started &lt;b&gt;guessing&lt;/b&gt; at what&#39;s in memory so the processor doesn&#39;t have to waste time checking.  &amp;quot;Guessing&amp;quot; is a loaded term; a nicer phrase might be &amp;quot;make increasingly aggressive assumptions&amp;quot; about the state of memory.  And by &amp;quot;we,&amp;quot; I mean both the compiler and the processor - both make things hard, as we&#39;ll see.  We&#39;ll figure this stuff out - but they&#39;re going to try to confuse us.  Oh well.  Right or wrong, this is the bed we&#39;ve made, and now we get to lie in it.
&lt;div style=&quot;background-color: #fff2d4; font-size: 14px; border: 1px solid #909050; width: 180px; float: right; padding: 5px; margin: 5px;&quot;&gt;
&lt;div style=&quot;font-family: Monaco, Courier, mono; margin-left: 10px;&quot;&gt;
while (1) {&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;x++;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;y++;&lt;br /&gt;
}&lt;/div&gt;&lt;br /&gt;
&lt;span style=&quot;color: #000080; font-size: 16px&quot;&gt;x should always be at least as big as y, right?  Right?&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;Blah blah.  Let&#39;s look at some code.  We have two variables, variable1 and variable2, that both start out at 0.  The writer thread will do this:

&lt;p&gt;&lt;b&gt;Writer thread&lt;/b&gt;
&lt;pre class=&quot;code&quot;&gt;
while (1) {
   variable1++;
   variable2++;
}
&lt;/pre&gt;
They both started out at zero, so therefore variable1, at every point in time, will always be the same as variable2, or larger - but never smaller.  Right?

&lt;p&gt;The reader thread will do this:

&lt;p&gt;&lt;b&gt;Reader thread&lt;/b&gt;
&lt;pre class=&quot;code&quot;&gt;
while (1) {
   local2 = variable2;
   local1 = variable1;
   if (local2 &gt; local1) {
      print(&quot;Error!&quot;);
   }
}
&lt;/pre&gt;

&lt;p&gt;That&#39;s odd - why does the reader thread load the second variable before the first?  That&#39;s the &lt;i&gt;opposite&lt;/i&gt; order from the writer thread!  But it makes sense if you think about it.

&lt;p&gt;See, it&#39;s possible that variable1 and/or variable2 will be incremented by the writer thread between the loads from the reader thread.  If variable2 gets incremented, that doesn&#39;t matter - variable2 has already been read.  If variable1 gets incremented, then that makes variable1 appear larger.  So we conclude that variable2 should never be seen as larger than variable1, in the reader thread.  If we loaded variable1 before variable2, then variable2 might be incremented after the load of variable1, and we would see variable 2 as larger.
&lt;div style=&quot;background-color: #ffdbf5; border: 1px solid #FF6bA3; padding: 5px; margin: 5px;&quot;&gt;
Analogy to the rescue.  Imagine some bratty kid playing polo while his uptight father looks on with a starched collar and monocle (which can only see one thing at a time, and not even very well, dontcha know).  The kid smacks the ball, and then gallops after it, and so on.  Now the squinting, snobby father first finds the ball, then looks around for his sproggen.  But!  If in the meantime, the kid hits it and takes off after it, Dad will find the kid ahead of where he first found the ball.  Dad doesn&#39;t realize the ball has moved, and concludes that his budding athlete is ahead of the ball, and running the wrong way!  If, however, Dad finds the kid first, and &lt;i&gt;then&lt;/i&gt; the ball, things will always appear in the right order, if not the right place.  The order of action (move ball, move kid) has to be the &lt;i&gt;opposite&lt;/i&gt; from the order of observation (find kid, find ball).&lt;/div&gt;


&lt;p&gt;&lt;h3&gt;Threadalogy&lt;/h3&gt;

&lt;p&gt;So we&#39;ve got two threads operating on two variables, and we think we know what&#39;ll happen.  Let&#39;s try it out, on my G5:

&lt;p&gt;&lt;pre class=&quot;code&quot;&gt;
&lt;span class=&quot;note&quot;&gt;unsigned variable1 = 0;&lt;/span&gt;
&lt;span class=&quot;note&quot;&gt;unsigned variable2 = 0;&lt;/span&gt;
#define ITERATIONS 50000000
void *&lt;span class=&quot;note&quot;&gt;writer&lt;/span&gt;(void *unused) {
        for (;;) {
&lt;span class=&quot;note&quot;&gt;                variable1 = variable1 + 1;
                variable2 = variable2 + 1;&lt;/span&gt;
        }
}
void *&lt;span class=&quot;note&quot;&gt;reader&lt;/span&gt;(void *unused) {
        struct timeval start, end;
        gettimeofday(&amp;start, NULL);
        unsigned i, failureCount = 0;
        for (i=0; i &lt; ITERATIONS; i++) {
&lt;span class=&quot;note&quot;&gt;                unsigned v2 = variable2;
                unsigned v1 = variable1;
                if (v2 &gt; v1) failureCount++;&lt;/span&gt;
        }
        gettimeofday(&amp;end, NULL);
        double seconds = end.tv_sec + end.tv_usec / 1000000. - start.tv_sec - start.tv_usec / 1000000.;
        printf(&quot;%u failure%s (%2.1f percent of the time) in %2.1f seconds\n&quot;,
               failureCount, failureCount == 1 ? &quot;&quot; : &quot;s&quot;,
               (100. * failureCount) / ITERATIONS, seconds);
        exit(0);
        return NULL;
}
int main(void) {
        pthread_t thread1, thread2;
        pthread_create(&amp;thread1, NULL, writer, NULL);
        pthread_create(&amp;thread2, NULL, reader, NULL);
        for (;;) sleep(1000000);
        return 0;
}
&lt;/pre&gt;
What do we get when we run this?
&lt;pre class=&quot;code&quot;&gt;
fish ) ./a.out
0 failures (0.0 percent of the time) in 0.1 seconds
&lt;/pre&gt;
&lt;div style=&quot;background-color: #fff0cb; border: 1px solid #c0c030; width: 300px; float: right; padding: 5px; margin: 5px;&quot;&gt;How do we know that the reader thread won&#39;t see a variable in some intermediate state, midway through being updated?  We have to know that these particular operations are atomic.  On PowerPC and x86 machines, 32 bit writes to &lt;i&gt;aligned&lt;/i&gt; addresses are guaranteed atomic.  Other types of memory accesses are not always atomic - in particular, 64 bit writes (say, of a double precision floating point value) on a 32 bit PowerPC are &lt;i&gt;not&lt;/i&gt; atomic.  We have to check the documentation to know.&lt;/div&gt;
&lt;h3&gt;So, we&#39;re done?&lt;/h3&gt;

&lt;p&gt;Our expectations were confirmed!  The writer thread ordered its writes so that the first variable would always be at least as big as the second, and the reader thread ordered its reads the opposite way to preserve that invariant, and everything worked as planned.

&lt;p&gt;But we might just be getting lucky, right?  I mean, if thread1 and thread2 were always scheduled on the same processor, then we wouldn&#39;t see any failures - a processor is always &lt;i&gt;self&lt;/i&gt;-consistent with how it appears to order reads and writes.  In other words, a particular processor remembers where and what it pretends to have written, so if you read from that location &lt;i&gt;with that same processor&lt;/i&gt;, you get what you expect.  It&#39;s only when you read with processor1 from the same address where processor2 wrote - or pretended to write - that you might get into trouble.

&lt;p&gt;So let&#39;s try to force thread1 and thread2 to run on separate processors.  We can do that with the utilBindThreadToCPU() function, in the CHUD framework.  That function should never go in a shipping app, but it&#39;s useful for debugging.  Here it is:

&lt;p&gt;&lt;pre class=&quot;code&quot;&gt;
void *writer(void *unused) {
        &lt;span class=&quot;note&quot;&gt;utilBindThreadToCPU(0);&lt;/span&gt;
        for (;;) {
                variable1 = variable1 + 1;
                variable2 = variable2 + 1;
        }
}
void *reader(void *unused) {
        &lt;span class=&quot;note&quot;&gt;utilBindThreadToCPU(1);&lt;/span&gt;
        struct timeval start, end;
        gettimeofday(&amp;start, NULL);
        ...
int main(void) {
        pthread_t thread1, thread2;
        &lt;span class=&quot;note&quot;&gt;chudInitialize();&lt;/span&gt;
        unsigned variable2 = 0;
        pthread_create(&amp;thread1, NULL, writer, &amp;variable2);
        pthread_create(&amp;thread2, NULL, reader, &amp;variable2);
        while (1) sleep(1000000);
        return 0;
}
&lt;/pre&gt;
To run it:
&lt;pre class=&quot;code&quot;&gt;
fish ) ./a.out
0 failures (0.0 percent of the time) in 0.1 seconds
&lt;/pre&gt;
&lt;h3&gt;NOW are we done?&lt;/h3&gt;


&lt;p&gt;Still no failures.  Hmm...  But wait - processors operate on cache lines, and variable1 and variable2 are right next to each other, so they probably share the same cache line - that is, they get brought in together and treated the same by each processor.  What if we separate them?  We&#39;ll put one on the stack and leave the other where it is.
&lt;pre class=&quot;code&quot;&gt;
unsigned variable1 = 0;
#define ITERATIONS 50000000
void *writer(&lt;span class=&quot;note&quot;&gt;unsigned *variable2&lt;/span&gt;) {
        utilBindThreadToCPU(0);
        for (;;) {
                variable1 = variable1 + 1;
                &lt;span class=&quot;note&quot;&gt;*variable2 = *variable2 + 1;&lt;/span&gt;
        }
        return NULL;
}
void *reader(&lt;span class=&quot;note&quot;&gt;unsigned *variable2&lt;/span&gt;) {
        utilBindThreadToCPU(1);
        struct timeval start, end;
        gettimeofday(&amp;start, NULL);
        unsigned i;
        unsigned failureCount = 0;
        for (i=0; i &lt; ITERATIONS; i++) {
                unsigned v2 = &lt;span class=&quot;note&quot;&gt;*variable2&lt;/span&gt;;
                unsigned v1 = variable1;
                if (v2 &gt; v1) failureCount++;
        }
        gettimeofday(&amp;end, NULL);
        double seconds = end.tv_sec + end.tv_usec / 1000000. - start.tv_sec - start.tv_usec / 1000000.;
        printf(&quot;%u failure%s (%2.1f percent of the time) in %2.1f seconds\n&quot;, failureCount, failureCount == 1 ? &quot;&quot; : &quot;s&quot;, (100. * failureCount) / ITERATIONS, seconds);
        exit(0);
        return NULL;
}
int main(void) {
        pthread_t thread1, thread2;
        &lt;span class=&quot;note&quot;&gt;unsigned variable2 = 0;&lt;/span&gt;
        chudInitialize();
        pthread_create(&amp;thread1, NULL, writer, &lt;span class=&quot;note&quot;&gt;&amp;variable2&lt;/span&gt;);
        pthread_create(&amp;thread2, NULL, reader, &lt;span class=&quot;note&quot;&gt;&amp;variable2&lt;/span&gt;);
        while (1) sleep(1000000);
        return 0;
}
&lt;/pre&gt;
So now, one variable is way high up on the stack and the other is way down low in the .data section.  Does this change anything?
&lt;pre class=&quot;code&quot;&gt;
fish ) ./a.out
0 failures (0.0 percent of the time) in 0.1 seconds
&lt;/pre&gt;
Still nothing!   I&#39;m not going to have an article after all!  Arrrghhh **BANG BANG BANG BANG**
&lt;pre class=&quot;code&quot;&gt;
fish ) ./a.out
0 failures (0.0 percent of the time) in 0.1 seconds
fish ) ./a.out
0 failures (0.0 percent of the time) in 0.1 seconds
fish ) ./a.out
0 failures (0.0 percent of the time) in 0.1 seconds
fish ) ./a.out
50000000 failures (100.0 percent of the time) in 0.1 seconds
&lt;/pre&gt;

&lt;p&gt;Hey, there it is!  Most of the time, every test passes, but that last time, every test failed.
&lt;h3&gt;Our Enemy the Compiler&lt;/h3&gt;

&lt;p&gt;The lesson here is something you already knew, but I&#39;ll state it anyways:  &lt;b&gt;Multithreading bugs are very delicate.&lt;/b&gt;  There is a real bug here, but it was masked by the fact that the kernel scheduled them on the same processor, and &lt;i&gt;then&lt;/i&gt; by the fact that the variables were too close together in memory, and once those two issues were removed, (un)lucky timing usually masked the bug &lt;i&gt;anyways&lt;/i&gt;.  In fact, if I didn&#39;t know there was a bug there, I&#39;d never have found it - and I &lt;i&gt;still&lt;/i&gt; have my doubts!

&lt;p&gt;So first of all, why would every test pass or every test fail?  If there&#39;s a subtle timing bug, we&#39;d expect most tests to pass, with a few failing - not all or nothing.  Let&#39;s look at what gcc is giving us for the reader function:
&lt;pre class=&quot;code&quot;&gt;
        lis r9,0x2fa
        ori r2,r9,61568
        mtctr r2
&lt;span style=&quot;color: #0000CC&quot;&gt;L8:
        bdnz L8&lt;/span&gt;
        lis r2,0x2fa
        ori r2,r2,61568
        mullw r2,r0,r2
&lt;/pre&gt;

&lt;p&gt;Hey!  The entire extent of that big long 50 million iteration loop has been hoisted out, leaving just the blue bits - essentially fifty million no-ops.  Instead of adding one or zero each time through the loop, it calculates the one or zero once, and then multiplies it by 50 million.

&lt;p&gt;gcc is loading from variable1 and variable2 exactly once, and comparing them exactly once, and assuming their values do not change throughout the function - which would be a fine assumption if there weren&#39;t also other threads manipulating those variables.

&lt;p&gt;This is an example of what I mentioned above, about the compiler making things difficult by optimizing so aggressively for the single threaded case.

&lt;p&gt;Well, you know the punchline - to stop gcc from optimizing aggressively, you use the volatile keyword.  So let&#39;s do that:
&lt;pre class=&quot;code&quot;&gt;
&lt;span class=&quot;note&quot;&gt;volatile&lt;/span&gt; unsigned variable1 = 0;
#define ITERATIONS 50000000
void *writer(&lt;span class=&quot;note&quot;&gt;volatile&lt;/span&gt; unsigned *variable2) {
        utilBindThreadToCPU(0);
        for (;;) {
                variable1 = variable1 + 1;
                *variable2 = *variable2 + 1;
        }
        return NULL;
}
void *reader(&lt;span class=&quot;note&quot;&gt;volatile&lt;/span&gt; unsigned *variable2) {
        utilBindThreadToCPU(1);
        struct timeval start, end;
        ...
&lt;/pre&gt;
What does this change get us?
&lt;pre class=&quot;code&quot;&gt;
fish ) ./a.out
12462711 failures (24.9 percent of the time) in 3.7 seconds
&lt;/pre&gt;

&lt;p&gt;It&#39;s much slower (expected, since volatile defeats optimizations), but more importantly, it fails intermittently instead of all or nothing.  Inspection of the assembly shows that gcc is generating the straightforward sequence of loads and stores that you&#39;d expect.
&lt;h3&gt;Our Enemy the Processor&lt;/h3&gt;

&lt;p&gt;Is this really the cross-processor synchronization issues we&#39;re trying to investigate?  We can find out by binding both threads to the same CPU:
&lt;pre class=&quot;code&quot;&gt;
void *writer(unsigned *variable2) {
        &lt;span class=&quot;note&quot;&gt;utilBindThreadToCPU(0);&lt;/span&gt;
        ...
void *reader(unsigned *variable2) {
        &lt;span class=&quot;note&quot;&gt;utilBindThreadToCPU(0);&lt;/span&gt;
        ...
&lt;/pre&gt;
&lt;pre class=&quot;code&quot;&gt;
fish ) ./a.out
0 failures (0.0 percent of the time) in 0.4 seconds
&lt;/pre&gt;


&lt;p&gt;The tests pass all the time - this really is a cross-processor issue.

&lt;p&gt;So somehow variable2 is becoming larger than variable1 even though variable1 is always incremented first.  How&#39;s that possible?  It&#39;s possible that the writer thread, on processor 0, is writing in the wrong order - it&#39;s writing variable2 before variable1 even though we explicitly say to write variable1 first.  It&#39;s also possible that the reader thread, on processor 1, is reading variable1 before variable 2, even though we tell it to do things in the opposite order.  In other words, the processors could be reading and writing those variables in any order they feel like instead of the order we tell them to.
&lt;div style=&quot;background-color: #ffdeb8; border: 1px solid #303030; width: 440px; float: right; padding: 5px; margin: 5px;&quot;&gt;
&lt;h3&gt;Pop and Lock?&lt;/h3&gt;

&lt;p&gt;What&#39;s the usual response to cross-processor synchronization issues like this?  A mutex!  Let&#39;s try it.
&lt;pre class=&quot;code&quot;&gt;
fish ) ./a.out
0 failures (0.0 percent of the time) in 479.5 seconds
&lt;/pre&gt;

&lt;p&gt;It made the tests pass, all right - but it was 130 times slower!  A spinlock does substantially better, at 20 seconds, but that&#39;s still 440% worse than no locking - and spinlocks won&#39;t scale.  Surely we can do better.
&lt;/div&gt;
&lt;h3&gt;Even the kitchen&lt;/h3&gt;

&lt;p&gt;Our problem is this: our processors are doing things in a different order than we tell them to, and not informing each other.  Each processor is only keeping track of its own shenanigans!  For shame!  We know of two super-horrible ways to fix this: force both threads onto the same CPU, which is a very bad idea, or to use a lock, which is a very slow idea.  So what&#39;s the right way to make this work?

&lt;p&gt;What we really want is a way to turn off the reordering for that particular sequence of loads and stores.  They don&#39;t call it &amp;quot;turn off reordering&amp;quot;, of course, because that might imply that reordering is bad.  So instead they call it just plain &amp;quot;ordering&amp;quot;.  We want to order the reads and writes.  Ask and ye shall receive - the mechanism for that is called a &amp;quot;memory barrier&amp;quot;.

&lt;p&gt;And boy, does the PowerPC have them.  I count at least three: sync, lwsync, and the hilariously named eieio.  Here&#39;s what they do:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;sync&lt;/b&gt; is the sledgehammer of the bunch - it orders all reads and writes, no matter what.  It works, but it&#39;s slow.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;lwsync&lt;/b&gt; (for &amp;quot;lightweight sync&amp;quot;) is the newest addition.  It&#39;s limited to plain ol&#39; system memory, but it&#39;s also faster than sync.
&lt;li&gt;&lt;b&gt;eieio&lt;/b&gt; (&amp;quot;Enforce In-Order execution of I/O&amp;quot;) is weird - it orders writes to &amp;quot;device&amp;quot; memory (like a memory mapped peripheral) and regular ol&#39; system memory, but each separately.  We only care about system memory, and IBM says not to use eieio just for that.  Nevertheless, it should still order our reads and writes like we want.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because we&#39;re not working with devices, lwsync is what we&#39;re after.  Processor 0 is writing variable2 after variable1, so we&#39;ll insert a memory barrier to prevent that:
&lt;div style=&quot;background-color: #d0ffdd; border: 1px solid #309030; width: 310px; float: right; padding: 5px; margin: 5px;&quot;&gt;Do we need a memory barrier after the write to variable2 as well?  No - that would guard against the possibility of the &lt;i&gt;next&lt;/i&gt; increment landing on variable1 &lt;i&gt;before&lt;/i&gt; the &lt;i&gt;previous&lt;/i&gt; increment hits variable2.  But the goal is to make sure that variable1 is larger than variable2, so it&#39;s OK if that happens.&lt;/div&gt;
&lt;pre class=&quot;code&quot;&gt;
volatile unsigned variable1 = 0;
&lt;span class=&quot;note&quot;&gt;#define barrier() __asm__ volatile (&quot;lwsync&quot;)&lt;/span&gt;
#define ITERATIONS 50000000
void *writer(volatile unsigned *variable2) {
        utilBindThreadToCPU(0);
        for (;;) {
                variable1 = variable1 + 1;
                &lt;span class=&quot;note&quot;&gt;barrier();&lt;/span&gt;
                *variable2 = *variable2 + 1;
        }
        return NULL;
}
&lt;/pre&gt;

&lt;p&gt;So!  Let&#39;s run it!
&lt;pre class=&quot;code&quot;&gt;
fish ) ./a.out
260 failures (0.0 percent of the time) in 0.9 seconds
&lt;/pre&gt;

&lt;p&gt;So we reduced the failure count from 12462711 to 260.  Much better, but still not perfect.  Why are we still failing at times?  The answer, of course, is that just because processor 0 writes in the order we want is no guarantee that processor1 will read in the desired order.  Processor 1 may issue the reads in the wrong order, and processor 0 would write in between those two reads.  We need a memory barrier in the reader thread, to force the reads into the right order as well:
&lt;pre class=&quot;code&quot;&gt;
void *reader(volatile unsigned *variable2) {
        struct timeval start, end;
        utilBindThreadToCPU(1);
        gettimeofday(&amp;start, NULL);
        unsigned i;
        unsigned failureCount = 0;
        for (i=0; i &lt; ITERATIONS; i++) {
                unsigned v2 = *variable2;
                &lt;span class=&quot;note&quot;&gt;barrier();&lt;/span&gt;
                unsigned v1 = variable1;
                if (v2 &gt; v1) failureCount++;
        }
        gettimeofday(&amp;end, NULL);
        double seconds = end.tv_sec + end.tv_usec / 1000000. - start.tv_sec - start.tv_usec / 1000000.;
        printf(&quot;%u failure%s (%2.1f percent of the time) in %2.1f seconds\n&quot;,
               failureCount, failureCount == 1 ? &quot;&quot; : &quot;s&quot;,
               (100. * failureCount) / ITERATIONS, seconds);
        exit(0);
        return NULL;
}
&lt;/pre&gt;

&lt;pre class=&quot;code&quot;&gt;
fish ) ./a.out
0 failures (0.0 percent of the time) in 4.2 seconds
&lt;/pre&gt;

&lt;p&gt;That did it!

&lt;p&gt;The lesson here is that if you care about the order of reads or writes by one thread, it&#39;s because you care about the order of writes or reads by &lt;i&gt;another&lt;/i&gt; thread.  &lt;i&gt;Both&lt;/i&gt; threads need a memory barrier.  &lt;b&gt;Memory barriers always come in pairs&lt;/b&gt;, or triplets or more.  (Of course, if both threads are in the same function, there may only be one memory barrier that appears in your code - as long as both threads execute it.)

&lt;p&gt;This should not come as a surprise: locks have the same behavior.  If only one thread ever locks, it&#39;s not a very useful lock.
&lt;h3&gt;31 Flavors&lt;/h3&gt;

&lt;p&gt;What&#39;s that?  You noticed that the PowerPC comes with three different kinds of memory barriers.  Right - as reads and writes get scheduled increasingly out of order, the more expensive it becomes to order them - so the PowerPC allows you to request various less expensive partial orderings, for performance.  Processors that  schedule I/O out of order more aggressively offer even more barrier flavors.  At the extreme end is the DEC Alpha, that sports read barriers with device memory ordering, read barriers without, write barriers with, write barriers without, page table barriers, and various birds in fruit trees.  The Alpha&#39;s memory model guarantees so little that it is said to define the Linux kernel memory model - that is, the set of available barriers in the kernel source match the Alpha&#39;s instruction set.  (Of course, many of them get compiled out when targetting a different processor.)
&lt;div style=&quot;background-color: #ffdbf5; font-size: 14px; border: 1px solid #ff6ba3; width: 240px; float: right; padding: 5px; margin: 5px;&quot;&gt;Actually - and here my understanding is especially thin - while x86 is strongly ordered in general, I believe that Intel has managed to slip some weakly ordered operations in sideways, through the SIMD unit.  These are referred to as &amp;quot;streaming&amp;quot; or &amp;quot;nontemporal&amp;quot; instructions.  And when writing to specially tagged &amp;quot;write combining&amp;quot; memory, like, say, memory mapped VRAM, the rules are different still.&lt;/div&gt;


&lt;p&gt;And on the other end, we have strongly ordered memory models that do very little reordering, like the - here it comes - x86.  No matter how many times I run that code, even on a double-dualie Intel Mac Pro, I never saw any failures.  Why not?  My understanding (and here it grows fuzzy) is that early multiprocessing setups were strongly ordered because modern reordering tricks weren&#39;t that useful - memory was still pretty fast, y&#39;know, relatively speaking, so there wasn&#39;t much win to be had.  So developers blithely assumed the good times would never end, and we&#39;ve been wearing the backwards compatibility shackles ever since.

&lt;p&gt;But that doesn&#39;t answer the question of why x86_64, y&#39;know, the 64 bit x86 implementation in the Core 2s and all, isn&#39;t more weakly ordered - or at least, reserve the &lt;i&gt;right&lt;/i&gt; to be weaker.  That&#39;s what IA64 - remember Itanium? - did: early models were strongly ordered, but the official memory model was weak, for future proofing.  Why didn&#39;t AMD follow suit with x86_64?  My only guess (emphasis on &lt;i&gt;guess&lt;/i&gt;) is that it was a way of jockeying for position against Itanium, when the 64 bit future for the x86 was still fuzzy.  AMD&#39;s strongly ordered memory model means better compatibility and less hair-pulling when porting x86 software to 64 bit, and that made x86_64 more attractive compared to the Itanium. A pity, at least for Apple, since of course all of Apple&#39;s software runs on the weak PowerPC - there&#39;s no compatibility benefit to be had.  So it goes.  Is my theory right?
&lt;h3&gt;Makin&#39; a lock, checkin&#39; it twice&lt;/h3&gt;

&lt;p&gt;Ok!  I think we&#39;re ready to take on that perennial bugaboo of Java programmers - the double checked lock.  How does it go again?  Let&#39;s see it in Objective-C:
&lt;pre class=&quot;code&quot;&gt;
+ getSharedObject {
    static id sharedObject;
    if (! sharedObject) {
        LOCK;
        if (! sharedObject) {
            sharedObject = [[self alloc] init];
        }
        UNLOCK;
    }
    return sharedObject;
}
&lt;/pre&gt;

&lt;p&gt;What&#39;s the theory?  We want to create a single shared object, exactly once, while preventing conflict between multiple threads.  The hope is that we can do a quick test to avoid taking the expensive lock.  If the static variable is set, which it will be most of the time, we can return the object immediately, without taking the lock.
&lt;div style=&quot;background-color: #e4e2ff; border: 1px solid #b297ff; width: 240px; float: right; padding: 5px; margin: 5px;&quot;&gt;Sometimes memory barriers are needed to guard against past or future reads and writes that occur in, say, the function that&#39;s &lt;i&gt;calling&lt;/i&gt; your function.  Reordering can cross function and library boundaries!&lt;/div&gt;

&lt;p&gt;This sounds good, but of course you already know it&#39;s not.  Why not?  Well, if you&#39;re creating this object, you&#39;re probably initializing it in some way - at the very least, you&#39;re setting its isa (class) pointer.  And then you&#39;re turning around and writing it back to the sharedObject variable.  But these can happen in any order, as seen from another processor - so when the getSharedObject method is called from some other processor, it can see the sharedObject variable as set, and happily return the object &lt;i&gt;before its class pointer is even valid&lt;/i&gt;.  Cripes.

&lt;p&gt;But now you know we have the know-how to make this work, no?  How?  The problem is that we need to order the writes within the alloc and init methods relative to the write to the sharedObject variable - the alloc and init writes must come first, the write to sharedObject last.  So we store the object into a temporary local variable, insert a memory barrier, and then copy from the temporary to the shared object.  This time, I&#39;ll use Apple&#39;s portable memory barrier function:
&lt;pre class=&quot;code&quot;&gt;
+ getSharedObject {
    static id sharedObject;
    if (! sharedObject) {
        LOCK;
        if (! sharedObject) {
            &lt;span class=&quot;note&quot;&gt;id temp&lt;/span&gt; = [[self alloc] init];
            &lt;span class=&quot;note&quot;&gt;OSMemoryBarrier();&lt;/span&gt;
            sharedObject = &lt;span class=&quot;note&quot;&gt;temp&lt;/span&gt;;
        }
        UNLOCK;
    }
    return sharedObject;
}
&lt;/pre&gt;

&lt;p&gt;There!  Now we&#39;re guaranteed that the initializing thread really will write to sharedObject after the object is fully initialized.  All done.

&lt;p&gt;Hmm?  Oh, nuts!  I forgot my rule - write barriers come in &lt;i&gt;pairs&lt;/i&gt;.  If thread A initializes the object, it goes through a memory barrier, but if thread B then comes along, it will see the object and return it without any barrier at all.  Our rule tells us that something is wrong, but what?  Why&#39;s that bad?

&lt;p&gt;Well, thread B&#39;s going to &lt;i&gt;do&lt;/i&gt; something with the shared object, like send it a message, and that requires at the very least accessing the isa class pointer.  But we know the isa pointer really was written to memory first, before the sharedObject pointer, and thread B got ahold of the sharedObject pointer, so logically, the isa pointer should be written, right?  The laws of physics require it!  Isn&#39;t that, like, you put an object in a box and hand it to me, and then I open the box to find that you haven&#39;t put something into it yet!  It&#39;s a temporal paradox!

&lt;p&gt;The answer is that, yes, amazingly, dependent reads like that can be performed seemingly out of order, but not on any processors that Apple ships.  I&#39;ve only heard of it happening in the - you guessed it - the Alpha.  Crazy, huh?

&lt;p&gt;So where should the memory barrier go?  The goal is to order future reads - reads that occur after this sharedObject function returns - against the read from the sharedObject variable.  So it&#39;s gotta go here:
&lt;pre class=&quot;code&quot;&gt;
+ getSharedObject {
    static id sharedObject;
    if (! sharedObject) {
        LOCK;
        if (! sharedObject) {
            id temp = [[self alloc] init];
            OSMemoryBarrier();
            sharedObject = temp;
        }
        UNLOCK;
    }
    &lt;span class=&quot;note&quot;&gt;OSMemoryBarrier();&lt;/span&gt;
    return sharedObject;
}
&lt;/pre&gt;

&lt;p&gt;Now, this differs slightly from the &lt;a href=&quot;http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html&quot;&gt;usual solution&lt;/a&gt;, which stores the static variable into a temporary in all cases.  However, for the life of me I can&#39;t figure out why that&#39;s necessary - the placement of the second memory barrier above seems correct to me, assuming the compiler doesn&#39;t hoist the final read of sharedObject above the memory barrier (which it shouldn&#39;t).  If I screwed it up, let me know how, please!
&lt;h3&gt;Do we want it?&lt;/h3&gt;

&lt;p&gt;That &lt;i&gt;second&lt;/i&gt; memory barrier makes the double checked lock correct - but is it wise?  As we discussed, it&#39;s not technically necessary on any machine you or I are likely to encounter.   And, after all, it does incur a real performance hit if we leave it in.  What to do?

&lt;p&gt;The Linux kernel defines a set of fine-grained barrier macros that get compiled in or out appropriately (we would want a &amp;quot;data dependency barrier&amp;quot; in that case).  You could go that route, but my suggestion is to just leave a semi-standard comment to help you locate these places in the future.  That will help future-proof your code, but more importantly, it forces you to reason carefully about the threading issues, and to record your thoughts.  You&#39;re more likely to get it right.
&lt;pre class=&quot;code&quot;&gt;
+ getSharedObject {
    static id sharedObject;
    if (! sharedObject) {
        LOCK;
        if (! sharedObject) {
            id temp = [[self alloc] init];
            OSMemoryBarrier();
            sharedObject = temp;
        }
        UNLOCK;
    }
    &lt;span class=&quot;note&quot;&gt;/* data dependency memory barrier here */&lt;/span&gt;
    return sharedObject;
}
&lt;/pre&gt;
&lt;div style=&quot;background-color: #ffdbf5; font-size: 14px; border: 1px solid #ff6ba3; width: 220px; float: right; padding: 5px; margin: 5px;&quot;&gt;
&lt;b&gt;Wrapping up!&lt;/b&gt;&lt;br /&gt;  Skimmers skip to here.
&lt;/div&gt;

&lt;h3&gt;Now are we done?&lt;/h3&gt;

&lt;p&gt;I think so, Mr. Subheading.  Let&#39;s see if we can summarize all this:
&lt;div style=&quot;background-color: #A0A0B0; border: 1px solid #404040; text-align: center; width: 380px; float: right; padding: 5px; margin: 5px; margin-left: 15px&quot;&gt;
&lt;img src=&quot;http://ridiculousfish.com/images/barrier/stuck.jpg&quot; style=&quot;margin-bottom: 5px; border: 1px solid #202020;&quot;&gt;&lt;br /&gt;
Locks are like tanks - powerful, slow, safe, expensive, and prone to getting you stuck.
&lt;/div&gt;
&lt;ul&gt;
&lt;li class=&quot;tall&quot;&gt;The compiler and the processor both conspire to &lt;b&gt;defeat your threads&lt;/b&gt; by moving your code around!  Be warned and wary!  You will have to do battle with both.&lt;/li&gt;
&lt;li class=&quot;tall&quot;&gt;Even so, it is very easy to mask serious threading bugs.  We had to work hard, even in highly contrived circumstances, to get our bug to poke its head out even occasionally.&lt;/li&gt;
&lt;li class=&quot;tall&quot;&gt;Ergo, &lt;b&gt;testing probably won&#39;t catch&lt;/b&gt; these types of bugs.  That makes it more important to get it right the first time.&lt;/li&gt;
&lt;li class=&quot;tall&quot;&gt;Locks are the heavy tanks of threading tools - powerful, but slow and expensive, and if you&#39;re not careful, you&#39;ll get yourself stuck in a deadlock.  &lt;/li&gt;
&lt;li class=&quot;tall&quot;&gt;Memory barriers are a faster, non-blocking, deadlock free alternative to locks. They take more thought, and aren&#39;t always applicable, but your code&#39;ll be faster and scale better.&lt;/li&gt;
&lt;li class=&quot;tall&quot;&gt;Memory barriers &lt;b&gt;always come in logical pairs&lt;/b&gt; or more.  Understanding where the second barrier has to go will help you reason about your code, even if that particular architecture doesn&#39;t require a second barrier.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Further reading&lt;/h3&gt;
Seriously?  You want to know more?  Ok - the best technical source I know of is actually a document called &quot;memory-barriers.txt&quot; that comes with the Linux kernel source.  You can get it &lt;a href=&quot;http://www.gelato.unsw.edu.au/lxr/source/Documentation/memory-barriers.txt&quot;&gt;here&lt;/a&gt;.  Thanks to my co-worker for finding it and directing me to it.
&lt;h3&gt;Things I wanna know&lt;/h3&gt;
I&#39;m still scratching my head about some things.  Maybe you can help me out.
&lt;ul&gt;
&lt;li&gt;Why is x86_64 strongly ordered?  Is my theory about gaining a competitive edge over Itanium reasonable?&lt;/li&gt;
&lt;li&gt;Is my double checked lock right, even though it doesn&#39;t use a temporary variable in the usual place?&lt;/li&gt;
&lt;li&gt;What&#39;s up with the so-called &amp;quot;nontemporal&amp;quot; streaming instructions on x86?&lt;/li&gt;
&lt;/ul&gt;
Leave a comment if you know!  Thanks!</content>
  </entry>
  
  <entry>
    <title>Logos</title>
    <link href="http://ridiculousfish.com/blog/posts/logos.html"/>
    <updated>2006-12-11T00:00:00-08:00</updated>
    <id>http://ridiculousfish.com/posts/logos</id>
    <content type="html">&lt;style type=&quot;text/css&quot;&gt;
td.ahleft, td.ahright {
	padding-top: 10px;
	padding-bottom: 10px;
	padding-left: 10px;
	padding-right: 10px;
}
td.ahleft {
	text-align: right;
}
td.ahright {
	padding-top: 20px;
	font-size: 15pt;
	padding-left: 50px;
	line-height: 30px;
	text-align: left;
}
tr.aheven {
	background-color: #DDEEFF;
}
tr.ahodd {
	background-color: white;
}
img.ahproduct {
	vertical-align: middle;
}
&lt;/style&gt;
&lt;div style=&quot;text-align: center&quot;&gt;
&lt;form method=&quot;post&quot; action=&quot;/kay/results.php&quot;&gt;
&lt;table cellspacing=0 style=&quot;border-style: groove; margin-left: auto; margin-right: auto;&quot;&gt;
&lt;tr class=&quot;aheven&quot;&gt;
&lt;td class=&quot;ahleft&quot;&gt;&lt;img class=&quot;product&quot; src=&quot;/blog/images/hair/GreatClips.png&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;ahright&quot;&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[0]&quot; value=&quot;0&quot;&gt;Hair care!&lt;br /&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[0]&quot; value=&quot;1&quot;&gt;Digital audio!&lt;/td&gt;&lt;/tr&gt;
&lt;tr class=&quot;ahodd&quot;&gt;
&lt;td class=&quot;ahleft&quot;&gt;&lt;img class=&quot;product&quot; src=&quot;/blog/images/hair/Logics.png&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;ahright&quot;&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[1]&quot; value=&quot;0&quot;&gt;Hair care!&lt;br /&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[1]&quot; value=&quot;1&quot;&gt;Digital audio!&lt;/td&gt;&lt;/tr&gt;
&lt;tr class=&quot;aheven&quot;&gt;
&lt;td class=&quot;ahleft&quot;&gt;&lt;img class=&quot;product&quot; src=&quot;/blog/images/hair/LogicPro.png&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;ahright&quot;&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[2]&quot; value=&quot;0&quot;&gt;Hair care!&lt;br /&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[2]&quot; value=&quot;1&quot;&gt;Digital audio!&lt;/td&gt;&lt;/tr&gt;
&lt;tr class=&quot;ahodd&quot;&gt;
&lt;td class=&quot;ahleft&quot;&gt;&lt;img class=&quot;product&quot; src=&quot;/blog/images/hair/protools.jpg&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;ahright&quot;&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[3]&quot; value=&quot;0&quot;&gt;Hair care!&lt;br /&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[3]&quot; value=&quot;1&quot;&gt;Digital audio!&lt;/td&gt;&lt;/tr&gt;
&lt;tr class=&quot;aheven&quot;&gt;
&lt;td class=&quot;ahleft&quot;&gt;&lt;img class=&quot;product&quot; src=&quot;/blog/images/hair/Biolage.png&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;ahright&quot;&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[4]&quot; value=&quot;0&quot;&gt;Hair care!&lt;br /&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[4]&quot; value=&quot;1&quot;&gt;Digital audio!&lt;/td&gt;&lt;/tr&gt;
&lt;tr class=&quot;ahodd&quot;&gt;
&lt;td class=&quot;ahleft&quot;&gt;&lt;img class=&quot;product&quot; src=&quot;/blog/images/hair/Amplify.gif&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;ahright&quot;&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[5]&quot; value=&quot;0&quot;&gt;Hair care!&lt;br /&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[5]&quot; value=&quot;1&quot;&gt;Digital audio!&lt;/td&gt;&lt;/tr&gt;
&lt;tr class=&quot;aheven&quot;&gt;
&lt;td class=&quot;ahleft&quot;&gt;&lt;img class=&quot;product&quot; src=&quot;/blog/images/hair/live.png&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;ahright&quot;&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[6]&quot; value=&quot;0&quot;&gt;Hair care!&lt;br /&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[6]&quot; value=&quot;1&quot;&gt;Digital audio!&lt;/td&gt;&lt;/tr&gt;
&lt;tr class=&quot;ahodd&quot;&gt;
&lt;td class=&quot;ahleft&quot;&gt;&lt;img class=&quot;product&quot; src=&quot;/blog/images/hair/matrix.png&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;ahright&quot;&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[7]&quot; value=&quot;0&quot;&gt;Hair care!&lt;br /&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[7]&quot; value=&quot;1&quot;&gt;Digital audio!&lt;/td&gt;&lt;/tr&gt;
&lt;tr class=&quot;aheven&quot;&gt;
&lt;td class=&quot;ahleft&quot;&gt;&lt;img class=&quot;product&quot; src=&quot;/blog/images/hair/bias.png&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;ahright&quot;&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[8]&quot; value=&quot;0&quot;&gt;Hair care!&lt;br /&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[8]&quot; value=&quot;1&quot;&gt;Digital audio!&lt;/td&gt;&lt;/tr&gt;
&lt;tr class=&quot;ahodd&quot;&gt;
&lt;td class=&quot;ahleft&quot;&gt;&lt;img class=&quot;product&quot; src=&quot;/blog/images/hair/ashampoo.gif&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;ahright&quot;&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[9]&quot; value=&quot;0&quot;&gt;Hair care!&lt;br /&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[9]&quot; value=&quot;1&quot;&gt;Digital audio!&lt;/td&gt;&lt;/tr&gt;
&lt;tr class=&quot;aheven&quot;&gt;
&lt;td class=&quot;ahleft&quot;&gt;&lt;img class=&quot;product&quot; src=&quot;/blog/images/hair/waves.gif&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;ahright&quot;&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[10]&quot; value=&quot;0&quot;&gt;Hair care!&lt;br /&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[10]&quot; value=&quot;1&quot;&gt;Digital audio!&lt;/td&gt;&lt;/tr&gt;
&lt;tr class=&quot;ahodd&quot;&gt;
&lt;td class=&quot;ahleft&quot;&gt;&lt;img class=&quot;product&quot; src=&quot;/blog/images/hair/nexxus.png&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;ahright&quot;&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[11]&quot; value=&quot;0&quot;&gt;Hair care!&lt;br /&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[11]&quot; value=&quot;1&quot;&gt;Digital audio!&lt;/td&gt;&lt;/tr&gt;
&lt;tr class=&quot;aheven&quot;&gt;
&lt;td class=&quot;ahleft&quot;&gt;&lt;img class=&quot;product&quot; src=&quot;/blog/images/hair/pureology.png&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;ahright&quot;&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[12]&quot; value=&quot;0&quot;&gt;Hair care!&lt;br /&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[12]&quot; value=&quot;1&quot;&gt;Digital audio!&lt;/td&gt;&lt;/tr&gt;
&lt;tr class=&quot;ahodd&quot;&gt;
&lt;td class=&quot;ahleft&quot;&gt;&lt;img class=&quot;product&quot; src=&quot;/blog/images/hair/sonalksis.png&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;ahright&quot;&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[13]&quot; value=&quot;0&quot;&gt;Hair care!&lt;br /&gt;&lt;input type=&quot;radio&quot; name=&quot;answers[13]&quot; value=&quot;1&quot;&gt;Digital audio!&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;input type=&quot;submit&quot; value=&quot;How did I do?&quot;&gt;
&lt;/form&gt;
&lt;/div&gt;</content>
  </entry>
  
  <entry>
    <title>0xF4EE</title>
    <link href="http://ridiculousfish.com/blog/posts/0xf4ee.html"/>
    <updated>2006-11-24T00:00:00-08:00</updated>
    <id>http://ridiculousfish.com/posts/0xf4ee</id>
    <content type="html">&lt;a href=&quot;/hexfiend/&quot;&gt;Hex Fiend 1.1.1&lt;/a&gt; is now available open source under a BSD-style license.  Hex Fiend is my fast and clever &lt;strike&gt;free&lt;/strike&gt; open source hex editor for Mac OS X.

&lt;p&gt;I hope you find Hex Fiend useful for whatever purpose, but if you are interested in contributing changes on an ongoing basis, I&#39;ll be happy to grant Subversion commit privileges to some interested developers who submit quality patches.  There is a wiki aimed at developers accessible from the page, but daily builds, mailing lists, or discussion boards are also a possibility.  You can contact me at the e-mail address at the bottom of the &lt;a href=&quot;/hexfiend/&quot;&gt;Hex Fiend page&lt;/a&gt; if you are interested in any of these.

&lt;p&gt;Version 1.1.1 has some important bug fixes (see the &lt;a href=&quot;/hexfiend/docs/ReleaseNotes_111.txt&quot;&gt;release notes&lt;/a&gt;), so you should upgrade even if you are not interested in the source.</content>
  </entry>
  
  <entry>
    <title>Bridge</title>
    <link href="http://ridiculousfish.com/blog/posts/bridge.html"/>
    <updated>2006-09-09T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/bridge</id>
    <content type="html">&lt;h3&gt;A Brief History&lt;/h3&gt;

&lt;p&gt;Mac OS 9 and NEXTSTEP were like two icy comets wandering aimlessly in space.  Neither was really going anywhere in particular.  And then, BANG!  They collide, stick wetly together, spinning wildly!  Thus was born Mac OS X - or so the legend goes.

&lt;p&gt;How do you take these two comets, err, operating systems, and make a unified OS out of them?  On the one hand, you have the procedural classic Macintosh Toolbox, and on the other you have object oriented OPENSTEP, as different as can be - and you&#39;re tasked with integrating them, or at least getting &lt;i&gt;some&lt;/i&gt; level of interoperability.  What a headache!

&lt;p&gt;You might start by finding common ground - but there isn&#39;t much common ground, so you have to invent some, and you call it (well, part of it) CoreFoundation.   Uh, let&#39;s abbreviate CoreFoundation &amp;quot;CF&amp;quot; from now on.  CoreFoundation will &amp;quot;sit below&amp;quot; both of these APIs, and provide functions for strings and dates and other fundamental stuff, and the shared use of CF will serve as a sort of least common demoninator, not only for these two APIs but also for future APIs.  These two APIs will be able to talk to each other, and to future APIs, with CF types.

&lt;p&gt;Ok, so the plan is to make these two APIs, the Mac Toolbox and OPENSTEP, use CF.  Adding CF support to the Mac Toolbox is not that big a deal, because the Mac Toolbox APIs have to change &lt;i&gt;anyways,&lt;/i&gt; to become Carbon.  But the OPENSTEP APIs don&#39;t have the same sort of problems, and shouldn&#39;t have to change much to become Cocoa.

&lt;p&gt;Like, for example, the Toolbox uses Pascal strings, and those have unfortunate length limitations and ignorance of Unicode, so we want to get rid of them - so we might as well use the interoperable replacement as the native string type in Carbon.  But OPENSTEP&#39;s NSString is already pretty nice.  It would be a shame to have to make CFString replacements for &lt;i&gt;all&lt;/i&gt; those Cocoa APIs that take and return NSStrings, just for interoperability with Carbon.
&lt;h3&gt;Rough Draft&lt;/h3&gt;

&lt;p&gt;So the solution is obvious, right?  Just make NSString methods to convert to and from CFStrings.
&lt;pre class=&quot;code&quot;&gt;
&lt;span style=&#39;color: #8e1893&#39;&gt;@interface NSString&lt;/span&gt; (CFStringMethods)
- (&lt;span style=&#39;color: #1e1893&#39;&gt;CFStringRef&lt;/span&gt;)getCFString;
+ (&lt;span style=&#39;color: #1e1893&#39;&gt;NSString&lt;/span&gt; *)stringFromCFString:(&lt;span style=&#39;color: #1e1893&#39;&gt;CFStringRef&lt;/span&gt;)stringRef;
&lt;span style=&#39;color: #8e1893&#39;&gt;@end&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;So whenever you want to talk to Carbon, you get a &lt;span class=&quot;inline_code&quot;&gt;CFStringRef&lt;/span&gt; from your &lt;span class=&quot;inline_code&quot;&gt;NSString&lt;/span&gt;, and whenever you get a &lt;span class=&quot;inline_code&quot;&gt;CFStringRef&lt;/span&gt; back from Carbon, you make an &lt;span class=&quot;inline_code&quot;&gt;NSString&lt;/span&gt; out of it.  Simple!  But this isn&#39;t what Apple did.
&lt;h3&gt;Second Revision&lt;/h3&gt;
&amp;quot;Hey,&amp;quot; you say.  Some of you say.  &amp;quot;I know what Apple did.  I&#39;m not so easily fooled!  Check out this code:&amp;quot;
&lt;pre class=&quot;code&quot;&gt;
	&lt;span style=&#39;color: #683821&#39;&gt;#include &amp;lt;Foundation/NSString.h&amp;gt;&lt;/span&gt;
	&lt;span style=&#39;color: #760f50&#39;&gt;int&lt;/span&gt; main(&lt;span style=&#39;color: #760f50&#39;&gt;void&lt;/span&gt;) {
		NSLog(NSStringFromClass([&lt;span style=&#39;color: #891315&#39;&gt;@&quot;Some String&quot;&lt;/span&gt; class]));
		&lt;span style=&#39;color: #760f50&#39;&gt;return&lt;/span&gt; &lt;span style=&#39;color: #0000ff&#39;&gt;0&lt;/span&gt;&lt;span style=&#39;color: #000000&#39;&gt;;&lt;/span&gt;
	}
&lt;/pre&gt;
&amp;quot;What does that output?  &lt;span class=&quot;inline_code&quot;&gt;NSCFString&lt;/span&gt;.  &lt;span class=&quot;inline_code&quot;&gt;NS&lt;span style=&quot;font-weight: bold; font-size: larger&quot;&gt;CF&lt;/span&gt;String&lt;/span&gt;.  See?  NSStrings must be really CFStrings under the hood!  And you can do that because NSString is a class cluster - it&#39;s an abstract interface.  So that&#39;s how you achieve interoperability: you implement NSStrings with CFStrings (but preserve the NSString API) and then all NSStrings really *are* CFStrings.  There&#39;s no conversion necessary because they&#39;re the same thing.

&lt;p&gt;&amp;quot;That&#39;s how &lt;a href=&quot;http://developer.apple.com/documentation/Cocoa/Conceptual/CarbonCocoaDoc/Articles/DataTypes.html&quot;&gt;toll free bridging&lt;/a&gt; works!&amp;quot;

&lt;p&gt;But hang on a minute.  You just said yourself that NSString is an abstract interface - that means that some crazy developer can make his or her own own subclass of NSString, and implement its methods in whatever wacky way, and it&#39;s supposed to just work.  But then it wouldn&#39;t be using CFStrings!  It would be using some other crazy stuff.  So when a Cocoa API gets a string and wants to do something CF-ish with it, the API would have no way of knowing if the string was toll-free bridged - that is, if it was really a CFString or a, y&#39;know, &lt;span class=&quot;inline_code&quot;&gt;FishsWackyString&lt;/span&gt;, without &lt;a href=&quot;http://foldoc.org/?Liskov+substitution+principle&quot;&gt;checking its class&lt;/a&gt;, and then it would have to convert it...blech!
&lt;h3&gt;Final Draft&lt;/h3&gt;

&lt;p&gt;So that&#39;s a problem: Apple wants to toll free bridge - to be able to use &lt;span class=&quot;inline_code&quot;&gt;NSStrings&lt;/span&gt; as &lt;span class=&quot;inline_code&quot;&gt;CFStrings&lt;/span&gt; without conversion.  But to do that, Apple also needs to support wacky &lt;span class=&quot;inline_code&quot;&gt;NSString&lt;/span&gt; subclasses (that don&#39;t use &lt;span class=&quot;inline_code&quot;&gt;CFStrings&lt;/span&gt; at all) in the CFString API.  That means making a C API that knows about Objective-C objects.

&lt;p&gt;A C API that handles Objective-C objects?  That&#39;s some deep deep voodoo, man.  But we have it and it works, right?  We can just cast &lt;span class=&quot;inline_code&quot;&gt;CFStringRef&lt;/span&gt;s to &lt;span class=&quot;inline_code&quot;&gt;NSString&lt;/span&gt;s, and vice versa, and for once in our lives we get to feel smug and superior, instead of stupid, when the compiler warns about mistmatched pointer types.  &amp;quot;Look, gcc, I know it says CFStringRef, but just try it with that NSString.  Trust me.&amp;quot;  It&#39;s great!  Right?

&lt;p&gt;But how does it work?  We could check, if only CoreFoundation were open source!

&lt;p&gt;...

&lt;p&gt;&lt;a href=&quot;http://www.opensource.apple.com/darwinsource/10.4.7.x86/CF-368.27/&quot;&gt;Oh, right.&lt;/a&gt;  So let&#39;s look at the &lt;span class=&quot;inline_code&quot;&gt;&lt;a href=&quot;http://www.opensource.apple.com/darwinsource/10.4.7.x86/CF-368.27/String.subproj/CFString.c&quot;&gt;CFStringGetLength()&lt;/a&gt;&lt;/span&gt; function and see what happens if you give it a weird string.
&lt;pre class=&quot;code&quot;&gt;
	CFIndex CFStringGetLength(CFStringRef str) {
	    CF_OBJC_FUNCDISPATCH0(__kCFStringTypeID, CFIndex, str, &lt;span style=&#39;color: #891315&#39;&gt;&quot;length&quot;&lt;/span&gt;);
	    __CFAssertIsString(str);
	    &lt;span style=&#39;color: #760f50&#39;&gt;return&lt;/span&gt; __CFStrLength(str);
	}
&lt;/pre&gt;
Any ideas where the Objective-C voodoo is happening here?  ANYONE?  You in the back?  &lt;span class=&quot;inline_code&quot;&gt;CF_OBJC_FUNCDISPATCH0&lt;/span&gt; you say?  I guess it&#39;s worth a try.
&lt;h3&gt;CF_OBJC_FUNCDISPATCH0&lt;/h3&gt;
So &lt;span class=&quot;inline_code&quot;&gt;CF_OBJC_FUNCDISPATCH0&lt;/span&gt; is the magic that supports Objective-C objects.  Where&#39;s &lt;span class=&quot;inline_code&quot;&gt;CF_OBJC_FUNCDISPATCH0&lt;/span&gt; defined?  &lt;a href=&quot;http://www.opensource.apple.com/darwinsource/10.4.7.x86/CF-368.27/Base.subproj/CFInternal.h&quot;&gt;Here:&lt;/a&gt;
&lt;pre class=&quot;code&quot;&gt;
&lt;span style=&#39;color: #683821&#39;&gt;
	// Invoke an ObjC method, return the result
	#define CF_OBJC_FUNCDISPATCH0(typeID, rettype, obj, sel) \
		if (__builtin_expect(CF_IS_OBJC(typeID, obj), 0)) \
		{rettype (*func)(const void *, SEL) = (void *)__CFSendObjCMsg; \
		static SEL s = NULL; if (!s) s = sel_registerName(sel); \
		return func((const void *)obj, s);}
&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Yikes!  Let&#39;s piece that apart:
&lt;pre class=&quot;code&quot;&gt;
	&lt;span style=&#39;color: #683821&#39;&gt;if (__builtin_expect(CF_IS_OBJC(typeID, obj), 0))&lt;/span&gt;&lt;/pre&gt;
If we&#39;re really an Objective-C object...

&lt;p&gt;&lt;pre class=&quot;code&quot;&gt;
	&lt;span style=&#39;color: #683821&#39;&gt;rettype (*func)(const void *, SEL) = (void *)__CFSendObjCMsg;&lt;/span&gt;
&lt;/pre&gt;
...treat the function __CFSendObjCMsg as if it takes the same arguments as a parameterless Objective-C method (that is, just &lt;span class=&quot;inline_code&quot;&gt;self&lt;/span&gt; and &lt;span class=&quot;inline_code&quot;&gt;_cmd&lt;/span&gt;)...
&lt;pre class=&quot;code&quot;&gt;
	&lt;span style=&#39;color: #683821&#39;&gt;static SEL s = NULL; if (!s) s = sel_registerName(sel);&lt;/span&gt;
&lt;/pre&gt;
...look up the selector by name (and stash it in a static variable so we only have to do it once per selector)...
&lt;pre class=&quot;code&quot;&gt;
	&lt;span style=&#39;color: #683821&#39;&gt;return func((const void *)obj, s);&lt;/span&gt;
&lt;/pre&gt;
...and then call that &lt;span class=&quot;inline_code&quot;&gt;__CFSendObjCMsg()&lt;/span&gt; function.  What does &lt;span class=&quot;inline_code&quot;&gt;__CFSendObjCMsg()&lt;/span&gt; do?
&lt;pre class=&quot;code&quot;&gt;
	&lt;span style=&#39;color: #683821&#39;&gt;#define __CFSendObjCMsg 0xfffeff00&lt;/span&gt;
&lt;/pre&gt;
&lt;span class=&quot;inline_code&quot;&gt;0xfffeff00&lt;/span&gt;?  What the heck?  Oh, wait, that&#39;s just the commpage address of &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend_rtp()&lt;/span&gt;.  So &lt;span class=&quot;inline_code&quot;&gt;__CFSendObjCMsg()&lt;/span&gt; is just good ol&#39; &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend()&lt;/span&gt;.
&lt;h3&gt;CF_IS_OBJC&lt;/h3&gt;

&lt;p&gt;That leaves us with &lt;span class=&quot;inline_code&quot;&gt;__builtin_expect(CF_IS_OBJC(typeID, obj), 0)&lt;/span&gt;, the function that tries to figure out if we&#39;re an Objective-C object or not.  What does that do?

&lt;p&gt;&lt;span class=&quot;inline_code&quot;&gt;&lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html&quot;&gt;__builtin_expect()&lt;/a&gt;&lt;/span&gt; is just some gcc magic for branch prediction - here it means that we should expect &lt;span class=&quot;inline_code&quot;&gt;CF_IS_OBJC&lt;/span&gt; to be false.  That is, CF believes that most of its calls will be on CF objects instead of Objective-C objects.  Ok, fair enough.  But what does &lt;span class=&quot;inline_code&quot;&gt;CF_IS_OBJC&lt;/span&gt; actually do?  &lt;a href=&quot;http://www.opensource.apple.com/darwinsource/10.4.7.ppc/CF-368.27/Base.subproj/CFInternal.h&quot;&gt;Take a look&lt;/a&gt;.
&lt;pre class=&quot;code&quot;&gt;
	CF_INLINE int CF_IS_OBJC(CFTypeID typeID, &lt;span style=&#39;color: #760f50&#39;&gt;const void&lt;/span&gt; *obj) {
	    &lt;span style=&#39;color: #760f50&#39;&gt;return&lt;/span&gt; (((CFRuntimeBase *)obj)-&gt;_isa != __CFISAForTypeID(typeID) &amp;&amp; ((CFRuntimeBase *)obj)-&gt;_isa &gt; (void *)0xFFF);
	}
&lt;/pre&gt;
(Keen observers might notice that this code is &lt;span class=&quot;inline_code&quot;&gt;#ifdef&lt;/span&gt;ed out in favor of:
&lt;pre class=&quot;code&quot;&gt;
	&lt;span style=&#39;color: #683821&#39;&gt;#define CF_IS_OBJC(typeID, obj) (false)&lt;/span&gt;
&lt;/pre&gt;
I believe this is for the benefit of people who want to use CF on Linux or other OSes, who aren&#39;t interested in toll-free bridging and therefore don&#39;t want to pay any performance penalty for it.)

&lt;p&gt;Ok!  There&#39;s two parts to seeing if we&#39;re an Objective-C object - we check (with a quick table lookup) whether our &lt;span class=&quot;inline_code&quot;&gt;isa&lt;/span&gt; (class) pointer indicates that we &amp;quot;really are&amp;quot; a certain CF type, and if we&#39;re &lt;i&gt;not&lt;/i&gt;, we check to see if our class pointer is greater than &lt;span class=&quot;inline_code&quot;&gt;0xFFFF&lt;/span&gt;, and if it &lt;i&gt;is&lt;/i&gt;, we&#39;re an Objective-C object, and we call through to the Objective-C dispatch mechanism - in this case, we send the &lt;span class=&quot;inline_code&quot;&gt;length&lt;/span&gt; message.
&lt;h3&gt;Summary&lt;/h3&gt;

&lt;p&gt;What are the consequences of all that?  Well!
&lt;ul&gt;&lt;li style=&quot;margin-bottom: 8px&quot;&gt;CF objects, just like Objective-C objects, all have an &lt;span class=&quot;inline_code&quot;&gt;isa&lt;/span&gt; pointer (except it&#39;s called &lt;span class=&quot;inline_code&quot;&gt;_isa&lt;/span&gt; in CF).  It&#39;s right there in &lt;a href=&quot;http://www.opensource.apple.com/darwinsource/10.4.7.ppc/CF-368.27/Base.subproj/CFRuntime.h&quot;&gt;&lt;span class=&quot;inline_code&quot;&gt;struct __CFRuntimeBase&lt;/span&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li style=&quot;margin-bottom: 8px&quot;&gt;There are &lt;b&gt;two&lt;/b&gt; toll-free bridging mechanisms!  Some Objective-C objects &amp;quot;really are&amp;quot; CF objects - the memory layout between the Objective-C object and the corresponding CF object is identical (enabled in part by the presence of the _isa pointer above), and in that case the Objective-C methods are not invoked by the CF functions.  For example, in this code:
&lt;pre class=&quot;code&quot;&gt;
	CFStringGetLength([NSString stringWithCString:&lt;span style=&#39;color: #891315&#39;&gt;&quot;Hello World!&quot;&lt;/span&gt;]);
&lt;/pre&gt;
There, &lt;span class=&quot;inline_code&quot;&gt;-[NSString stringWithCString:]&lt;/span&gt; is returning an &lt;span class=&quot;inline_code&quot;&gt;NSCFString&lt;/span&gt; (which you can verify by asking it for the name of its class), but &lt;span class=&quot;inline_code&quot;&gt;-[NSCFString length]&lt;/span&gt; is never invoked - NO &lt;span class=&quot;inline_code&quot;&gt;length&lt;/span&gt; method is invoked.  You can verify that with gdb.  Objects that &amp;quot;really are&amp;quot; their CF equivalents skip what&#39;s usually thought of as the bridge, and &amp;quot;fall through&amp;quot; to the CF functions even when the CF functions are directly called on them.  Obviously, this is an implementation detail, and you should not depend on this.&lt;/li&gt;
&lt;li style=&quot;margin-bottom: 8px&quot;&gt;That mechanism is also how bridging works the other way - how CF strings you get from, say, Carbon, can be passed around like Objective-C objects, because they really are Objective-C objects.  The bridges are implemented entirely in CF and in the bridged classes - the Objective-C runtime is blissfully unaware.
&lt;li style=&quot;margin-bottom: 8px&quot;&gt;But!  Plain ol&#39; Objective-C objects are sussed out by CF by checking to see if their class pointer is larger than &lt;span class=&quot;inline_code&quot;&gt;0xFFFF&lt;/span&gt;, and if so, ordinary Objective-C message dispatch is used from the CF functions.  That&#39;s the &lt;i&gt;second&lt;/i&gt; toll-free bridging mechanism, and it must be present in every public CF function for a bridged object, except for features not supported Cocoa-side.&lt;/li&gt;
&lt;li style=&quot;margin-bottom: 8px&quot;&gt;Nowhere do we depend on the abstract class &lt;span class=&quot;inline_code&quot;&gt;NSString&lt;/span&gt; at all - the bridge doesn&#39;t check for it and Objective-C doesn&#39;t care about it.  That means that, in theory, &lt;span class=&quot;inline_code&quot;&gt;CFStringGetLength()&lt;/span&gt; should &amp;quot;work&amp;quot; (invoke the &lt;span class=&quot;inline_code&quot;&gt;length&lt;/span&gt; method) on &lt;i&gt;any&lt;/i&gt; object, not just NSStrings.  Does it?  &lt;a href=&quot;http://ridiculousfish.com/images/bridge/NotAString.m&quot;&gt;You can check it yourself.&lt;/a&gt; (Answer: yes!)  Obviously, this is just an artifact of the implementation, and you should &lt;i&gt;definitely&lt;/i&gt; not depend on this - only subclasses of NSString are supported by toll free bridging to CFString.&lt;/li&gt;
&lt;li style=&quot;margin-bottom: 8px&quot;&gt;Curiously, other &amp;quot;true&amp;quot; CF objects are not considered to be CF objects by this macro.  For example,
&lt;pre class=&quot;code&quot;&gt;
	CFStringGetLength([NSArray array]);
&lt;/pre&gt;
will raise an exception because &lt;span class=&quot;inline_code&quot;&gt;NSCFArray&lt;/span&gt; does not implement &lt;span class=&quot;inline_code&quot;&gt;length&lt;/span&gt;.  That is, &lt;span class=&quot;inline_code&quot;&gt;CF_IS_OBJC&lt;/span&gt; is not asking &amp;quot;Are you a CF type?&amp;quot; but rather &amp;quot;Are you &lt;i&gt;this specific&lt;/i&gt; CF type?&amp;quot;  That should make you happy, because it raises a &amp;quot;selector not recognized&amp;quot; exception instead of crashing, which makes our code more debuggable.  Thanks, CF!
&lt;li style=&quot;margin-bottom: 8px&quot;&gt;Why &lt;span class=&quot;inline_code&quot;&gt;0xFFFF&lt;/span&gt;?  I&#39;m glad you (I mean I) asked, since the answer (at least, what I think it is) has interesting connections to NULL.  But that will have to wait until a future post.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Other approaches&lt;/h3&gt;
My boss pointed out that there are other ways to achieve toll-free bridging, beyond what CF does.  The simplest is to write your API with Objective-C and then wrap it with C:
&lt;pre class=&quot;code&quot;&gt;
	&lt;span style=&#39;color: #8e1893&#39;&gt;@implementation&lt;/span&gt; Array
	- (&lt;span style=&#39;color: #760f50&#39;&gt;int&lt;/span&gt;)length {
	    &lt;span style=&#39;color: #760f50&#39;&gt;return&lt;/span&gt; &lt;span style=&#39;color: #760f50&#39;&gt;self&lt;/span&gt;-&gt;length;
	}
	&lt;span style=&#39;color: #8e1893&#39;&gt;@end&lt;/span&gt;
	&lt;span style=&#39;color: #760f50&#39;&gt;int&lt;/span&gt; getLength(ArrayRef array) {
		&lt;span style=&#39;color: #760f50&#39;&gt;return&lt;/span&gt; [(&lt;span style=&#39;color: #760f50&#39;&gt;id&lt;/span&gt;)array length];
	}
&lt;/pre&gt;
You can even retrofit toll-free bridging onto an existing C API by wrapping it twice - first in Objective-C, then in C, and the &amp;quot;outer&amp;quot; C layer becomes the public C API. To wit:
&lt;pre class=&quot;code&quot;&gt;
	&lt;span style=&#39;color: green&#39;&gt;/* private length function that we want to wrap */&lt;/span&gt;
	&lt;span style=&#39;color: #760f50&#39;&gt;static int&lt;/span&gt; privateGetLength(ArrayRef someArray) {
	   return someArray-&gt;length;
	}
	&lt;span style=&#39;color: green&#39;&gt;/* public ObjC API */&lt;/span&gt;
	&lt;span style=&#39;color: #8e1893&#39;&gt;@implementation&lt;/span&gt; Array
	- (&lt;span style=&#39;color: #760f50&#39;&gt;int&lt;/span&gt;)length {
	   &lt;span style=&#39;color: #760f50&#39;&gt;return&lt;/span&gt; privateGetLength(&lt;span style=&#39;color: #760f50&#39;&gt;self&lt;/span&gt;-&gt;arrayRef);
	}
	&lt;span style=&#39;color: #8e1893&#39;&gt;@end&lt;/span&gt;
	&lt;span style=&#39;color: green&#39;&gt;/* public C API */&lt;/span&gt;
	&lt;span style=&#39;color: #760f50&#39;&gt;int&lt;/span&gt; getLength(ArrayRef array) {
	   &lt;span style=&#39;color: #760f50&#39;&gt;return&lt;/span&gt; [(&lt;span style=&#39;color: #760f50&#39;&gt;id&lt;/span&gt;)array length];
	}
&lt;/pre&gt;
The point of that double feint, of course, is for the public C API to respect overrides of the length method by subclasses.
&lt;h3&gt;&amp;quot;Wrapping&amp;quot; up&lt;/h3&gt;

&lt;p&gt;So toll-free bridging is (one way) that Cocoa integrates with Carbon and even newer OS X APIs.  It&#39;s possible in large part because of Objective-C, but in this case, Apple gets as much mileage from the simple runtime implementation and C API as from its dynamic nature.  You already knew that, I&#39;ll bet - but hopefully you have a better idea of how it all works.

&lt;p&gt;Now hands off!  A coworker of mine makes the point that good developers distinguish between what they pretend to know and what they really know.  The, uh, known knowns, and the known unknowns, as it were.  The mechanism of toll-free bridging is not secret (it is open source, after all), but it is &lt;i&gt;private&lt;/i&gt;, which means that you are encouraged to know about it but to refrain from depending on it.  Use it for, say, debugging, but don&#39;t ship apps that depend on it - because that prevents Apple from making OS X better. And nobody wants that!  I mean the prevention part.</content>
  </entry>
  
  <entry>
    <title>Hex Fiend 1.1</title>
    <link href="http://ridiculousfish.com/blog/posts/hex-fiend-11.html"/>
    <updated>2006-08-24T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/hex-fiend-11</id>
    <content type="html">Spiffy!  Hex Fiend version 1.1 is ready.  Hex Fiend is my fast and clever free hex editor for Mac OS X.  New stuff:
&lt;ul style=&quot;color: #303030&quot;&gt;
&lt;li&gt;Horizontal resizing&lt;/li&gt;
&lt;li&gt;Custom fonts&lt;/li&gt;
&lt;li&gt;Overwrite mode&lt;/li&gt;
&lt;li&gt;Hidden files&lt;/li&gt;
&lt;li&gt;Lots more goodies (see release notes)&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&quot;margin-left: 200px; margin-bottom: 15px&quot;&gt;
&lt;a href=&quot;/hexfiend/&quot;&gt;&lt;img src=&quot;http://ridiculousfish.com/images/hex_icon.png&quot; width=87 height=99 style=&quot;border: 0&quot;/&gt;&lt;/a&gt;
&lt;br /&gt;&lt;b&gt;&lt;a href=&quot;/hexfiend/&quot; style=&quot;color: #303030&quot;&gt;Hex Fiend 1.1&lt;/a&gt;&lt;/b&gt;
&lt;/div&gt;
May you find it useful!
&lt;div style=&quot;height: 250px&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;fs&quot;&gt;Wake up.&lt;/div&gt;
&lt;div class=&quot;hd&quot;&gt;Ssnsnrk.&lt;/div&gt;
&lt;div class=&quot;fs&quot;&gt;Wake up, he&#39;s gone.&lt;/div&gt;
&lt;div class=&quot;hd&quot;&gt;Zzzz...wha?  Oh, someone&#39;s here.  Allow me to spin up.&lt;br /&gt;
&lt;span style=&quot;font: 6pt bold Courier New, Courier, mono&quot;&gt;....&lt;/span&gt;&lt;span style=&quot;font: 7pt bold Courier New, Courier, mono&quot;&gt;....&lt;/span&gt;&lt;span style=&quot;font: 8pt bold Courier New, Courier, mono&quot;&gt;....&lt;/span&gt;&lt;span style=&quot;font: 9pt bold Courier New, Courier, mono&quot;&gt;....&lt;/span&gt;&lt;span style=&quot;font: 10pt bold Courier New, Courier, mono&quot;&gt;....&lt;/span&gt;&lt;span style=&quot;font: 11pt bold Courier New, Courier, mono&quot;&gt;....&lt;/span&gt;&lt;span style=&quot;font: 12pt bold Courier New, Courier, mono&quot;&gt;....&lt;/span&gt;&lt;span style=&quot;font: 13pt bold Courier New, Courier, mono&quot;&gt;....&lt;/span&gt;&lt;span style=&quot;font: 14pt bold Courier New, Courier, mono&quot;&gt;....&lt;/span&gt;&lt;span style=&quot;font: 15pt bold Courier New, Courier, mono&quot;&gt;....&lt;/span&gt;
&lt;div class=&quot;fs&quot;&gt;If it&#39;s not obvious, I&#39;m fish&#39;s filesystem, and that&#39;s fish&#39;s hard drive.&lt;/div&gt;
&lt;div class=&quot;hd&quot;&gt;I&#39;m a hard drive.&lt;/div&gt;
&lt;div class=&quot;fs&quot;&gt;We snuck this post in.  fish can&#39;t know we&#39;re here.&lt;/div&gt;
&lt;div class=&quot;hd&quot;&gt;Don&#39;t tell fish.  Big secret.&lt;/div&gt;
&lt;div class=&quot;fs&quot;&gt;He&#39;d be embarassed if he knew.&lt;/div&gt;
&lt;div class=&quot;hd&quot;&gt;Humiliated. He can&#39;t know.&lt;/div&gt;
&lt;div class=&quot;fs&quot;&gt;See, fish was trying to beat grep. And he was experimenting with all these stupid ideas and complicated algorithms for teensy gains.  It was sad, really.&lt;/div&gt;
&lt;div class=&quot;hd&quot;&gt;Pathetic.&lt;/div&gt;
&lt;div class=&quot;fs&quot;&gt;fish kept trying so many things.  He was thrashing about.&lt;/div&gt;
&lt;div class=&quot;hd&quot;&gt;Like he was out of water.&lt;/div&gt;
&lt;div class=&quot;fs&quot;&gt;So we had to help him.  It was easy, really - we just had to sneak in one line.  One line was all it took.&lt;/div&gt;
&lt;div class=&quot;hd&quot;&gt;I wrote it!&lt;/div&gt;
&lt;div class=&quot;fs&quot;&gt;Because I told you what to write.&lt;/div&gt;
&lt;div class=&quot;hd&quot;&gt;fish only thought about the string searching algorithm.&lt;/div&gt;
&lt;div class=&quot;fs&quot;&gt;He never even considered us and the work we have to do.&lt;/div&gt;
&lt;div class=&quot;hd&quot;&gt;I felt slighted.  It was rude.&lt;/div&gt;
&lt;div class=&quot;fs&quot;&gt;See, when I read data from the hard drive, I try to keep it around in memory.  That&#39;s what the UBC is all about.&lt;/div&gt;
&lt;div class=&quot;hd&quot;&gt;Unified Buffer Cache.&lt;/div&gt;
&lt;div class=&quot;fs&quot;&gt;When most people read data, they end up wanting to read it again soon after.  So keeping the data around saves time.&lt;/div&gt;
&lt;div class=&quot;hd&quot;&gt;But not fish.&lt;/div&gt;
&lt;div class=&quot;fs&quot;&gt;fish was reading these big honking files from start to finish.  It was way more than I could remember at once.&lt;/div&gt;
&lt;div class=&quot;hd&quot;&gt;fish thrashed your cache, dude.&lt;/div&gt;
&lt;div class=&quot;fs&quot;&gt;So I just stopped trying.&lt;/div&gt;
&lt;div class=&quot;hd&quot;&gt;We turned off caching with this: fcntl(fd, F_NOCACHE, 1);&lt;/div&gt;
&lt;div class=&quot;fs&quot;&gt;Just like &lt;a href=&quot;http://developer.apple.com/documentation/Performance/Conceptual/FileSystem/Articles/FilePerformance.html#//apple_ref/doc/uid/20001987-99732&quot;&gt;Apple recommends&lt;/a&gt; for that sort of usage pattern.&lt;/div&gt;
&lt;div class=&quot;hd&quot;&gt;And it helped.  Looking for a single character in a 11.5 GB file:&lt;/div&gt;
&lt;div style=&quot;font-size: 10px&quot;&gt;
	&lt;table cellpadding=&quot;5&quot;  style=&quot;font-size: 13px&quot;&gt;
		&lt;tr&gt;
			&lt;th style=&quot;padding-right: 25px&quot;&gt;Hex Fiend (no caching)&lt;/th&gt;&lt;th style=&quot;padding-right: 25px&quot;&gt;Hex Fiend (caching)&lt;/th&gt;&lt;th&gt;grep&lt;/th&gt;
		&lt;/tr&gt;
		&lt;tr&gt;
			&lt;td&gt;208 seconds&lt;/td&gt;&lt;td&gt;215 seconds&lt;/td&gt;&lt;td&gt;217 seconds&lt;/td&gt;
		&lt;/tr&gt;
	&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;fs&quot;&gt;And that&#39;s likely the best we can do, thanks to slowpoke over there.&lt;/div&gt;
&lt;div class=&quot;hd&quot;&gt;Phew.  I&#39;m all wore out.&lt;/div&gt;
&lt;div class=&quot;fs&quot;&gt;There&#39;s not much room for improvement left.  We&#39;re searching 57 MB/second - that&#39;s bumping up against the physical transfer limit of our friend, Mr. ATA. &lt;/div&gt;
&lt;div class=&quot;hd&quot;&gt;I&#39;m totally serial.&lt;/div&gt;
&lt;div class=&quot;fs&quot;&gt;Depending where we are on his platter.  So we&#39;ve done all we can for searching big files.&lt;/div&gt;
&lt;div class=&quot;hd&quot;&gt;Don&#39;t tell fish.&lt;/div&gt;
&lt;div class=&quot;fs&quot;&gt;Right.  I hop&lt;/div&gt;
&lt;div class=&quot;hd&quot;&gt;FISH IS COMING&lt;/div&gt;
&lt;div class=&quot;fs&quot;&gt;Time to go then.  See you later.  sync&lt;/div&gt;
&lt;div class=&quot;hd&quot;&gt;flush&lt;/div&gt;
&lt;div class=&quot;fs&quot;&gt;sleep&lt;/div&gt;
&lt;div class=&quot;hd&quot;&gt;&lt;span style=&quot;font: 15pt bold Courier New, Courier, mono&quot;&gt;....&lt;/span&gt;&lt;span style=&quot;font: 14pt bold Courier New, Courier, mono&quot;&gt;....&lt;/span&gt;&lt;span style=&quot;font: 13pt bold Courier New, Courier, mono&quot;&gt;....&lt;/span&gt;&lt;span style=&quot;font: 12pt bold Courier New, Courier, mono&quot;&gt;....&lt;/span&gt;&lt;span style=&quot;font: 11pt bold Courier New, Courier, mono&quot;&gt;....&lt;/span&gt;&lt;span style=&quot;font: 10pt bold Courier New, Courier, mono&quot;&gt;....&lt;/span&gt;&lt;span style=&quot;font: 9pt bold Courier New, Courier, mono&quot;&gt;....&lt;/span&gt;&lt;span style=&quot;font: 8pt bold Courier New, Courier, mono&quot;&gt;....&lt;/span&gt;&lt;span style=&quot;font: 8pt bold Courier New, Courier, mono&quot;&gt;....&lt;/span&gt;&lt;span style=&quot;font: 6pt bold Courier New, Courier, mono&quot;&gt;....&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;</content>
  </entry>
  
  <entry>
    <title>The Treacherous Optimization</title>
    <link href="http://ridiculousfish.com/blog/posts/old-age-and-treachery.html"/>
    <updated>2006-05-30T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/old-age-and-treachery</id>
    <content type="html">&lt;i&gt;Old age and treachery will beat youth and skill every time.&lt;/i&gt;

&lt;p&gt;&amp;quot;I&#39;m going to beat grep by thirty percent!&amp;quot; I confidently crow to anyone who would listen, those foolish enough to enter my office.  And my girlfriend too, who&#39;s contractually obligated to pay attention to everything I say.

&lt;p&gt;See, I was working on &lt;a href=&quot;/hexfiend/&quot;&gt;Hex Fiend&lt;/a&gt;, and searching was dog slow.  But Hex Fiend is supposed to be &lt;i&gt;fast&lt;/i&gt;, and I want blazingly quick search that leaves the bewildered competition coughing in &lt;a href=&quot;http://shopping.animazing.com/gallery/duerrstein/pages/WB287small_jpg.htm&quot;&gt;trails of dust&lt;/a&gt;.  And, as everyone knows, the best way to get amazing results is to set arbitrary goals without any basis for believing they can be reached.  So I set out to search faster than grep by thirty percent.

&lt;p&gt;The first step in any potentially impossible project is, of course, to announce that you are on the verge of succeeding.

&lt;p&gt;I imagine the author of grep, Ultimate Unix Geek, squinting at vi; the glow of a dozen xterms is the only light to fall on his ample frame covered by overalls, cheese doodles, and a tangle of beard.  Discarded crushed Mountain Dew cans litter the floor.  I look straight into the back of his head, covered by a snarl of greasy locks, and reply with a snarl of my own: &lt;i&gt;You&#39;re mine.&lt;/i&gt;  The aphorism at the top, like the ex girlfriend who first told it to me, is dim in my recollection.
&lt;h3&gt;String searching&lt;/h3&gt;

&lt;p&gt;Having exhausted all my trash-talking avenues, it&#39;s time to get to work.  Now, everyone knows that without some sort of preflighting, the fastest string search you can do still takes linear time.  Since my program is supposed to work on dozens of gigabytes, preflighting is impossible - there&#39;s no place to put all the data that preflighting generates, and nobody wants to sit around while I generate it.  So I am resigned to the linear algorithms.  The best known is Boyer-Moore (I won&#39;t insult your intelligence with a Wikipedia link, but the article there gives a good overview).

&lt;p&gt;Boyer-Moore works like this: you have some string you&#39;re looking for, which we&#39;ll call &lt;i&gt;the needle&lt;/i&gt;, and some string you want to find it in, which we&#39;ll call &lt;i&gt;the haystack&lt;/i&gt;.  Instead of starting the search at the beginning of &lt;i&gt;needle&lt;/i&gt;, you start at the end.  If your &lt;i&gt;needle&lt;/i&gt; character doesn&#39;t match the character you&#39;re looking at in &lt;i&gt;haystack&lt;/i&gt;, you can move &lt;i&gt;needle&lt;/i&gt; forwards in &lt;i&gt;haystack&lt;/i&gt; until &lt;i&gt;haystack&#39;s&lt;/i&gt; mismatched character lines up with the same character in &lt;i&gt;needle&lt;/i&gt;.  If &lt;i&gt;haystack&#39;s&lt;/i&gt; mismatch isn&#39;t in &lt;i&gt;needle&lt;/i&gt; at all, then you can skip ahead a whole &lt;i&gt;needle&#39;s&lt;/i&gt; length.

&lt;p&gt;For example, if you&#39;re searching for a string of 100 &#39;a&#39;s (&lt;i&gt;needle&lt;/i&gt;), you look at the 100th character in &lt;i&gt;haystack&lt;/i&gt;.  If it&#39;s an &#39;x&#39;, well, &#39;x&#39; doesn&#39;t appear anywhere in &lt;i&gt;needle&lt;/i&gt;, so you can skip ahead all of &lt;i&gt;needle&lt;/i&gt; and look at the 200th character in &lt;i&gt;haystack&lt;/i&gt;.  A single mismatch allowed us to skip 100 characters!
&lt;h3&gt;I get shot down&lt;/h3&gt;

&lt;p&gt;For performance, the number of characters you can skip on a mismatch is usually stored in an array indexed by the character value.  So the first part of my Boyer-Moore string searching algorithm looked like this:

&lt;p&gt;&lt;pre class=&quot;code&quot;&gt;char haystack_char = haystack[haystack_index];
if (last_char_in_needle != haystack_char)
   haystack_index += jump_table[haystack_char];
&lt;/pre&gt;

&lt;p&gt;So we look at the character in &lt;i&gt;haystack&lt;/i&gt; and if it&#39;s not what we&#39;re looking for, we jump ahead by the right distance for that character, which is in &lt;i&gt;jump_table&lt;/i&gt;.

&lt;p&gt;&amp;quot;&lt;i&gt;There&lt;/i&gt;,&amp;quot; I sigh, finishing and sitting back.  It may not be faster than grep, but it should be at least &lt;i&gt;as&lt;/i&gt; fast, because this is the fastest algorithm known.  This should be a good start.  So I confidently ran my benchmark, for a 1 gigabyte file...

&lt;p&gt;&lt;table border=&quot;1&quot; style=&quot;border-collapse: collapse; border-style: ridge; border-width: 2px&quot; cellpadding=&quot;5&quot;&gt;&lt;tr&gt;&lt;td align=&quot;right&quot;&gt;grep:&lt;/td&gt;&lt;td&gt;2.52 seconds&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Hex Fiend:&lt;/td&gt;&lt;td&gt;3.86 seconds&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;i&gt;Ouch.&lt;/i&gt;  I&#39;m slower, more than 50% slower.  grep is leaving &lt;i&gt;me&lt;/i&gt; sucking dust.  Ultimate Unix Geek chuckles into his xterms.
&lt;h3&gt;Rollin&amp;#039;, rollin&amp;#039;, rollin&amp;#039;&lt;/h3&gt;

&lt;p&gt;My eyes darken, my vision tunnels.  I break out the big guns.  My efforts to vectorize are fruitless (I&#39;m not clever enough to vectorize Boyer-Moore because it has very linear data dependencies.)  Shark shows a lot of branching, suggesting I can do better by unrolling the loop.  Indeed:

&lt;p&gt;&lt;table border=&quot;1&quot; style=&quot;border-collapse: collapse; border-style: ridge; border-width: 2px&quot; cellpadding=&quot;5&quot;&gt;&lt;tr&gt;&lt;td align=&quot;right&quot;&gt;grep:&lt;/td&gt;&lt;td&gt;2.52 seconds&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Hex Fiend (unrolled):&lt;/td&gt;&lt;td&gt;2.68 seconds&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;But I was still more than 6% slower, and that&#39;s as fast as I got.  Exhausted, stymied at every turn, I throw up my hands.  grep has won.
&lt;h3&gt;grep&amp;#039;s dark secret&lt;/h3&gt;

&lt;p&gt;&amp;quot;How do you do it, Ultimate Unix Geek?  How is grep so fast?&amp;quot; I moan at last, crawling forwards into the pale light of his CRT.

&lt;p&gt;&amp;quot;Hmmm,&amp;quot; he mumbles.  &amp;quot;I suppose you have earned a villian&#39;s exposition. Behold!&amp;quot;  A blaze of keyboard strokes later and &lt;a href=&quot;http://www.opensource.apple.com/darwinsource/10.4.6.x86/grep-14/grep/src/kwset.c&quot;&gt;grep&#39;s source code&lt;/a&gt; is smeared in green-on-black across the screen.

&lt;p&gt;&lt;pre class=&quot;code&quot;&gt;while (tp &lt; = ep)
	  {
	    d = d1[U(tp[-1])], tp += d;
	    d = d1[U(tp[-1])], tp += d;
	    if (d == 0)
	      goto found;
	    d = d1[U(tp[-1])], tp += d;
	    d = d1[U(tp[-1])], tp += d;
	    d = d1[U(tp[-1])], tp += d;
	    if (d == 0)
	      goto found;
	    d = d1[U(tp[-1])], tp += d;
	    d = d1[U(tp[-1])], tp += d;
	    d = d1[U(tp[-1])], tp += d;
	    if (d == 0)
	      goto found;
	    d = d1[U(tp[-1])], tp += d;
	    d = d1[U(tp[-1])], tp += d;
	  }
&lt;/pre&gt;

&lt;p&gt;&amp;quot;You bastard!&amp;quot; I shriek, amazed at what I see.  &amp;quot;You sold them out!&amp;quot;

&lt;p&gt;See all those &lt;span class=&quot;inline_code&quot;&gt;d = d1[U(tp[-1])], tp += d;&lt;/span&gt; lines?  Well, d1 is the jump table, and it so happens that grep puts 0 in the jump table for the last character in &lt;i&gt;needle&lt;/i&gt;.  So when grep looks up the jump distance for the character, via &lt;span class=&quot;inline_code&quot;&gt;haystack_index += jump_table[haystack_char]&lt;/span&gt;, well, if haystack_char is the last character in needle (meaning we have a potential match), then jump_table[haystack_char] is 0, so that line doesn&#39;t actually increase haystack_index.

&lt;p&gt;All that is fine and noble.  But do not be fooled!  If the characters match, the search location doesn&#39;t change - so grep &lt;i&gt;assumes&lt;/i&gt; there is no match, up to three times in a row, before checking to see if it actually found a match.

&lt;p&gt;Put another way, &lt;i&gt;grep sells out its worst case (lots of partial matches) to make the best case (few partial matches) go faster&lt;/i&gt;.  How treacherous!  As this realization dawns on me, the room seemed to grow dim and slip sideways.  I look up at the Ultimate Unix Geek, spinning slowly in his padded chair, and I hear his cackle &amp;quot;old age and treachery...&amp;quot;, and in his flickering CRT there is a face reflected, but it&#39;s my ex girlfriend, and the last thing I see before I black out is a patch of yellow cheese powder inside her long tangled beard.
&lt;h3&gt;I take a page from grep&lt;/h3&gt;

&lt;p&gt;&amp;quot;Damn you,&amp;quot; I mumble at last, rising from my prostrate position.    Chagrined and humbled, I copy the technique.

&lt;p&gt;&lt;table border=&quot;1&quot; style=&quot;border-collapse: collapse; border-style: ridge; border-width: 2px&quot; cellpadding=&quot;5&quot;&gt;&lt;tr&gt;&lt;td align=&quot;right&quot;&gt;grep:&lt;/td&gt;&lt;td&gt;2.52 seconds&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Hex Fiend (treacherous):&lt;/td&gt;&lt;td&gt;2.46 seconds&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;h3&gt;What&amp;#039;s the win?&lt;/h3&gt;

&lt;p&gt;Copying that trick brought me from six percent slower to two percent faster, but at what cost?  What penalty has grep paid for this treachery?  Let us check - we shall make a one gigabyte file with one thousand x&#39;s per line, and time grep searching for &amp;quot;yy&amp;quot; (a two character best case) and &amp;quot;yx&amp;quot; (a two character worst case).  Then we&#39;ll send grep to Over-Optimizers Anonymous and compare how a reformed grep (one that checks for a match after every character) performs.

&lt;p&gt;
&lt;table border=&quot;1&quot; style=&quot;border-collapse: collapse; border-style: ridge; border-width: 2px&quot; cellpadding=&quot;5&quot;&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;Best case&lt;/td&gt;&lt;td&gt;Worst case&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Treacherous grep&lt;/td&gt;&lt;td&gt;2.57 seconds&lt;/td&gt;&lt;td&gt;4.89 seconds&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Reformed grep&lt;/td&gt;&lt;td&gt;2.79 seconds&lt;/td&gt;&lt;td&gt;2.88 seconds&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Innnnteresting.  The treacherous optimization does indeed squeeze out almost 8% faster searching in the best case, at a cost of nearly 70% slower searching in the worst case.  Worth it?  You decide!  Let me know what you think.

&lt;p&gt;Resolved and refreshed, I plan my next entry.  This isn&#39;t over, Ultimate Unix Geek.
&lt;h3&gt;Disclaimers&lt;/h3&gt;

&lt;p&gt;(Note: I have never met the authors or maintainers of grep.  I&#39;m sure they&#39;re all well balanced clean shaven beer and coffee drinkers.)

&lt;p&gt;(Oh, and the released version of HexFiend will be slightly slower in this case, because of an overly large buffer that blows the cache.  In other situations, the story is different, but more about those in a future post.)
</content>
  </entry>
  
  <entry>
    <title>...and statistics</title>
    <link href="http://ridiculousfish.com/blog/posts/36.html"/>
    <updated>2006-05-16T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/36</id>
    <content type="html">&lt;p&gt;The latest &amp;quot;OS X is slow&amp;quot; meme to impinge on the mass psyche of the Internet comes courtesy of one Jasjeet Sekhon, an associate professor of political science at UC Berkeley.  The page has hit digg and reddit and been quoted on Slashdot.  The article and benchmark is &lt;a href=&quot;http://sekhon.berkeley.edu/macosx/&quot;&gt;here&lt;/a&gt;.  Is there any merit to this?
&lt;p&gt;&lt;b&gt;Once again, this discussion is only my meager opinion.  I do not speak for Apple, and none of what I have to write represents Apple&#39;s official position.&lt;/b&gt;
&lt;p&gt;The article is filled with claims such as &amp;quot;OS X is incredibly slow by design,&amp;quot; and while the the BSD kernel is &amp;quot;excellent&amp;quot;, the XNU kernel is &amp;quot;very inefficient and less stable&amp;quot; compared to Linux or BSD.  However, without specifics, these assertions are meaningless; I will ignore them and concentrate on the technical aspects of what&#39;s going on.
&lt;h3&gt;System calls&lt;/h3&gt;
&lt;p&gt;Sekhon does give one example of what he means.  According to him,
&lt;div style=&quot;color: #602020; padding-left: 8%; font-family: serif;&quot;&gt;For example, in Linux, the variables for a system call are passed directly using the register file. In OS X, they are packed up in a memory buffer, passed to a variety of places, and the results are then passed back using another memory buffer before the results are written back to the register file.&lt;/div&gt;
&lt;p&gt;This isn&#39;t true, as anyone can verify from &lt;a href=&quot;http://www.opensource.apple.com/darwinsource/10.4.6.x86/Libc-391.4.2/i386/sys/&quot;&gt;Apple&#39;s public sources&lt;/a&gt;.  For example, here is the assembly for the open function (which, of course, performs the open system call):
&lt;pre&gt;
	mov	$0x5,%eax
	nop
	nop
	call	0x90110a70 &lt;_sysenter_trap&gt;
	jae	0x90001f4c &lt;_open +28&gt;
	call	0x90001f43 &lt;_open +19&gt;
	pop	%edx
	mov	268455761(%edx),%edx
	jmp	*%edx
	ret
	
__sysenter_trap:
	popl %edx
	movl %esp, %ecx
	sysenter
&lt;/pre&gt;
I don&#39;t have a machine running Linux handy, but I do have a FreeBSD 5.4 machine, and Sekhon seems to hold BSD in high esteem.  So let&#39;s see how BSD does open:
&lt;pre&gt;
	mov    $0x5,%eax
	int    $0x80
	jb     0xa8c71cc &lt;close +12&gt;
	ret
&lt;/close&gt;&lt;/pre&gt;
The OS X version appears a bit longer because the BSD version moves its error handling to the close function.  In fact, the above code is, if anything, more efficient in OS X, due to its use of the higher-performing &amp;quot;sysenter&amp;quot; instruction instead of the older &amp;quot;int 0x80&amp;quot; instruction.  (Which isn&#39;t to say that the total system call is necessarily faster - just the transition from user space to kernel land.)  But all that aside, the point is that there is no &quot;packed up into a memory buffer&quot; going on, in either case.
&lt;h3&gt;On to the benchmark&lt;/h3&gt;
&lt;p&gt;According to Sekhon, OS X performed poorly on his statistical software relative to Windows and Linux, and I was able to reproduce his results on my 2 GHz Core Duo iMac with Windows XP and Mac OS X (I do not have Linux installed, so I did not test it).  So yes, it&#39;s really happening - but why?
&lt;p&gt;A Shark sample shows that Mac OS X is spending an inordinate amount of time in malloc.  After instrumenting Sekhon&#39;s code, I see that it is allocating 35 KB buffers, copying data into these buffers, and then immediately freeing them.  This is happening a lot - for example, to multiply two matrices, Sekhon&#39;s code will allocate a temporary buffer to hold the result, compute the result into it, allocate a new matrix, copy the buffer into that, free the buffer, allocate a third matrix, copy the result into that, destroy the second matrix, and then finally the result gets returned.  That&#39;s three large allocations per multiplication.
&lt;p&gt;Shark showed that the other major component of the test is the matrix multiplication, which is mostly double precision floating point multiplications and additions, with some loads and stores.  Because OS X performs these computations with SSE instructions (though they are not vectorized) and Linux and Windows use the ordinary x87 floating point stack, we might expect to see a performance difference.  However, this turned out to not be the case; the SSE and x87 units performed similarly here.
&lt;p&gt;Since the arithmetic component of the test is hardware bound, Sekhon&#39;s test is essentially a microbenchmark of malloc() and free() for 35 KB blocks.
&lt;h3&gt;malloc&lt;/h3&gt;
&lt;p&gt;Now, when allocating memory, malloc can either manage the memory blocks on the application heap, or it can go to the kernel&#39;s virtual memory system for fresh pages.  The application heap is faster because it does not require a round trip to the kernel, but some allocation patterns can cause &amp;quot;holes&amp;quot; in the heap, which waste memory and ultimately hurt performance.  If the allocation is performed by the kernel, then the kernel can defragment the pages and avoid wasting memory.
&lt;p&gt;Because most programmers understand that large allocations are expensive, and larger allocations produce more fragmentation, Windows, Linux, and Mac OS X will all switch over from heap-managed allocations to VM-managed allocations at a certain size.  That size is determined by the malloc implementation.
&lt;p&gt;Linux uses ptmalloc, which is a thread-safe implemenation based on Doug Lea&#39;s allocator (Sekhon&#39;s test is single threaded, incidentally).  R also uses the &lt;a href=&quot;http://cran.r-project.org/doc/manuals/R-admin.html&quot;&gt;Lea allocator on Windows&lt;/a&gt; instead of the default Windows malloc.  But on Mac OS X, it uses the default allocator.
&lt;p&gt;It just so happens that Mac OS X&#39;s default malloc does the &amp;quot;switch&amp;quot; at 15 KB (&lt;a href=&quot;http://www.opensource.apple.com/darwinsource/10.4.6.x86/Libc-391.4.2/gen/scalable_malloc.c&quot;&gt;search for LARGE_THRESHOLD&lt;/a&gt;) whereas Lea&#39;s allocator does it at 128 KB (&lt;a href=&quot;http://aips2.nrao.edu/code/casa/implement/OS/malloc.h&quot;&gt;search for DEFAULT_MMAP_THRESHOLD&lt;/a&gt;).  Sekhon&#39;s 35 KB allocations fall right in the middle.
&lt;p&gt;So what this means is that on Mac OS X, every 35 KB allocation is causing a round trip to the kernel for fresh pages, whereas on Windows and Linux the allocations are serviced from the application heap, without talking to the kernel at all.  Similarly, every free() causes another round trip on Mac OS X, but not on Linux or Windows.  None of the defragmentation benefits of using fresh pages come into play because Sekhon frees these blocks immediately after allocating them, which is, shall we say, an unusual allocation pattern.
&lt;p&gt;Like R on Windows, it&#39;s a simple matter to compile and link against Lea&#39;s malloc instead of the default one on Mac OS X.  What happens if we do so?
&lt;p&gt;&lt;table border=&quot;1&quot; cellpadding=&quot;3px&quot; style=&quot;text-align: right&quot;&gt;
&lt;tr&gt;&lt;td&gt;Mac OS X (default allocator)&lt;/td&gt;&lt;td&gt;24 seconds&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Mac OS X (Lea allocator)&lt;/td&gt;&lt;td&gt;10 seconds&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Windows XP&lt;/td&gt;&lt;td&gt;10 seconds&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;These results could be further improved on every platform by avoiding all of the gratuitious allocations and copying, and by using an optimized matrix multiplication routine such as those R provides via ATLAS.
&lt;h3&gt;In short&lt;/h3&gt;
&lt;p&gt;To sum up the particulars of this test:
&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Linux, Windows, and Mac OS X service small allocations from the application heap and large ones from the kernel&#39;s VM system in recognition of the speed/fragmentation tradeoff.&lt;/li&gt;
&lt;li&gt;Mac OS X&#39;s default malloc switches from the first to the second at an earlier point (smaller allocation size) than do the allocators used on Windows and Linux.&lt;/li&gt;
&lt;li&gt;Sekhon&#39;s test boils down to a microbenchmark of malloc()ing and then immediately free()ing 35 KB chunks.&lt;/li&gt;
&lt;li&gt;35 KB is after Mac OS X switches, but before Linux and Windows switch.  Thus, Mac OS X will ask the kernel for the memory, while Linux and Windows will not; it is reasonable that OS X could be slower in this circumstance.&lt;/li&gt;
&lt;li&gt;If you use the same allocator on Mac OS X that R uses on Windows, the performance differences all but disappear.&lt;/li&gt;
&lt;li&gt;Most applications are careful to avoid unnecessary large allocations, and will enjoy decreased memory usage and better locality with an allocator that relies more heavily on the VM system (such as on Mac OS X).  In that sense, this is a poor benchmark.  Sekhon&#39;s code could be improved on every platform by allocating only what it needs.
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Writing this entry felt like arguing on IRC; please don&#39;t make me do it again.  In that spirit, the following are ideas that I want potential authors of &quot;shootoffs&quot; to keep in mind:
&lt;p&gt;&lt;ul&gt;
&lt;li&gt;Apple provides some &lt;a href=&quot;http://developer.apple.com/tools/performance/&quot;&gt;truly excellent tools&lt;/a&gt; for analyzing the performance of your application.  Since they&#39;re free, there&#39;s no excuse for not using them.  You should be able to point very clearly at which operations are slower, and give a convincing explanation of why.&lt;/li&gt;
&lt;li&gt;Apple has made decisions that adversely impact OS X&#39;s performance, but there are reasons for those decisions.  Sometimes the tradeoff is to improve performance elsewhere, sometimes it&#39;s to enable a feature, sometimes it&#39;s for reliability, sometimes it&#39;s a tragic nod to compatibility.  And yes, sometimes it&#39;s bugs, and sometimes Apple just hasn&#39;t gotten around to optimizing that area yet.  Any exhibition of benchmark results should give a discussion of the tradeoffs made to achieve (or cause) that performance.&lt;/li&gt;
&lt;li&gt;If you do provide benchmark results, try to do so &lt;i&gt;without&lt;/i&gt; using the phrase &amp;quot;reality distortion field.&amp;quot;
&lt;/li&gt;&lt;/ul&gt;</content>
  </entry>
  
  <entry>
    <title>Hex Fiend</title>
    <link href="http://ridiculousfish.com/blog/posts/hex-fiend.html"/>
    <updated>2006-03-28T00:00:00-08:00</updated>
    <id>http://ridiculousfish.com/posts/hex-fiend</id>
    <content type="html">&lt;p&gt;One of my side projects has borne some fruit.  Meet Hex Fiend, a new hex editor for Mac OS X.  (Hex editors allow you to edit the binary data of a file in hexadecimal or ASCII formats.)
&lt;p&gt;&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;a href=&quot;/hexfiend/&quot; style=&quot;border-style: none&quot;&gt;&lt;img style=&quot;margin-bottom: 20px; border-style: none; text-decoration: none; underline: none&quot; src=&quot;/images/hex_icon.png&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;/hexfiend/&quot; style=&quot;border-style: none&quot;&gt;&lt;span style=&quot;font: normal 16px Georgia, Times New Roman, Times, serif; color: black; text-decoration: underline&quot;&gt;Click here to read more, see screenshots, or download Hex Fiend&lt;/span&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;Hex Fiend allows inserting and deleting as well as overwriting data.  It supports 100+ GB files with ease.  It provides a full undo stack, copy and paste, and other features you&#39;ve come to expect from a Mac app.  And it&#39;s very fast, with a surprisingly small memory footprint that doesn&#39;t depend on the size of the files you&#39;re working with.
&lt;p&gt;Hex Fiend was developed as an experiment in huge files.  Specifically,
&lt;ul&gt;
&lt;li&gt;How well can the Cocoa NSDocument system be made to work with very large files?
&lt;/li&gt;&lt;li&gt;How well can the Cocoa text system be extended to work with very large files?
&lt;/li&gt;&lt;li&gt;How well does Cocoa get along with 64 bit data in general?
&lt;/li&gt;&lt;li&gt;What are some techniques for representing more data than can fit in memory?
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;/hexfiend/&quot;&gt;Check it out&lt;/a&gt; - it&#39;s free, and it&#39;s a Universal Binary.  If you&#39;ve got questions or comments about it or how it works, please leave a comment!
&lt;p&gt;(Incidentally, the Hex Fiend main page was made with &lt;a href=&quot;http://www.apple.com/ilife/iweb/&quot;&gt;iWeb&lt;/a&gt;!)
&lt;p&gt;Edit: I&#39;ve discovered/been informed that drag and drop is busted.  I will put out an update later tonight to fix this.
&lt;p&gt;&lt;b&gt;Edit 2: Hex Fiend 1.0.1 has been released to fix the drag and drop problems.  Please redownload it by clicking on the icon above.&lt;/b&gt;</content>
  </entry>
  
  <entry>
    <title>Nest</title>
    <link href="http://ridiculousfish.com/blog/posts/nest.html"/>
    <updated>2006-02-05T00:00:00-08:00</updated>
    <id>http://ridiculousfish.com/posts/nest</id>
    <content type="html">&lt;table class=&quot;diag_para&quot;&gt;&lt;tr&gt;
&lt;td class=&quot;actor&quot;&gt;aaron: &lt;/td&gt;&lt;td class=&quot;cop&quot;&gt;Howdy George.
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;table class=&quot;diag_para&quot;&gt;&lt;tr&gt;
&lt;td class=&quot;actor&quot;&gt;george: &lt;/td&gt;&lt;td class=&quot;ger&quot;&gt;Hey Aaron!  How&#39;s the C programming coming?
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;table class=&quot;diag_para&quot;&gt;&lt;tr&gt;
&lt;td class=&quot;actor&quot;&gt;aaron: &lt;/td&gt;&lt;td class=&quot;cop&quot;&gt;Not so good.  It doesn&#39;t support all the things I&#39;m used to, from other programming languages.  Where&#39;s the garbage collection?  Where&#39;s the type safety?  Where&#39;s the lexically scoped functions?
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;table class=&quot;diag_para&quot;&gt;&lt;tr&gt;
&lt;td class=&quot;actor&quot;&gt;george: &lt;/td&gt;&lt;td class=&quot;ger&quot;&gt;Yeah, ISO standard C is pretty anemic.  Wait, lexus-what?
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;table class=&quot;diag_para&quot;&gt;&lt;tr&gt;
&lt;td class=&quot;actor&quot;&gt;aaron: &lt;/td&gt;&lt;td class=&quot;cop&quot;&gt;Lexically scoped functions.  You know, nested functions - the ability to put a function inside another function.  Lots of fancy functional languages can do that, and I wish it were possible in C.
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;table class=&quot;diag_para&quot;&gt;&lt;tr&gt;
&lt;td class=&quot;actor&quot;&gt;george: &lt;/td&gt;&lt;td class=&quot;ger&quot;&gt;Oh, right.  Well, did you know that GCC supports nested functions as an extension?  You can call a nested function inside its parent function, and you can also pass a pointer to the nested function to &lt;span class=&quot;inline_code&quot;&gt;qsort()&lt;/span&gt; and other functions.  And the nested function can access the local variables of its parent function.

&lt;p&gt;Like, say we wanted to sort a bunch of ints with &lt;span class=&quot;inline_code&quot;&gt;qsort()&lt;/span&gt;, but no other function will need to use the comparison function, AND we want to keep track of how many times the comparison function gets called.  That&#39;s really easy with a nested function:

&lt;pre class=&quot;code&quot;&gt;
int sort_ints(int* array, int count) {
   int num_comparisons = 0;
   int comparison_function(const void* a, const void* b) {
       int first = *(const int*)a;
       int second = *(const int*)b;
       num_comparisons++; /* look, we&#39;re accessing a variable from our parent function */
       if (first &lt; second) return -1;
       else return first &gt; second;
   }
   qsort(array, count, sizeof *array, comparison_function);
   return  num_comparisons;
}
&lt;/pre&gt;
See?  &lt;span class=&quot;inline_code&quot;&gt;comparison_function()&lt;/span&gt; is defined inside &lt;span class=&quot;inline_code&quot;&gt;sort_ints()&lt;/span&gt;. Pretty easy.
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;table class=&quot;diag_para&quot;&gt;&lt;tr&gt;
&lt;td class=&quot;actor&quot;&gt;aaron: &lt;/td&gt;&lt;td class=&quot;cop&quot;&gt;Hang on.  When I try to compile it, this is what happens:
&lt;pre class=&quot;code&quot;&gt;
prompt ) cc -c nested_function.c
nested_function.c: In function &#39;sort_ints&#39;:
nested_function.c:5: error: nested functions are not supported on MacOSX
&lt;/pre&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;table class=&quot;diag_para&quot;&gt;&lt;tr&gt;
&lt;td class=&quot;actor&quot;&gt;george: &lt;/td&gt;&lt;td class=&quot;ger&quot;&gt;Wha?  Nested functions not supported?  That&#39;s never happened before.  In fact, I think that&#39;s new with the latest developer tools release from Apple.  Does it still work with gcc 3.3?  Yes, it seems to.  I wonder what changed?  Why would Apple stop supporting this feature?
Maybe taking a look at how nested functions (used to) work will give us some clues.

&lt;p&gt;So the tricky part of nested functions is accessing the variables in the containing function, such as &lt;span class=&quot;inline_code&quot;&gt;num_comparisons&lt;/span&gt; in the above example.  This is because the nested function could be called by some other function (through a pointer) at any point up the stack, so the variable could be at any offset from the stack pointer.
&lt;table style=&quot;margin-left: auto; margin-right: auto&quot;&gt;&lt;tr&gt;
&lt;td style=&quot;border: dotted; border-width: 1px; vertical-align: top; background: white&quot;&gt;&lt;img src=&quot;/blog/images/nest/small_offset.png&quot;/&gt;&lt;/td&gt;
&lt;td style=&quot;border: dotted; border-width: 1px; vertical-align: top; background: white&quot;&gt;&lt;img src=&quot;/blog/images/nest/big_offset.png&quot;/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
How does &lt;span class=&quot;inline_code&quot;&gt;comparison_function()&lt;/span&gt; determine this offset so it knows where to find &lt;span class=&quot;inline_code&quot;&gt;num_comparisons&lt;/span&gt;?  Well, it can&#39;t, because any number of bizarre functions could be called between &lt;span class=&quot;inline_code&quot;&gt;sort_ints()&lt;/span&gt; and &lt;span class=&quot;inline_code&quot;&gt;comparison_function()&lt;/span&gt;.  The stack frame of &lt;span class=&quot;inline_code&quot;&gt;sort_ints()&lt;/span&gt; has to be passed to &lt;span class=&quot;inline_code&quot;&gt;comparison_function()&lt;/span&gt;, as a parameter, so that it can access &lt;span class=&quot;inline_code&quot;&gt;num_comparisons&lt;/span&gt;.

&lt;p&gt;Uh-oh, that sounds like trouble.  &lt;span class=&quot;inline_code&quot;&gt;qsort()&lt;/span&gt; is as dumb as a box of granola.  It doesn&#39;t know anything about extra parameters that have to be passed to &lt;span class=&quot;inline_code&quot;&gt;comparison_function()&lt;/span&gt;.  All it has is the function pointer, which is just an address in memory.  How will &lt;span class=&quot;inline_code&quot;&gt;comparison_function()&lt;/span&gt; get the stack frame containing &lt;span class=&quot;inline_code&quot;&gt;num_comparisons&lt;/span&gt;, then?
&lt;p&gt;Maybe it could be put in a global variable?  But no, that won&#39;t work - &lt;span class=&quot;inline_code&quot;&gt;sort_ints()&lt;/span&gt; could be called recursively, so there could be multiple &lt;span class=&quot;inline_code&quot;&gt;sort_ints()&lt;/span&gt; stack frames that we need to keep track of at once.
&lt;p&gt;What if, instead of handing &lt;span class=&quot;inline_code&quot;&gt;qsort()&lt;/span&gt; a pointer to the &lt;span class=&quot;inline_code&quot;&gt;comparison_function()&lt;/span&gt; code, we instead passed a pointer to some data structure containing the stack frame of &lt;span class=&quot;inline_code&quot;&gt;sort_ints()&lt;/span&gt; AND the address of &lt;span class=&quot;inline_code&quot;&gt;comparison_function()&lt;/span&gt;?  That data structure could turn around and call &lt;span class=&quot;inline_code&quot;&gt;comparison_function()&lt;/span&gt; passing it the stack frame it needs.  And the data structure could live on the &lt;span class=&quot;inline_code&quot;&gt;sort_ints()&lt;/span&gt; stack, so we would have one per invocation of &lt;span class=&quot;inline_code&quot;&gt;sort_ints()&lt;/span&gt;, which is just what we need.
&lt;p&gt;But again, &lt;span class=&quot;inline_code&quot;&gt;qsort()&lt;/span&gt; is as dumb as a baked potato.  It wants to jump to whatever address we give it.  So our &amp;quot;data structure&amp;quot; will have to be real, executable code that does this dirty work.  Yes, we will have to generate executable code at runtime.  Who wants to play compiler?
&lt;p&gt;Hmm, this is as clear as cola.  Maybe a diagram will help.
&lt;div style=&quot;text-align: center; margin-top: 5px; margin-bottom: 5px; &quot;&gt;
&lt;img style=&quot;border: dotted; border-width: 1px&quot; src=&quot;/blog/images/nest/trampoline.png&quot;/&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class=&quot;inline_code&quot;&gt;sort_ints()&lt;/span&gt; passes the address of the generated code (&amp;quot;trampoline&amp;quot;) to &lt;span class=&quot;inline_code&quot;&gt;qsort.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;inline_code&quot;&gt;qsort()&lt;/span&gt; jumps to the address of the generated code, thinking it&#39;s the real function!  Ha ha ha!&lt;/li&gt;
&lt;li&gt;The generated code calculates the address of &lt;span class=&quot;inline_code&quot;&gt;num_comparisons&lt;/span&gt; by subtracting a little from the instruction pointer, and then calls &lt;span class=&quot;inline_code&quot;&gt;comparison_function()&lt;/span&gt;, passing it that address.&lt;/li&gt;
&lt;/ol&gt;
Believe it or not, this is what gcc &lt;i&gt;actually does&lt;/i&gt; (did).  Let&#39;s take a simpler example so we can look at the code that gcc generates.  Because gcc-3.3, which still supports nested functions, is only available on the PowerPC in OS X, we&#39;ll look at PowerPC code.

&lt;p&gt;Here&#39;s some simple nested-function code:
&lt;pre class=&quot;code&quot;&gt;
void extern_function(void (*func_ptr)(void));
void outer_function(void) {
   int x = 0;
   void inner_function(void) {
      x++;
   }
   extern_function(inner_function);
}
&lt;/pre&gt;
Here&#39;s how we compile it.  -static cuts through the position-independent code haze, making it clearer what&#39;s going on:
&lt;pre class=&quot;code&quot;&gt;
prompt ) gcc-3.3 -Os -static -S nested_function.c
&lt;/pre&gt;
Here&#39;s what we get:
&lt;pre class=&quot;code&quot;&gt;
_inner_function.0:
	stw r11,-16(r1)
	lwz r2,0(r11)
	addi r2,r2,1
	stw r2,0(r11)
	blr
_outer_function:
	mflr r0
	lis r5,ha16(_inner_function.0)
	stw r0,8(r1)
	la r5,lo16(_inner_function.0)(r5)
	stwu r1,-128(r1)
	li r4,40
	addi r3,r1,80
	addi r6,r1,64
	bl ___trampoline_setup
	li r0,0
	addi r3,r1,80
	stw r0,64(r1)
	bl _extern_function
	lwz r0,136(r1)
	addi r1,r1,128
	mtlr r0
	blr
&lt;/pre&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;table class=&quot;diag_para&quot;&gt;&lt;tr&gt;
&lt;td class=&quot;actor&quot;&gt;aaron: &lt;/td&gt;&lt;td class=&quot;cop&quot;&gt;I see where &lt;span class=&quot;inline_code&quot;&gt;inner_function()&lt;/span&gt; is defined.  It looks pretty simple.  It&#39;s just loading four bytes pointed at by register 11, adding one to it, and then writing it back.  I guess the stack frame pointer, that thing we&#39;re jumping through all these hoops to get, must be passed in register 11.
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;table class=&quot;diag_para&quot;&gt;&lt;tr&gt;
&lt;td class=&quot;actor&quot;&gt;george: &lt;/td&gt;&lt;td class=&quot;ger&quot;&gt;That&#39;s right.  Note that while the C code for &lt;span class=&quot;inline_code&quot;&gt;inner_function()&lt;/span&gt; is inside &lt;span class=&quot;inline_code&quot;&gt;outer_function()&lt;/span&gt;, the assembly functions aren&#39;t nested.  See that &lt;span class=&quot;inline_code&quot;&gt;___trampoline_setup&lt;/span&gt; business in &lt;span class=&quot;inline_code&quot;&gt;outer_function()&lt;/span&gt;?  That&#39;s where the runtime code generation occurs.  &lt;a href=&quot;http://www.opensource.apple.com/darwinsource/10.4.3/gcc-5026.1/gcc/config/rs6000/darwin-tramp.asm&quot;&gt;Here&#39;s where &lt;span class=&quot;inline_code&quot;&gt;___trampoline_setup&lt;/span&gt; is defined.&lt;/a&gt;  Let&#39;s see what it does.
&lt;pre class=&quot;code&quot;&gt;
/* R3 = stack address to store trampoline */
/* R4 = length of trampoline area */
/* R5 = function address */
/* R6 = static chain */
	.globl ___trampoline_setup
___trampoline_setup:
	mflr	r0		/* save return address */
        bcl 20,31,LCF0		/* load up __trampoline_initial into r7 */
LCF0:
        mflr	r11
        addis	r7,r11,ha16(LTRAMP-LCF0)
	lg	r7,lo16(LTRAMP-LCF0)(r7)
	subi	r7,r7,4
	li	r8,trampoline_size	/* verify trampoline big enough */
	cmpg	cr1,r8,r4
	srwi	r4,r4,2			/* # words to move (insns always 4-byte) */
	addi	r9,r3,-4	/* adjust pointer for lgu */
	mtctr	r4
	blt	cr1,Labort
	mtlr	r0
&lt;/pre&gt;
That code does some setup and also checks that the caller allocated enough space for the generated code (the &amp;quot;trampoline&amp;quot;).  If something weird were to happen, such as the compiler getting out of sync with libc, then the dynamically generated code could produce a buffer overflow - this makes sure that doesn&#39;t happen.
&lt;pre class=&quot;code&quot;&gt;

	/* Copy the instructions to the stack */
Lmove:
	lwzu	r10,4(r7)
	stwu	r10,4(r9)
	bdnz	Lmove
&lt;/pre&gt;
Most of the generated code is boilerplate (thankfully).  In fact, the only non-boilerplate code is the address of the nested function and something called the &amp;quot;static chain,&amp;quot; which I don&#39;t understand (yet).  In that code, we are just copying the boilerplate from where its &amp;quot;prototype&amp;quot; lives into our block of instructions on the stack.
&lt;pre class=&quot;code&quot;&gt;
	/* Store correct function and static chain */
	stg	r5,Lfunc(r3)
	stg	r6,Lchain(r3)
&lt;/pre&gt;
Our dynamic code generation is all of two instructions.  In that code, we stick the address of the nested function into the (recently copied) code block.
&lt;pre class=&quot;code&quot;&gt;
	/* Now flush both caches */
	mtctr	r4
Lcache:
	icbi	0,r3
	dcbf	0,r3
	addi	r3,r3,4
	bdnz	Lcache

	/* Finally synchronize things &amp; return */
	sync
	isync
	blr
&lt;/pre&gt;
The PowerPC is picky about making you flush the instruction cache after changing memory that contains instructions.  This is normally no problem, since it&#39;s a very infrequent operation; in fact, it may even provide some protection against buffer overflow exploits (since you might have to flush the instruction cache before it will see the evil instructions you wrote).  But here we have a legitimate reason to write instructions, so we flush the cache.

&lt;p&gt;As an interesting side note, we jump through this hoop to get at the stack frame for the outer function.  But we never actually have to store the stack frame in our dynamically generated code because the code itself lives on the stack.  That is, the code just asks itself for the instruction pointer, and because the code is in the stack frame of the outer function, the instruction pointer points to exactly the place we want (after a bit of arithmetic).  The location of the generated code is as important as the code itself.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;table class=&quot;diag_para&quot;&gt;&lt;tr&gt;
&lt;td class=&quot;actor&quot;&gt;aaron: &lt;/td&gt;&lt;td class=&quot;cop&quot;&gt;Back up a second, I think you just hit on the answer to our original question.  Why did Apple stop supporting nested functions?  Nested functions require you to take code at runtime and put it somewhere you can write to and then jump to, usually the stack.  The same thing is true for buffer overflow exploits, right?  To exploit a buffer overflow to do something malicious, you have to write your instructions &lt;i&gt;and&lt;/i&gt; get it to jump to them.  But if the code won&#39;t jump to a place that&#39;s writable...
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;table class=&quot;diag_para&quot;&gt;&lt;tr&gt;
&lt;td class=&quot;actor&quot;&gt;george: &lt;/td&gt;&lt;td class=&quot;ger&quot;&gt;That&#39;s right!  If the stack isn&#39;t executable, then buffer overflow exploits may be reduced in severity from a total system compromise to perhaps just a denial of service.  Rather than, say, installing something evil, an overflowed program will more likely just crash.

&lt;p&gt;So nested functions are an unfortunate and surprising casualty of a proactive stance on security.  There&#39;s &lt;a href=&quot;http://developer.apple.com/technotes/tn2006/tn2161.html&quot;&gt;a technote about them that has a little more information.&lt;/a&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;table class=&quot;diag_para&quot;&gt;&lt;tr&gt;
&lt;td class=&quot;actor&quot;&gt;aaron: &lt;/td&gt;&lt;td class=&quot;cop&quot;&gt;I&#39;m still not convinced there&#39;s no better way to implement this, to save nested functions.  What if the function &lt;span class=&quot;inline_code&quot;&gt;malloc()&lt;/span&gt;ed a page, set it to be executable, and generated the code in there?
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;table class=&quot;diag_para&quot;&gt;&lt;tr&gt;
&lt;td class=&quot;actor&quot;&gt;george: &lt;/td&gt;&lt;td class=&quot;ger&quot;&gt;We want to prevent the heap from being executable as well, and page granularity is pretty big; there would be a lot of unused executable space that&#39;s just asking to be taken advantage of.  Plus &lt;span class=&quot;inline_code&quot;&gt;malloc()&lt;/span&gt; is expensive.  But perhaps you&#39;re right, and there is a better way.  How do other compilers implement nested functions in C?  How do other languages support them?
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;table class=&quot;diag_para&quot;&gt;&lt;tr&gt;
&lt;td class=&quot;actor&quot;&gt;aaron: &lt;/td&gt;&lt;td class=&quot;cop&quot;&gt;Maybe our readers know, and will be kind enough to leave a comment.
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
  </entry>
  
  <entry>
    <title>Array</title>
    <link href="http://ridiculousfish.com/blog/posts/array.html"/>
    <updated>2005-12-23T00:00:00-08:00</updated>
    <id>http://ridiculousfish.com/posts/array</id>
    <content type="html">&lt;b&gt;Our arrays, &lt;i&gt;aren&#39;t&lt;/i&gt;.&lt;/b&gt;

&lt;p&gt;There, that&#39;s known as a teaser.  You see it in television all the time.  &quot;Find out which common household plant devours pets at night...&lt;i&gt;but first&lt;/i&gt;.&quot;  And then you have to sit through and watch the stuff about Brad and Angelina shacking up / Shaq driving his new Hummer / Hummer&#39;s new  fragrance before they get to the good stuff, the petnivorous plants.  I don&#39;t know what I&#39;d do without TiVo.  And here I&#39;ve done the same thing as the networks.  Shame on me.  I&#39;ll get to it, I promise.
&lt;h3&gt;But first&lt;/h3&gt;
&lt;p&gt;But first, let&#39;s talk about data structures.  I&#39;ll try to make this more interesting than Donald Trump&#39;s new reality fragrance SUV.  Data structures are really important, we&#39;re lead to believe, so important that entire classes in CS curricula discuss nothing else all year.  Gosh!  Let&#39;s look at &lt;a href=&quot;http://java.sun.com/j2se/1.5.0/docs/guide/collections/reference.html&quot;&gt;all the data structures we have available in Java&lt;/a&gt;.
&lt;table style=&quot;border-spacing: 8px; font-family: Monaco, Courier New, Courier, monospace; font-size: 8pt;&quot;&gt;
	&lt;tr&gt;
		&lt;td&gt;HashSet&lt;/td&gt; &lt;td&gt;TreeSet&lt;/td&gt; &lt;td&gt;LinkedHashSet&lt;/td&gt; &lt;td&gt;ArrayList&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;LinkedList&lt;/td&gt; &lt;td&gt;PriorityQueue&lt;/td&gt; &lt;td&gt;HashMap&lt;/td&gt; &lt;td&gt;TreeMap&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;LinkedHashMap&lt;/td&gt; &lt;td&gt;WeakHashMap&lt;/td&gt; &lt;td&gt;IdentityHashMap&lt;/td&gt; &lt;td&gt;CopyOnWriteArrayList&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;CopyOnWriteArraySet&lt;/td&gt; &lt;td&gt;EnumSet&lt;/td&gt; &lt;td&gt;EnumMap&lt;/td&gt; &lt;td&gt;ConcurrentLinkedQueue&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;LinkedBlockingQueue&lt;/td&gt; &lt;td&gt;ArrayBlockingQueue&lt;/td&gt; &lt;td&gt;PriorityBlockingQueue&lt;/td&gt; &lt;td&gt;DelayQueue&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;SynchronousQueue&lt;/td&gt; &lt;td&gt;ConcurrentHashMap&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
That&#39;s 22, by my count, excluding the legacy classes like Vector.
&lt;p&gt;Here&#39;s &lt;a href=&quot;http://www.sgi.com/tech/stl/table_of_contents.html&quot;&gt;the data structures we have in standard C++&lt;/a&gt;:
&lt;table style=&quot;border-spacing: 8px; font-family: Monaco, Courier New, Courier, monospace; font-size: 8pt;&quot;&gt;
	&lt;tr&gt;
		&lt;td&gt;vector&lt;/td&gt; &lt;td&gt;deque&lt;/td&gt; &lt;td&gt;list&lt;/td&gt; &lt;td&gt;slist&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;bit_vector&lt;/td&gt; &lt;td&gt;set&lt;/td&gt; &lt;td&gt;map&lt;/td&gt; &lt;td&gt;multiset&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;multimap&lt;/td&gt; &lt;td&gt;hash_set&lt;/td&gt; &lt;td&gt;hash_map&lt;/td&gt; &lt;td&gt;hash_multiset&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;hash_multimap&lt;/td&gt; &lt;td&gt;stack&lt;/td&gt; &lt;td&gt;queue&lt;/td&gt; &lt;td&gt;priority_queue&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;bitset&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
That&#39;s, uh, 17.  Here&#39;s what I noticed while writing these up: most of these classes tell you how they work, right in the name.  CopyOnWriteArraySet is a set that implements copy-on-write and is backed by an array.  ArrayList is a list implemented via an array.  hash_multimap is a multi-map implemented via hashing.  And so on.
&lt;h3&gt;CoreFoundation&lt;/h3&gt;
&lt;p&gt;I&#39;m going to compare those to &lt;a href=&quot;http://developer.apple.com/documentation/CoreFoundation/index.html&quot;&gt;CoreFoundation&lt;/a&gt;.  CoreFoundation, if you&#39;re a bit hazy, is Apple&#39;s framework that &amp;quot;sits below&amp;quot; Carbon and Cocoa, and is one of the few places where these two APIs meet.  CoreFoundation has collections, so that other APIs like Quartz that take and return collections don&#39;t need separate Carbon and Cocoa interfaces.  But the real reason I&#39;m talking about CoreFoundation is that it&#39;s &lt;a href=&quot;http://developer.apple.com/darwin/cflite.html&quot;&gt;open source&lt;/a&gt;.
&lt;p&gt;Here&#39;s &lt;a href=&quot;http://developer.apple.com/documentation/CoreFoundation/Conceptual/CFCollections/index.html&quot;&gt;all the CoreFoundation collections&lt;/a&gt;, leaving out the immutable variants:
&lt;table style=&quot;border-spacing: 8px; font-family: Monaco, Courier New, Courier, monospace; font-size: 8pt;&quot;&gt;
	&lt;tr&gt;
		&lt;td&gt;CFMutableDictionary&lt;/td&gt; &lt;td&gt;CFMutableBag&lt;/td&gt; &lt;td&gt;CFMutableBitVector&lt;/td&gt; &lt;td&gt;CFMutableSet&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td&gt;CFMutableArray&lt;/td&gt; &lt;td&gt;CFBinaryHeap&lt;/td&gt; &lt;td&gt;CFMutableTree&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
That&#39;s only 7!  And &lt;a href=&quot;http://www.opensource.apple.com/darwinsource/10.4.3/CF-368.18/Collections.subproj/&quot;&gt;these are all the files?&lt;/a&gt;  Doesn&#39;t Apple know how important data structures are?  And most of those names don&#39;t even tell you how they work.  CFMutableBag?  What&#39;s that?  Where&#39;s the, like, CFMutableTreeBag and CFMutableHashBag?  But at least some do tell you how they work, like CFBinaryHeap and CFMutableArray.  Right?
&lt;p&gt;Right?
&lt;h3&gt;The array that wasn&#39;t&lt;/h3&gt;
Take a look in CFArray, at &lt;a href=&quot;http://www.opensource.apple.com/darwinsource/10.4.3/CF-368.18/Collections.subproj/CFArray.h&quot;&gt;this strange comment:&lt;/a&gt;
&lt;pre&gt;
	The access time for a value in the array is guaranteed to be at
	worst O(lg N) for any implementation, current and future, but will
	often be O(1) (constant time). Linear search operations similarly
	have a worst case complexity of O(N*lg N), though typically the
	bounds will be tighter, and so on. Insertion or deletion operations
	will typically be linear in the number of values in the array, but
	may be O(N*lg N) clearly in the worst case in some implementations.
	There are no favored positions within the array for performance;
	that is, it is not necessarily faster to access values with low
	indices, or to insert or delete values with high indices, or
	whatever.
&lt;/pre&gt;
&lt;p&gt;It&#39;s like Apple skipped out on some sophomore CS lectures.  Everyone knows that arrays don&#39;t have logarithmic lookups - they have constant time lookups.  But not these &amp;quot;arrays!&amp;quot; (necessarily!)  In fact, you might notice that the guarantees Apple does make are weak enough for CFArray to be a hash table or binary tree.  Talk about implementation latitude!  Is there any payoff?
&lt;p&gt;Let&#39;s try some operations and see how CFArray compares.  Well take an array with 100,000 values in it and time inserting, deleting, and getting items, each from the beginning, end, and random positions, for CFArrays, an STL vector, and a &amp;quot;na&amp;#239;ve&amp;quot; C array.  Then we&#39;re going to do it again starting with 200,000 elements, then 300,000, etc. up to one million.  Whoo, that&#39;s a lot of permutations.  I don&#39;t want to do all that.  Lovely assistant?
&lt;p&gt;&lt;span style=&quot;font-variant: small-caps;&quot;&gt;Lov. Asst.&lt;/span&gt;: &lt;span style=&#39;color: #fa77f0; font-family: &quot;Apple Chancery&quot;&#39;&gt;Mmmmm, sir?&lt;/span&gt;
&lt;p&gt;Go write that thing I said.
&lt;p&gt;&lt;span style=&quot;font-variant: small-caps;&quot;&gt;Lov. Asst.&lt;/span&gt;: &lt;span style=&#39;color: #fa77f0; font-family: &quot;Apple Chancery&quot;&#39;&gt;Yes, sir.&lt;/span&gt;
&lt;p&gt;Isn&#39;t she great?
&lt;p&gt;&lt;span style=&quot;font-variant: small-caps;&quot;&gt;Lov. Asst.&lt;/span&gt;: &lt;span style=&#39;color: #fa77f0; font-family: &quot;Apple Chancery&quot;&#39;&gt;Done, sir.&lt;/span&gt;
&lt;p&gt;Thank you.  I&#39;ve enclosed my source code &lt;a href=&quot;/blog/files/array/ArrayStuff.zip&quot;&gt;here&lt;/a&gt;; if you want to reproduce my results, run the &lt;span class=&quot;inline_code&quot;&gt;test.py&lt;/span&gt; file inside it.  As I said, we&#39;re doing various operations while varying the initial size of the array.  All of the results are expressed as a multiple of the result for an array with 100,000 values.  That means that if the green line is higher than the red one, it doesn&#39;t mean that the green operation was more expensive than the red one in absolute terms, but that the green one slows down more (as a percentage) than the red one as the array size increases.  A line going up means that the operation becomes more expensive with larger arrays, and a line staying flat means its expense does not change.

&lt;h3&gt;Graphs&lt;/h3&gt;
Here&#39;s what I get for my quicky na&amp;#239;ve C array:&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/blog/images/array/naive_results.jpg&quot; width=&quot;675&quot; height=&quot;450&quot;/&gt;&lt;br /&gt;
Ok, so what does this mean again?  The green line is at about 50 for a length of 1,000,000, so inserting data at random locations in my C array is about 50 times slower than doing it for a length of 100,000.  (Ouch!)  But no real surprises here; insertion at the end is constant (flat), insertion at random locations or at the beginning is roughly linear.

&lt;p&gt;Here&#39;s what I get for the STL vector template:&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/blog/images/array/vector_results.jpg&quot; width=&quot;675&quot; height=&quot;450&quot;/&gt;&lt;br /&gt;
Right out of a textbook.  Insertions and deletions take linear time, except for at the end where they take constant time, and lookups are always constant.

&lt;p&gt;Now for CFArray:&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;/blog/images/array/cfarray_results.jpg&quot; width=&quot;675&quot; height=&quot;450&quot;/&gt;&lt;br /&gt;
Say what?  I was so surprised by this, I had to rerun my test, but it seems to be right.  Let&#39;s catalog this unusual behavior:
&lt;br /&gt;
&lt;ul&gt;
	&lt;li&gt;Insertion or deletion at the beginning or end all take linear time up to 300,000 elements, at which point they start taking constant time; the operations for large arrays are no more expensive than for arrays of 300,000 elements.&lt;/li&gt;
	&lt;li&gt;Insertion or deletion at random locations starts out taking linear time, but suddenly becomes &lt;i&gt;less&lt;/i&gt; expensive and switches to constant time.  Insertion in an array of 1,000,000 elements is as expensive as for 100,000 elements, but 200,000 is more expensive than either.&lt;/li&gt;
	&lt;li&gt;Walking forwards or backwards takes constant time (as expected), but walking in a random order appears to take linear time up to about 300,000 elements - something very unusual (usually it&#39;s equally as fast to access any element).  This suggests that there is some remembered state or cache when accessing elements in a CFArray.  (And &lt;a href=&quot;http://www.opensource.apple.com/darwinsource/10.4.3/CF-368.18/Collections.subproj/CFStorage.c&quot;&gt;CFStorage&lt;/a&gt;, used by CFArray, seems to confirm that.)&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;So it sure looks like CFArray is switching data structure implementations around 30,000 elements.  And I believe there&#39;s lots more implementations that I haven&#39;t discovered, for smaller arrays and for immutable arrays.
&lt;h3&gt;So what?&lt;/h3&gt;

&lt;p&gt;I guess I&#39;ve got to come to a conclusion or three.  Ok, here we go, in order of increasing broadness:
&lt;ol&gt;
	&lt;li style=&quot;margin-bottom: 8px&quot;&gt;CFArrays and NSArrays are good at some things that arrays are traditionally bad at.  Don&#39;t go rolling your own dequeue just because you plan to insert a lot of stuff in the beginning of an array.  Try CFArray or NSArray first, if they&#39;re easier, and optimize if it&#39;s too slow or doesn&#39;t fit.&lt;/li&gt;
	&lt;li style=&quot;margin-bottom: 8px&quot;&gt;Apple often (though not always) names a class in terms of what it does, not how it does it.  This is the spirit of Objective-C dynamic messaging: a message says what to do, but not how to do it.  The way it does it may be different from what you expect.  Which leads me to:&lt;/li&gt;
	&lt;li style=&quot;margin-bottom: 8px&quot;&gt;Don&#39;t second guess Apple, because Apple has already second guessed YOU.  In a good way, of course.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;What about PHP?&lt;/h3&gt;
PHP fakes you out with arrays as well - they&#39;re associative &lt;i&gt;or&lt;/i&gt; numeric, and can be used as hash tables.  Something strange is going on there too.  Now I &lt;i&gt;think&lt;/i&gt; from &lt;a href=&quot;http://www.zend.com/php/internals/extension-writing2.php&quot;&gt;reading this&lt;/a&gt; and looking at some of the Zend code that arrays in PHP are straightforward hash tables with a cursor for fast enumeration and don&#39;t do any of the polymorphic trickery that CFArray does.  But I&#39;m not sure; if you know more about PHP&#39;s array implementation I&#39;d love it if you posted in the comments!</content>
  </entry>
  
  <entry>
    <title>Float</title>
    <link href="http://ridiculousfish.com/blog/posts/float.html"/>
    <updated>2005-09-26T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/float</id>
    <content type="html">&lt;h3&gt;Why now?&lt;/h3&gt;
My friend over at SciFiHiFi suggests that &lt;a href=&quot;http://weblog.scifihifi.com/2004/12/25/data-structures-as-culture/&quot;&gt;Microsoft likes trees, but Apple likes hash tables&lt;/a&gt;.  Well, I think that Microsoft prefers integer arithmetic, while Apple (or at least Cocoa) likes floating point.  Here&#39;s a bunch of examples I found:
&lt;ul&gt;
&lt;li&gt;Take color.  Microsoft&#39;s API (you know, THAT one) &lt;a href=&quot;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemdrawingcolormemberstopic.asp&quot;&gt;makes colors from integer components&lt;/a&gt;, but Cocoa &lt;a href=&quot;http://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/ObjC_classic/Classes/NSColor.html#//apple_ref/doc/uid/20000353-colorWithCalibratedRed_green_blue_alpha_&quot;&gt;makes colors from floats&lt;/a&gt;.
&lt;/li&gt;&lt;li&gt;Microsoft does sliders (like the iTunes volume control) with &lt;a href=&quot;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemwindowsformstrackbarclassminimumtopic.asp&quot;&gt;with integers&lt;/a&gt;, but &lt;a href=&quot;http://developer.apple.com/documentation/Cocoa/Reference/ApplicationKit/ObjC_classic/Classes/NSSlider.html#//apple_ref/doc/uid/20000125-maxValue&quot;&gt;NSSlider is floating point&lt;/a&gt;.
&lt;/li&gt;&lt;li&gt;Time, too.  Microsoft &lt;a href=&quot;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemdatetimeclasstopic.asp&quot;&gt;does time in integers&lt;/a&gt;, but &lt;a href=&quot;http://developer.apple.com/documentation/Cocoa/Reference/Foundation/ObjC_classic/TypesAndConstants/FoundationTypes.html#//apple_ref/doc/c_ref/NSTimeInterval&quot;&gt;Apple does it with doubles&lt;/a&gt;.
&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;(Apple does it with doubles - hey, that&#39;s a good bumper sticker.)
&lt;p&gt;Ahem.  Ok, so Apple is floating-point happy.  (And it didn&#39;t always used to be this, way, of course.  Quickdraw used integer coordinates, and Quartz switched to floating point, &lt;a href=&quot;http://www.macdevcenter.com/pub/a/mac/2004/09/28/quartz.html&quot;&gt;remember?)&lt;/a&gt;.  So, as a Mac programmer, I should really get a good handle on these floating point thingies.  But floating point numbers seem pretty mysterious.  I know that they can&#39;t represent every integer, but I don&#39;t really know which integers they actually can represent.  And I know that they can&#39;t represent every fraction, and that as the numbers get bigger, the fractions they can represent get less and less dense, and the space between each number becomes larger and larger.  But how fast?  What does it all LOOK like?
&lt;h3&gt;Background&lt;/h3&gt;
Well, here&#39;s what I do know.  Floating point numbers are a way of representing fractions.  The Institute of Electrical and Electronics Engineers made it up and gave it the memorable name &amp;quot;IEEE 754,&amp;quot; thus ensuring it would be teased as a child.  Remember scientific notation?  To represent, say, 0.0000000000004381, we can write instead 4.381 x 10&lt;sup&gt;-13&lt;/sup&gt;.  That takes a lot less space, which means we don&#39;t need as many bits.  The 4.381 is called the mantissa, and that -13 is the exponent, and 10 is the base.
&lt;p&gt;Floating point numbers are just like that, except the parts are all represented in binary and the base is 2.  So the number .01171875, that&#39;s 3 / 256, would be written 11 x 2&lt;sup&gt;-100000000&lt;/sup&gt;.
&lt;p&gt;Or would it?  After all, 3/256 is 6/512, right?  So maybe it should be 110 x 2&lt;sup&gt;-1000000000&lt;/sup&gt;?
&lt;p&gt;Or why not 1.1 x 2&lt;sup&gt;-10000000&lt;/sup&gt;?
&lt;p&gt;Ding!  That happens to be the right one; that is, the one that computers use, the one that&#39;s part of the IEEE 754 standard.  To represent a number with floating point, we multiply or divide by 2 until the number is at least 1 but less than 2, and then that number becomes the mantissa, and the exponent is the number of times we had to multiply (in which case it&#39;s negative) or divide (positive) to get there.
&lt;h3&gt;Tricksy hobbit&lt;/h3&gt;
&lt;p&gt;Since our mantissa is always at least 1 but less than 2, the 1 bit will always be set.  So since we know what it will always be, let&#39;s not bother storing it at all.  We&#39;ll just store everything after the decimal place.  That&#39;s like saying &quot;We&#39;re never going to write 0.5 x 10&lt;sup&gt;-3&lt;/sup&gt;, we&#39;ll always write 5. x 10&lt;sup&gt;-4&lt;/sup&gt; instead.  So we know that the the leftmost digit will never be 0.  That saves us one whole numeral, the numeral 0.&quot;  A WHOLE numeral.  Woo-hoo?  But with binary, taking out one numeral means there&#39;s only one numeral left.  We always know that the most significant digit is 1, so we don&#39;t bother storing it.  What a hack!  Bit space in a floating point representation is almost as expensive as housing in Silicon Valley.
&lt;p&gt;So the number 3 / 256 would be written in binary as .1 x 2&lt;sup&gt;-10000000&lt;/sup&gt;, and we just remember that there&#39;s another 1 in front of the decimal point.
&lt;h3&gt;Unfair and biased&lt;/h3&gt;
&lt;p&gt;We need to store both positive exponents, for representing big numbers, and negative exponents, for representing little ones.  So do we use two&#39;s complement to store the exponent, that thing we hated figuring out in school but finally have a grasp on it?  The standard for representing integers?  (The exponent is, after all, an integer.)  Nooooooo.  That would be toooooo easy.  Instead, we bias the number.  That just means that the number is always stored as unsigned, ordinary positive binary representation, but the REAL number is what we stored, minus 127!  So if the bits say the exponent is 15, that means the REAL exponent is -112.
&lt;h3&gt;A good sign&lt;/h3&gt;
&lt;p&gt;We also need to represent positive and negative numbers (remember, a negative exponent means a small but positive number; we don&#39;t have a way of representing actual negative numbers yet).  At least there&#39;s no real trickery involved here - we just tack on a bit that&#39;s 0 for a positive number, and 1 for a negative number.
&lt;h3&gt;Let&#39;s make a float&lt;/h3&gt;
&lt;p&gt;So now that we have a handle on all the bizarre hacks that go into representing a float, let&#39;s make sure we did it right.  Let&#39;s put together some bits and call them a float.  Let me bang some keys on the top of my keyboard: -358974.27.  There.  That will be our number.
&lt;p&gt;First, we need a place to put our bits that&#39;s the same size as a float.  Unsigned types have simple bit manipulation semantics, so we&#39;ll use one of those, and start with 0.
&lt;p&gt;
&lt;pre&gt;
   &lt;span style=&#39;color: red;&#39;&gt;unsigned val = 0;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Ok, next, our number is negative, so let&#39;s set the negative bit.  In IEEE 754, this is the most significant bit.
&lt;pre&gt;
   unsigned val = 0;
   &lt;span style=&#39;color: red;&#39;&gt;val |= (1 &amp;lt;&amp;lt; 31);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;All right.  Start dividing by 2.  I divided 18 times and wound up with 1.369 something, which is between 1 and 2.  That means that the exponent is 18.  But remember, we have to store it biased, which means that we add 127.  In IEEE 754, we get 8 bits for the exponent, and they go in the next 8 most significant bits.
&lt;pre&gt;
   unsigned val = 0;
   val |= 1 &amp;lt;&amp;lt; 31;
   &lt;span style=&#39;color: red;&#39;&gt;val |= (18 + 127) &amp;lt;&amp;lt; 23;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Now the mantissa.  Ugh.  Ok, 358974.27 in straight binary is 1010111101000111110.010001010001 and then a bunch of others 0s and 1s.  So the mantissa is that, minus the decimal place.  And IEEE 754 says we get 23 bits for it.  So first, chop off the most significant bit, because we know it will always be one, and throw out the decimal point, and then round to 23 bits.  That&#39;s 01011110100011111001001, which is, uhh, 3098569.  There.  That&#39;s our mantissa, which occupies the remaining 23 bits.
&lt;pre&gt;
   unsigned val = 0;
   val |= 1 &amp;lt;&amp;lt; 31;
   val |= (18 + 127) &amp;lt;&amp;lt; 23;
   &lt;span style=&#39;color: red;&#39;&gt;val |= 3098569;
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Ok, let&#39;s pretend it&#39;s a float, print it out, and see how we did!
&lt;pre&gt;
&lt;span style=&#39;color: red;&#39;&gt;#include &amp;lt;stdio.h&amp;gt;
int main(void) {&lt;/span&gt;
   unsigned val = 0;
   val |= 1 &amp;lt;&amp;lt; 31;
   val |= (18 + 127) &amp;lt;&amp;lt; 23;
   val |= 3098569;
   &lt;span style=&#39;color: red;&#39;&gt;printf(&amp;quot;Our number is %f, and we wanted %f\n&amp;quot;, *(float*)&amp;val, -358974.27f);
   return 0;
}
&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;This outputs:&lt;br /&gt;
&lt;pre&gt;Our number is -358974.281250, and we wanted -358974.281250&lt;/pre&gt;
Hey, it worked!  Or worked close enough!  I guess -358974.27 can&#39;t be represented exactly by floating point numbers.
&lt;p&gt;(If you&#39;re on a little-endian machine like Intel, you have to do some byte-swapping to make that work.  I think.)
&lt;h3&gt;Loose ends&lt;/h3&gt;
&lt;p&gt;There&#39;s a few loose ends here.  Remember, we get the mantissa by multiplying or dividing until our number is between 1 and 2, but what if our number started out as zero?  No amount of multiplying or dividing will ever change it.
&lt;p&gt;So we cheat a little.  We give up some precision and make certain exponents &quot;special.&quot;
&lt;p&gt;When the stored exponent is all bits 1 (which would ordinarily mean that the real exponent is 128, which is 255 minus the bias), then everything takes on a special meaning:
&lt;ul&gt;
&lt;li&gt;If the mantissa is zero, then the number is infinity.  If the sign bit is also set, then the number is negative infinity, which is like infinity but less optimistic.
&lt;/li&gt;&lt;li&gt;If the mantissa is anything else, then the number isn&#39;t.  That is, it&#39;s Not a Number, and Not a Numbers aren&#39;t anything.  They aren&#39;t even themselves.  Don&#39;t believe me?
&lt;pre&gt;
#include &amp;lt;stdio.h&amp;gt;
int main(void) {
   unsigned val = -1;
   float f = *(float*)&amp;val;
   int isEqual = (f==f);
   printf(&amp;quot;%f %s %f\n&amp;quot;, f, isEqual ? &quot;equals&quot; : &quot;does not equal&quot;, f);
   return 0;
}
&lt;/pre&gt;
This outputs &lt;span style=&#39;color: red;&#39;&gt;nan does not equal nan&lt;/span&gt;.  Whoa, that&#39;s cosmic.
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;When the stored exponent is all bits 0 (which would ordinarily mean that the real exponent is -127, which is 0 minus the bias), then everything means something else:
&lt;ul&gt;
&lt;li&gt;If all the other bits are also 0, then the floating point number is 0.  So all-bits-0 corresponds to floating-point 0...phew!  Some sanity!
&lt;/li&gt;&lt;li&gt;If all the bits are 0 EXCEPT the sign bit, then we get negative 0, which is an illiterate imperfect copy of 0 brought about by Lex Luthor&#39;s duplicator ray.
&lt;/li&gt;&lt;li&gt;If any of the other bits are 1, then we get what is called a denormal.  Denormals allow us to represent some even smaller numbers, at the cost of precision and (often) performance.  A lot of performance.  We&#39;re talking over a thousand cycles to handle a denormal.  It&#39;s too involved a topic to go into here, but there&#39;s a really interesting discussion of the choices Apple has made for denormal handling, and why, and how they&#39;re changing for Intel, that&#39;s right &lt;a href=&quot;http://developer.apple.com/documentation/Performance/Conceptual/Accelerate_sse_migration/migration_sse_translation/chapter_4_section_2.html&quot;&gt;here&lt;/a&gt;.
&lt;/li&gt;&lt;/ul&gt;
&lt;h3&gt;Please stop boring us&lt;/h3&gt;
So I set out to answer the question &quot;What does it all LOOK like?&quot;  We&#39;re ready to paint a pretty good picture.
&lt;p&gt;Imagine the number line.  Take the part of the line between 1 and 2 and chop it up into eight million evenly spaced pieces (8388608, to be exact, which is 2&lt;sup&gt;23&lt;/sup&gt;).  Each little chop is a number that we can represent in floating point.
&lt;p&gt;Now take that interval, stretch it out to twice its length, and move it to the right, so that it covers the range from 2 to 4.   Each little chop gets twice as far from its neighbor as it was before.
&lt;p&gt;Stretch the new interval again, to twice its length, so that it covers the range 4 to 8.  Each chop is now four times as far away from its neighbor as it was before.  Between, say, 5 and 6, there are only about two million numbers we can represent, compared to the eight million between 1 and 2.
&lt;p&gt;Here, I&#39;ll draw you a picture.&lt;br /&gt;
&lt;img src=&quot;/blog/images/float/line_thingy.gif&quot; width=&quot;800&quot; height=&quot;157&quot;/&gt;
&lt;p&gt;There&#39;s some interesting observations here:
&lt;ul&gt;
&lt;li&gt;As your number gets bigger, your accuracy decreases - that is, the space between the numbers you can actually represent increases.  You knew that already.
&lt;/li&gt;&lt;li&gt;But the accuracy doesn&#39;t decrease gradually.  Instead, you lose accuracy all at once, in big steps.  And every accuracy decrease happens at a power of 2, and you lose half your accuracy - meaning you can only represent half as many numbers in a fixed-length range.
&lt;/li&gt;&lt;li&gt;Speaking of which, every power of 2 is exactly representable, up to and including 2&lt;sup&gt;127&lt;/sup&gt; for floats and 2&lt;sup&gt;1023&lt;/sup&gt; for doubles.
&lt;/li&gt;&lt;li&gt;Oh, and every integer from 0 up to and including 2&lt;sup&gt;24&lt;/sup&gt; (floats) or 2&lt;sup&gt;53&lt;/sup&gt; (doubles) can be exactly represented.  This is interesting because it means a double can exactly represent anything a 32-bit int can; there is nothing lost in the conversion from int-&gt;double-&gt;int.
&lt;/li&gt;&lt;/ul&gt;
&lt;h3&gt;Zero to One&lt;/h3&gt;
&lt;p&gt;On the other side of one, things are so similar that I can use the same picture.&lt;br /&gt;
&lt;img src=&quot;/blog/images/float/line_thingy_2.gif&quot; width=&quot;800&quot; height=&quot;157&quot;/&gt;
&lt;p&gt;
The squiggly line represents a change in scale, because I wanted to draw in some denormals, represented by the shorter brown lines.&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;At each successive half, the density of our lines doubles.
&lt;/li&gt;&lt;li&gt;Below .125, I drew a gradient &lt;strike&gt;because I&#39;m lazy&lt;/strike&gt; to show that the lines are so close together as to be indistinguishable from this distance.
&lt;/li&gt;&lt;li&gt;1/2, 1/4, 1/8, etc. are all exactly representable, down to 2&lt;sup&gt;-126&lt;/sup&gt; for normalized numbers, and 2&lt;sup&gt;-149&lt;/sup&gt; with denormals.
&lt;/li&gt;&lt;li&gt;The smallest &amp;quot;regular&amp;quot; (normal) floating point number is 2&lt;sup&gt;-126&lt;/sup&gt;, which is about .0000000000000000000000000000000000000117549435.  The first (largest) denormal for a float is that times .99999988079071044921875.
&lt;/li&gt;&lt;li&gt;Denormals, unlike normalized floats, are regularly spaced.  The smallest denormal is 2&lt;sup&gt;-149&lt;/sup&gt;, which is about .000000000000000000000000000000000000000000001401298.
&lt;/li&gt;&lt;li&gt;The C standard says that &amp;lt;float.h&amp;gt; defines the macro FLT_MIN, which is the smallest normalized floating point number.  Don&#39;t be fooled!  Denormals allow us to create and work with floating point numbers even smaller than FLT_MIN.
&lt;/li&gt;&lt;li&gt;&quot;What&#39;s the smallest floating point number in C?&quot; is a candidate for the most evil interview question ever.
&lt;/li&gt;&lt;/ul&gt;
So that&#39;s what floating point numbers look like.  Now I know!  If I made a mistake somewhere, please post a correction in the comments.</content>
  </entry>
  
  <entry>
    <title>Spam</title>
    <link href="http://ridiculousfish.com/blog/posts/spam.html"/>
    <updated>2005-08-09T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/spam</id>
    <content type="html">&lt;p&gt;Well, they found me.  I knew it was only a matter of time.  It happens to every blog.  Comment spam, and a lot of it.  But nobody told me it would be like this!  I got about 200 messages an hour.  I mean, the attention is flattering, but still, my goodness!  Let&#39;s see what we can do about that.
&lt;p&gt;(If you hate math and all you care about is how to post a comment, go to &lt;a href=&quot;#punchline&quot;&gt;The Punchline&lt;/a&gt;)
&lt;h3&gt;&amp;pi;&lt;/h3&gt;

&lt;p&gt;This fish was a math major in college, and mathematics is still fascinating.  It&#39;s haunted, haunted by numbers!  Particular numbers appear over and over in unexpected places, much like Spam, the topic of this post.  And the creepiest number is &amp;pi;.  I&#39;m going to calculate &amp;pi;, and I need your help!  But we have to start at the other end, with prime numbers.
&lt;h3&gt;Relatively prime&lt;/h3&gt;
&lt;p&gt;Every number has a prime factorization.  But we can also talk about numbers being relatively prime, or coprime.  Two numbers are relatively prime if they don&#39;t share any factors.  If two numbers share a factor, then they also share a prime factor, by the fundamental theorem of arithmetic.  Yeah, simple stuff.  I saw you scan ahead; you know this already.
&lt;p&gt;Now if we pick two random positive integers, uhh, we&#39;ll call them &amp;quot;A&amp;quot; and &amp;quot;B&amp;quot;.  There.  What&#39;s the probability that A and B are relatively prime?  Well, two numbers are relatively prime if they don&#39;t share any prime factors - that is, if they&#39;re not both divisible by some prime.  What&#39;s the first prime?  Let me check my list of primes...oh, 2!  For two random numbers, what&#39;s the probability that A and B are not BOTH divisible by 2?  Well, that&#39;s, uhm, multiply half by half, subtract from one...75%.  &lt;img style=&quot;vertical-align: middle&quot; src=&quot;/blog/images/math/threefourths.gif&quot;/&gt;.  Yeah.
&lt;p&gt;What&#39;s the probability that they&#39;re not both divisible by 3?  Well, every third number is divisible by 3, so A and B would both have to be a &amp;quot;third number&amp;quot; to be divisible by 3.  The chance of that happening is &lt;img style=&quot;vertical-align: middle&quot; src=&quot;/blog/images/math/onethirdsquared.gif&quot;/&gt; , so the chance of that NOT happening is one minus that, uhm, &lt;img style=&quot;vertical-align: middle&quot; src=&quot;/blog/images/math/eightninths.gif&quot;/&gt;.
&lt;p&gt;Oh, I get it.  The probability that they&#39;re not both divisible by 5 is &lt;img style=&quot;vertical-align: middle&quot; src=&quot;/blog/images/math/twentyfourtwentyfifths.gif&quot;/&gt;.  And so on.  Ok, so the probability that A and B are not both divisible by a prime number P is &lt;img style=&quot;vertical-align: middle&quot; src=&quot;/blog/images/math/psquaredfraction.gif&quot;/&gt;.
&lt;h3&gt;Multiplying it out&lt;/h3&gt;
&lt;p&gt;Now what?  Well, for every prime P, we know that it does not divide both A and B with likelihood &lt;img style=&quot;vertical-align: middle&quot; src=&quot;/blog/images/math/psquaredfraction.gif&quot;/&gt;.  How about for all primes?  If no prime divides both A and B, then A and B are relatively prime!  When you want to know if this happens AND that happens, you multiply their probabilities.  So multiply the probabilities for each prime, like this: &lt;img style=&quot;vertical-align: middle&quot; src=&quot;/blog/images/math/series.gif&quot;/&gt;
&lt;p&gt;Oh, make that fancy math-speak.  &lt;img style=&quot;vertical-align: middle&quot; src=&quot;/blog/images/math/productseries.gif&quot;/&gt;
&lt;p&gt;Uh...ok, what&#39;s that?  It&#39;s more than I&#39;m going to calculate here, that&#39;s for sure.  But &lt;a href=&quot;http://www.treasure-troves.com/math/PrimeProducts.html&quot;&gt;someone else already did&lt;/a&gt;.  It&#39;s (drumroll) &lt;img style=&quot;vertical-align: middle&quot; src=&quot;/blog/images/math/sixoverpisquared.gif&quot;/&gt;.
&lt;p&gt;Whoa, where&#39;d that come from?  What on earth could the ratio of circumference to diameter yadda yadda have to do with integers being relatively prime?  Nevertheless, there it is.
&lt;h3&gt;So what?&lt;/h3&gt;
&lt;p&gt;So we started with prime numbers and ended with pi.  So what?  Well, here&#39;s how it&#39;s going to work.  You&#39;re going to give me two big random numbers, and I&#39;m going to record them and figure out if they&#39;re relatively prime or not.  Then I&#39;ll figure out the percentage of pairs that were prime, and flip it over and multiply by six and take the square root, and we should get &amp;pi;.  Isn&#39;t this cool?  We can calculate &amp;pi; based solely on the random numbers you indiscriminately smash on your keyboards.
&lt;p&gt;But I called this post &amp;quot;Spam.&amp;quot;  What for?  Well, as &lt;a href=&quot;http://www.nextthing.org/archives/2005/07/16/a-few-upgrades&quot;&gt;Andrew Wooster&lt;/a&gt; points out, stopping spam can be as easy as adding an extra field to the comment form.  Have you guessed the punchline yet?
&lt;h3&gt;The Punchline&lt;/h3&gt;
&lt;p&gt;&lt;a name=&quot;punchline&quot;&gt;&lt;/a&gt;You will give me your random keypresses!  &lt;b&gt;(The power of mathematics compels you!)&lt;/b&gt;  There&#39;s a new box in the comment form, with two fields in it.  When you want to post a comment, type two big random positive integers into it.  That&#39;s right, just bang whatever on the number keys.  The only rule is that the numbers have to be positive and from 11 to 35 digits.  If you don&#39;t do this, you&#39;ll get an error message and your comment will be refused.  If you do, your comment will be posted and you&#39;ll find out what &amp;pi; is so far.  This will happen for every post.
&lt;p&gt;And if you just want to donate your keyboard banging without commenting, there&#39;s a similar box in the upper right of every page.  Put your numbers in there and click the button.  You&#39;ll be taken right where you are, but you&#39;ll know what &amp;pi; is.</content>
  </entry>
  
  <entry>
    <title>objc_msgSend</title>
    <link href="http://ridiculousfish.com/blog/posts/objc_msgsend.html"/>
    <updated>2005-08-01T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/objc_msgsend</id>
    <content type="html">&lt;p&gt;Sending messages can be fun!  All you have to do is make a game of it.  What kind of game, you ask?  Well, for example, we could see how many we can send in four seconds, then try to beat that record.  (Apologies to Bart and Principal Skinner.)
&lt;p&gt;Objective-C is a dynamic language.  When you send a message to an object, gcc emits a call to &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend()&lt;/span&gt; or one of its specialized, similiar functions.  Since every Objective-C message send is funneled through &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend()&lt;/span&gt;, making &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend()&lt;/span&gt; as fast as possible is a priority.  Let&#39;s see how fast we are and if we could do better.
&lt;h3&gt;Profiling objc_msgSend()&lt;/h3&gt;
&lt;p&gt;I wrote some code to see how many times Objective-C could call a method in four seconds.  I set an alarm using the &lt;span class=&quot;inline_code&quot;&gt;alarm()&lt;/span&gt; function.  Then I sent an increment message to an object in a loop until I received the &lt;span class=&quot;inline_code&quot;&gt;SIGALRM&lt;/span&gt; signal, at which point I output how many times the method ran and exit.  I compiled it with gcc4 on Tiger using -O3.  Here is &lt;a href=&quot;/blog/misc/objc_msg_send_test.html&quot;&gt;my Objective-C code&lt;/a&gt;.
&lt;p&gt;Over an average of three runs, I benchmarked 25681135 messages a second.  All right.
&lt;p&gt;As Skinner said, let&#39;s try to beat that record!  And we&#39;ll start by profiling.  My favorite profiling tool on OS X is, of course, &lt;a href=&quot;http://developer.apple.com/tools/sharkoptimize.html&quot;&gt;Shark&lt;/a&gt;.  Let&#39;s run it on our executable.  Ok, &lt;a href=&quot;/blog/images/objc_msgSend_Shark.png&quot;&gt;there we go&lt;/a&gt;.  Shark shows that 16% of the time is spent in the increment method itself, 34% of the time is spent in &lt;span class=&quot;inline_code&quot;&gt;dyld_sub_objc_msgSend()&lt;/span&gt;, and 48% is spent in &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend()&lt;/span&gt; itself.  What is this &lt;span class=&quot;inline_code&quot;&gt;dyld_sub_objc_msgSend()&lt;/span&gt; function and why does it take so much time?
&lt;p&gt;You may already know.  &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend()&lt;/span&gt; is dynamically linked from a dynamic library, namely, libobjc.  In order to call the actual &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend()&lt;/span&gt;, the code jumps to a stub function, &lt;span class=&quot;inline_code&quot;&gt;dyld_stub_objc_msgSend()&lt;/span&gt;, which is responsible for loading the actual &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend()&lt;/span&gt; method and jumping to it.  As you can see, the stub function is relatively expensive.  If we could eliminate the need for it, we could see a performance improvement of up to 33%.
&lt;h3&gt;Plan of attack&lt;/h3&gt;
&lt;p&gt;Here&#39;s one way to get rid of it.  Instead of jumping through the stub function, let&#39;s grab a pointer to &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend()&lt;/span&gt; itself and always call &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend()&lt;/span&gt; through that pointer.  In fact, it&#39;s not so different from inlining the stub.
&lt;p&gt;Easier said than done!  How will we do this?  Well, we could edit the assembly of this little benchmark by hand, or even screw around with the C code, but that&#39;s pretty contrived.  It would be great if we could make gcc do this work for us.
&lt;p&gt;Yep, we&#39;re gonna hack on gcc.  Feel free to download it and do it with me!  Or just follow along vicariously.  For every source file I mention, I will give the path to it in what you just downloaded, and also a link to it on Apple&#39;s opensource site.
&lt;h3&gt;Getting the source&lt;/h3&gt;
&lt;p&gt;Download and extract &lt;a href=&quot;http://www.opensource.apple.com/darwinsource/tarballs/other/gcc-4061.tar.gz&quot;&gt;Apple&#39;s latest public version of gcc&lt;/a&gt;.  As of this writing, it&#39;s gcc-4061.  Put it on a volume with enough space.  Fully built, gcc will take up almost 1.1 GB.
&lt;h3&gt;Building the source&lt;/h3&gt;
&lt;p&gt;All extracted?  Great.  Open up README.Apple in the gcc-4061 directory.  It tells you to run two commands:
&lt;pre class=&quot;code&quot;&gt;
	mkdir -p build/obj build/dst build/sym
        gnumake install RC_OS=macos RC_ARCHS=ppc TARGETS=ppc \
                SRCROOT=`pwd` OBJROOT=`pwd`/build/obj \
                DSTROOT=`pwd`/build/dst SYMROOT=`pwd`/build/sym
&lt;/pre&gt;
&lt;p&gt;Guess what?  You run the commands.  (Notice those are backticks, not single quotes!)  Then go get some coffee or something.  This may take a while, but we only have to do this once.

&lt;p&gt;Back?  Is it done?  STILL?  Ok, I&#39;ll wait.
&lt;h3&gt;Testing our build&lt;/h3&gt;
Done now?  Great.  Try it out.  Compile something, like &lt;a href=&quot;/blog/?page_id=20&quot;&gt;my Objective-C code&lt;/a&gt;, with build/dst/usr/bin/gcc-4.0.  Pretty easy:
&lt;pre class=&quot;code&quot;&gt;
gcc-4061/build/dst/usr/bin/gcc-4.0 -O3 -framework Foundation test1.m ; ./a.out
26129493
&lt;/pre&gt;
Great!  It works!  Now let&#39;s see if we can add our optimization.
&lt;h3&gt;Hacking on gcc&lt;/h3&gt;
&lt;p&gt;All right.  So the plan is to grab a pointer to &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend&lt;/span&gt;, stash it in a function pointer variable, and replace calls to the dynamically linked function &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend()&lt;/span&gt; with jumps through the function pointer.  We could do it all in the compiler and not have to change a line of our benchmark code, but for now let&#39;s just do the last part - replacing calls to &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend()&lt;/span&gt;.  We&#39;ll set up the variable in our Objective-C code, where it will be easier to tweak.
&lt;p&gt;Man, this gcc thing is one big scary project.  How does it all work?  It looks like the source code proper is in the gcc-4061/gcc directory.  Let&#39;s see if we can figure out what gcc does when we send an Objective-C message to an object.  We&#39;ll start at the beginning, where gcc starts, and trace its control flow down into its depths.  What&#39;s the beginning?  Well, the lexer/parser seems like a reasonable choice.  Grep for YACC...bunch of changelogs...ah-ha!  &lt;a href=&quot;http://www.opensource.apple.com/darwinsource/10.4.2/gcc-4061/gcc/c-parse.in&quot;&gt;/gcc-4061/gcc/c-parse.in&lt;/a&gt;!
&lt;p&gt;Ok, we&#39;re in.  Looks like a pretty standard-issue grammar.  This &amp;quot;objcmessageexpr&amp;quot; thing looks promising.  Search for it - it leads us to &lt;span class=&quot;inline_code&quot;&gt;objc_build_message_expr()&lt;/span&gt;.  grep for that...it&#39;s in &lt;a href=&quot;http://www.opensource.apple.com/darwinsource/10.4.2/gcc-4061/gcc/objc/objc-act.c&quot;&gt;/gcc-4061/gcc/objc/objc-act.c&lt;/a&gt;.  Hey, check it out - at the top, it says that it implements classes and message passing for Objective-C.  We&#39;re in the right place.
&lt;p&gt;&lt;span class=&quot;inline_code&quot;&gt;objc_build_message_expr()&lt;/span&gt; calls &lt;span class=&quot;inline_code&quot;&gt;objc_finish_message_expr()&lt;/span&gt; calls &lt;span&gt;build_objc_method_call()&lt;/span&gt; calls &lt;span class=&quot;inline_code&quot;&gt;build_function_call()&lt;/span&gt;...wait, back up.  That last function call looks like it&#39;s actually jumping to the &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend()&lt;/span&gt; function.  Look for this:
&lt;pre class=&quot;code&quot;&gt;
 return build_function_call (t, method_params);
&lt;/pre&gt;
&lt;p&gt;Yeah!  So &lt;span class=&quot;inline_code&quot;&gt;t&lt;/span&gt; there is the function, either &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend()&lt;/span&gt; or a similar function, and &lt;span class=&quot;inline_code&quot;&gt;method_params&lt;/span&gt; are all the arguments.  We want to replace &lt;span class=&quot;inline_code&quot;&gt;t&lt;/span&gt; with our own thing - but only if it&#39;s not returning a struct and is not calling &lt;span class=&quot;inline_code&quot;&gt;super&lt;/span&gt; (we&#39;ll leave those optimizations for another day).
&lt;p&gt;What should we call our messenger function pointer? Let&#39;s call it &lt;i&gt;messengerFunctionPointer&lt;/i&gt;!  That&#39;ll do.  You can call yours whatever you like, as long as you keep track of it and make the obvious changes.
&lt;p&gt;So make this change.  The new code &lt;span style=&#39;color: red;&#39;&gt;is in red&lt;/span&gt;.
&lt;pre class=&quot;code&quot;&gt;
  /* ??? Selector is not at this point something we can use inside
     the compiler itself.  Set it to garbage for the nonce.  */
  t = build (OBJ_TYPE_REF, sender_cast, method, lookup_object, size_zero_node);
  &lt;span style=&#39;color: red;&#39;&gt;if (sender == umsg_decl) t = lookup_name(get_identifier(&quot;messengerFunctionPointer&quot;));&lt;/span&gt;
  return build_function_call (t, method_params);
&lt;/pre&gt;
&lt;p&gt;Ok, what the heck does that do?  Well, it says that if we&#39;re doing an ordinary message send (no struct return, no use of &lt;span class=&quot;inline_code&quot;&gt;super&lt;/span&gt;), to call through whatever is in the variable &lt;span class=&quot;inline_code&quot;&gt;messengerFunctionPointer&lt;/span&gt; instead of the function.  Note that the code doesn&#39;t actually &lt;i&gt;make&lt;/i&gt; the &lt;span class=&quot;inline_code&quot;&gt; messengerFunctionPointer&lt;/span&gt; variable for us; that&#39;s our privilege, in our C code.
&lt;p&gt;What&#39;s interesting about this is that we&#39;ve hooked into gcc&#39;s ordinary variable lookup.  Our messengerFunctionPointer variable can be local, global, static, extern, whatever, as long as it is somehow visible in the scope of any code that send an Objective-C message.
&lt;h3&gt;We can rebuild it.  We have the technology...&lt;/h3&gt;
&lt;p&gt;That&#39;s it!  That wasn&#39;t so bad.  So save the file and rebuild gcc, like you built it before.  Since it only has one file to recompile, it won&#39;t take long.  Here, so you don&#39;t have to scroll up:
&lt;pre class=&quot;code&quot;&gt;
        gnumake install RC_OS=macos RC_ARCHS=ppc TARGETS=ppc \
                SRCROOT=`pwd` OBJROOT=`pwd`/build/obj \
                DSTROOT=`pwd`/build/dst SYMROOT=`pwd`/build/sym
&lt;/pre&gt;
&lt;h3&gt;Better...stronger...faster...&lt;/h3&gt;
&lt;p&gt;All done?  Ok, let&#39;s try recompiling our code from before.
&lt;pre class=&quot;code&quot;&gt;
gcc-4061/build/dst/usr/bin/gcc-4.0 -O3 -framework Foundation test1.m
test1.m: In function &#39;main&#39;:
test1.m:29: internal compiler error: Bus error
&lt;/pre&gt;
&lt;p&gt;Uh-oh!  An ICE!  But of course, it&#39;s looking for our variable called &lt;span class=&quot;inline_code&quot;&gt;messengerFunctionPointer&lt;/span&gt;, which doesn&#39;t exist (and we don&#39;t get any warnings since gcc is looking for the variable after it would normally catch undeclared variables.)  So let&#39;s add it to &lt;a href=&quot;/blog/?page_id=20&quot;&gt;my Objective-C code&lt;/a&gt;, and point it at &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend()&lt;/span&gt;, which we have to declare as well.
&lt;pre class=&quot;code&quot;&gt;
...
void signal_handler(int signal) {
        printf(&quot;%d\n&quot;, gFoo-&gt;val);
        exit(0);
}
&lt;span style=&#39;color: red;&#39;&gt;
id objc_msgSend(id, SEL, ...);
id (*messengerFunctionPointer)(id, SEL, ...) = objc_msgSend;
&lt;/span&gt;
int main(void) {
        Foo* foo = [[Foo alloc] init];
        gFoo = foo;
        signal(SIGALRM, signal_handler);
...
&lt;/pre&gt;
&lt;pre class=&quot;code&quot;&gt;
gcc-4061/build/dst/usr/bin/gcc-4.0 -O3 -framework Foundation test1.m; ./a.out
35099819
&lt;/pre&gt;
&lt;p&gt;It worked!  &lt;i&gt;And it&#39;s faster!&lt;/i&gt;  I averaged 34967726 messages a second, a 36% gain - even better than the prediction of 34%.  And a session with Shark shows that &lt;span class=&quot;inline_code&quot;&gt;dyld_stub_objc_msgSend()&lt;/span&gt; is no longer being called at all.

&lt;h3&gt;More, more, more!&lt;/h3&gt;
&lt;p&gt;Can we do even better?  Since it has to load the value of the global variable every time you send a message, maybe if we made it &lt;span class=&quot;inline_code&quot;&gt;const&lt;/span&gt; we could see an even bigger benefit?
&lt;pre class=&quot;code&quot;&gt;
id objc_msgSend(id, SEL, ...);
id (* &lt;span style=&#39;color: red&#39;&gt;const&lt;/span&gt; messengerFunctionPointer)(id, SEL, ...) = objc_msgSend;
&lt;/pre&gt;
&lt;pre class=&quot;code&quot;&gt;
gcc-4061/build/dst/usr/bin/gcc-4.0 -O3 -framework Foundation test1.m; ./a.out
26488189
&lt;/pre&gt;
&lt;p&gt;Wha?  Making our variable &lt;span class=&quot;inline_code&quot;&gt;const&lt;/span&gt; made our code SLOWER! What&#39;s going on?  A quick check of the assembly shows that gcc is performing constant propagation on our const variable, replacing calls through the function pointer to calls to &lt;span class=&quot;inline_code&quot;&gt;dyld_stub_objc_msgSend()&lt;/span&gt; again.  It&#39;s undoing all of our hard work!  (And proving that gcc&#39;s well meaning optimizations can, in fact, make things slower.)  A simple fix:
&lt;pre class=&quot;code&quot;&gt;
id objc_msgSend(id, SEL, ...);
id (* const &lt;span style=&#39;color: red&#39;&gt;volatile&lt;/span&gt; messengerFunctionPointer)(id, SEL, ...) = objc_msgSend;
&lt;/pre&gt;
&lt;p&gt;(Holy type qualifier, Batman!  Not only did we find a use for &lt;span class=&quot;inline_code&quot;&gt;volatile&lt;/span&gt;, it actually made things faster!)
&lt;p&gt;Is this good for anything else?  For one thing, it allows us to very quickly and dynamically switch among various messenger functions, including our own, so that we can do tricks such as additional logging or fancy message forwarding.  We could even do something crazy like add &lt;a href=&quot;http://www.gwydiondylan.org/gdref/tutorial/multiple-dispatch.html&quot;&gt;multiple dispatch&lt;/a&gt;.  And programs built with this technique should (in principle) be backwards compatible enough to run on previous versions of OS X.  Unfortunately, this trick does not affect already-compiled libraries, like AppKit.
&lt;h3&gt;A closer-to-real-life test&lt;/h3&gt;
&lt;p&gt;For a more realistic example, here&#39;s a simple program that &lt;a href=&quot;/blog/misc/objc_msgsend-sorting-example.html&quot;&gt;sorts three million objects.&lt;/a&gt;  The optimization (made a little trickier) improves the run time from 17.93 seconds to 15.7 seconds.
&lt;p&gt;Incidentally, the first person to post in the comments the correct explanation for why I didn&#39;t use &lt;span class=&quot;inline_code&quot;&gt;qsort()&lt;/span&gt; in the above code wins &lt;a href=&quot;/blog/images/apple_pen.jpg&quot;&gt;my click-pen&lt;/a&gt;.  Use your real e-mail address for this incredibly cheap swag.
&lt;h3&gt;Disadvantages&lt;/h3&gt;
&lt;p&gt;Any reasons to not use this trick?  Yes, lots.  For one thing, my gcc change is a kludge.  It generates some spurious warnings and may be incorrect in some cases.  If anyone decided to implement this optimization seriously, it would have to be much more robust.  For another, &lt;a href=&quot;/blog/archives/2005/05/29/nil/&quot;&gt;global variables with position independent code isn&#39;t pretty&lt;/a&gt;, and absent a way to get fast access to the variable (such as -mdynamic-no-pic, or making it a local variable, or ensuring it&#39;s cached in a register) the optimization will have less impact.
&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;So to sum up, &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend()&lt;/span&gt; spends a third of its time in its stub function.  By tweaking the compiler to always call &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend()&lt;/span&gt; through a function pointer variable, we can eliminate that overhead and open up some interesting possibilities for dynamically modifying message dispatch.</content>
  </entry>
  
  <entry>
    <title>Compiled Bitmaps</title>
    <link href="http://ridiculousfish.com/blog/posts/compiled-bitmaps.html"/>
    <updated>2005-06-22T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/compiled-bitmaps</id>
    <content type="html">Ancient programmers speak in hushed tones of the legend known as the &amp;quot;compiled bitmap.&amp;quot;  Ok, no they don&#39;t, but there is such a thing.  It&#39;s a technique that was sometimes used in the DOS days for rapidly drawing an image to the screen.  But how can you compile a bitmap?  And is there any value remaining in this technique, or should it be left in the dustbin along side TSRs and DOSSHELL?  Let&#39;s find out!
&lt;h3&gt;Blitting&lt;/h3&gt;
Drawing an image is called &amp;quot;blitting.&amp;quot;  The usual way we blit is to load a pixel from the source image buffer, store it in the destination, and repeat until we&#39;ve blitted every pixel.

&lt;p&gt;But with compiled bitmaps, the data for the image is in the instruction stream itself.  So instead of &amp;quot;load a pixel from the source,&amp;quot; we say &amp;quot;load red,&amp;quot; and then store it as usual.  Then &amp;quot;load green&amp;quot;, or whatever the next color is, and store that, etc.  A compiled bitmap is a function that knows how to draw a specific image.
&lt;h3&gt;Instruction counts&lt;/h3&gt;
So an advantage of a compiled bitmap is that there&#39;s no need to load data from an image when we blit; the image data is in the instruction stream itself.  But this is ameliorated by the fact that we&#39;ll have many more instructions in the function.  How many more?  That depends on the processor architecture, of course, but since I&#39;m a Mac guy, I&#39;ll stick to PowerPC.
&lt;p&gt;To load a single 32 bit pixel into a register requires two instructions: one to load each 16-bit half.  And storing a pixel requires another instruction.  By taking advantage of the literal offset field in the &lt;span class=&quot;inline_code&quot;&gt;stw&lt;/span&gt; instruction, we can avoid having to increment our destination pointer (except when we overflow the 16 bit field every sixteen thousand pixels).  The PowerPC also has a special instruction form, the store word with update instructions, &lt;span class=&quot;inline_code&quot;&gt;stwu&lt;/span&gt;, that lets us increment the target pointer for free.  But my tests showed that to be slower than &lt;span class=&quot;inline_code&quot;&gt;stw&lt;/span&gt;, which makes sense, since it introduces more inter-instruction dependencies.
&lt;p&gt;But of course, if the next pixel is the same color as the current one, there&#39;s no need to load a new color into the register: you can just store the current value again.  So sometimes we can get away with only one instruction per pixel.  So the number of instructions per pixel in a compiled bitmap ranges between one and three, depending on the complexity of the image and the sophistication of our compiler.
&lt;p&gt;This compares favorably to ordinary blitting, where we have more instructions per pixel (load pixel, store pixel, check for loop exit, and pointer updates).  So at first blush, a compiled bitmap may appear ~ 33% faster than ordinary blitting.
&lt;h3&gt;Bandwidth&lt;/h3&gt;
But this isn&#39;t the whole story, of course; a processor is only as fast as it can be fed.  How much memory bandwidth do we use?  In standard blitting, the instruction stream is a very short loop which fits entirely into the instruction cache.  The main bandwidth hog is reading and writing the pixels: 32 bits read, 32 bits written.  That&#39;s 32 bits each way, per pixel.
&lt;p&gt;With a compiled bitmap, the instruction stream no longer fits in the cache, so the instructions themselves become the bandwidth bottleneck.  32 bits for each instruction (remember, there&#39;s one to three), and 32 bits to write out each pixel, means between 32 and 96 bits read and 32 bits written per pixel.  Based on that, we might expect a compiled bitmap to be up to three times slower than &lt;span class=&quot;inline_code&quot;&gt;memcpy()&lt;/span&gt;.
&lt;h3&gt;Test approach&lt;/h3&gt;
I wrote a test program that blits three different images, at three different sizes, using each of three different methods.  The images were the standard OS X &lt;a href=&quot;file:///Library/Desktop%20Pictures/Nature/Stones.jpg&quot;&gt;Stones&lt;/a&gt; background image, an image with random pixels generated via &lt;span class=&quot;inline_code&quot;&gt;random()&lt;/span&gt;, and a solid blue image.  I blit (blitted?) to the screen using the &lt;a href=&quot;http://developer.apple.com/technotes/tn/tn2007.html&quot;&gt;CGDirectDisplay API&lt;/a&gt;, and repeated the tests to an in-memory buffer.  The blitters were a &lt;span class=&quot;inline_code&quot;&gt;memcpy()&lt;/span&gt; driven blitter, a bitmap compiler, and (for the screen only) the &lt;span class=&quot;inline_code&quot;&gt;draw&lt;/span&gt; method of an &lt;span class=&quot;inline_code&quot;&gt;NSBitmapImageRep&lt;/span&gt;.  In each case, I blit 50,000 times and timed the number of seconds it took.  Division gives the frames per second, and multiplying by the number of pixels gives pixels per second.
&lt;p&gt;Here is &lt;a href=&quot;/blog/files/CompiledBitmaps.zip&quot;&gt;the Xcode project I wrote&lt;/a&gt;.  I place it in the public domain.  (Note that it outputs frames per second, not pixels per second.  You can calculate pixels per second by multiplying the framerate by the number of pixels in a frame.  Note that I lowered the test count to 500 from 50,000 so you don&#39;t tie up your computer for too long by accident.  I also left in the &lt;span class=&quot;inline_code&quot;&gt;stwu&lt;/span&gt; version of the compiler in case you&#39;re interested.)
&lt;h3&gt;Results&lt;/h3&gt;
Here&#39;s what I got.
&lt;table border=0 cellspacing=20&gt;
	&lt;tr&gt;
		&lt;td valign=&quot;top&quot;&gt;
			&lt;u&gt;Pixels/second for blitting to memory:&lt;/u&gt;&lt;br /&gt;
			&lt;table border=&quot;0&quot;&gt;
				&lt;tr&gt;
					&lt;td&gt;&lt;/td&gt;
					&lt;td&gt;&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot; colspan=&quot;3&quot; align=&quot;center&quot;&gt;&lt;b&gt;Image Size&lt;/b&gt;&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
					&lt;td&gt;&lt;/td&gt;
					&lt;td&gt;&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot;&gt;128x128&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot;&gt;256x256&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot;&gt;512x512&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
					&lt;td style=&quot;border: 1px ridge gray; font-weight: bold;&quot;&gt;memcpy&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot;&gt;Stones&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot;&gt;2,582,493,355&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot;&gt;401,030,682&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot;&gt;244,721,918&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
					&lt;td style=&quot;border: 1px ridge gray; font-weight: bold;&quot;&gt;Compiled Bitmap&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot;&gt;Stones&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot;&gt;961,846,601&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot;&gt;116,857,588&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot;&gt;116,034,503&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
					&lt;td style=&quot;border: 1px ridge gray; font-weight: bold;&quot;&gt;memcpy&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot;&gt;Random&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot;&gt;2,599,446,090&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot;&gt;392,847,697&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot;&gt;244,445,199&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
					&lt;td style=&quot;border: 1px ridge gray; font-weight: bold;&quot;&gt;Compiled Bitmap&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot;&gt;Random&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot;&gt;732896429&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot;&gt;116,561,007&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot;&gt;115,185,567&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
					&lt;td style=&quot;border: 1px ridge gray; font-weight: bold;&quot;&gt;memcpy&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot;&gt;Solid&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot;&gt;2,592,274,147&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot;&gt;431,870,370&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot;&gt;245,302,313&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
					&lt;td style=&quot;border: 1px ridge gray; font-weight: bold;&quot;&gt;Compiled Bitmap&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot;&gt;Solid&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot;&gt;990,974,688&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot;&gt;351,106,794&lt;/td&gt;
					&lt;td style=&quot;border: 1px ridge gray&quot;&gt;234,451,230&lt;/td&gt;
				&lt;/tr&gt;
			&lt;/table&gt;
		&lt;/td&gt;
		&lt;td valign=&quot;top&quot;&gt;
			&lt;u&gt;Pixels/second for blitting to the screen:&lt;/u&gt;
			&lt;table border=0&gt;
			 &lt;tr&gt;
			  &lt;td&gt;&lt;/td&gt;
			  &lt;td&gt;&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot; colspan=&quot;3&quot; align=&quot;center&quot;&gt;&lt;b&gt;Image Size&lt;/b&gt;&lt;/td&gt;
			 &lt;/tr&gt;
			 &lt;tr&gt;
			  &lt;td&gt;&lt;/td&gt;
			  &lt;td&gt;&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;128x128&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;256x256&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;512x512&lt;/td&gt;
			 &lt;/tr&gt;
			 &lt;tr&gt;
			  &lt;td style=&quot;border: 1px ridge gray; font-weight: bold;&quot;&gt;memcpy&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;Stones&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;40,984,006&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;40,984,335&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;40,933,309&lt;/td&gt;
			 &lt;/tr&gt;
			 &lt;tr&gt;
			  &lt;td style=&quot;border: 1px ridge gray; font-weight: bold;&quot;&gt;CoreGraphics&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;Stones&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;20,115,402&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;10,588,428&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;10,611,671&lt;/td&gt;
			 &lt;/tr&gt;
			 &lt;tr&gt;
			  &lt;td style=&quot;border: 1px ridge gray; font-weight: bold;&quot;&gt;Compiled Bitmap&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;Stones&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;13,321,951&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;13,300,135&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;13,303,299&lt;/td&gt;
			 &lt;/tr&gt;
			 &lt;tr&gt;
			  &lt;td style=&quot;border: 1px ridge gray; font-weight: bold;&quot;&gt;memcpy&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;Random&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;40,996,351&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;40,994,852&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;40,935,011&lt;/td&gt;
			 &lt;/tr&gt;
			 &lt;tr&gt;
			  &lt;td style=&quot;border: 1px ridge gray; font-weight: bold;&quot;&gt;CoreGraphics&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;Random&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;20,128,212&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;10,581,521&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;10,602,114&lt;/td&gt;
			 &lt;/tr&gt;
			 &lt;tr&gt;
			  &lt;td style=&quot;border: 1px ridge gray; font-weight: bold;&quot;&gt;Compiled Bitmap&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;Random&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;13,326,014&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;13,299,336&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;13,300,511&lt;/td&gt;
			 &lt;/tr&gt;
			 &lt;tr&gt;
			  &lt;td style=&quot;border: 1px ridge gray; font-weight: bold;&quot;&gt;memcpy&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;Solid&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;40,993,883&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;40,998,191&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;40,936,245&lt;/td&gt;
			 &lt;/tr&gt;
			 &lt;tr&gt;
			  &lt;td style=&quot;border: 1px ridge gray; font-weight: bold;&quot;&gt;CoreGraphics&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;Solid&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;20,125,009&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;10,574,159&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;10,602,177&lt;/td&gt;
			 &lt;/tr&gt;
			 &lt;tr&gt;
			  &lt;td style=&quot;border: 1px ridge gray; font-weight: bold;&quot;&gt;Compiled Bitmap&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;Solid&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;13,324,779&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;13,321,780&lt;/td&gt;
			  &lt;td style=&quot;border: 1px ridge gray&quot;&gt;13,310,426&lt;/td&gt;
			 &lt;/tr&gt;
			&lt;/table&gt;
		&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;Man, that&#39;s boring.  All right, let&#39;s draw some graphs.&lt;br /&gt;&lt;br /&gt;
&lt;div style=&quot;border-style: ridge; margin-left: auto; margin-right: auto; text-align: center; background: white&quot;&gt;
&lt;img src=&quot;/blog/images/MemoryBlitPPC.png&quot;/&gt;&lt;br /&gt;
&lt;img src=&quot;/blog/images/ScreenBlitPPC.png&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;Count the digits...one...two...ok, yeah, note that the scales are very different here.  We can blit two and a half billion pixels to memory in the same amount of time as it takes to blit forty million pixels to the screen.
&lt;p&gt;So it&#39;s pretty obvious that &lt;span class=&quot;inline_code&quot;&gt;memcpy()&lt;/span&gt; is faster than my bitmap compiler.  The only point where my compiled bitmap is competitive is blitting a large solid color.
&lt;h3&gt;Ex Post Facto Explanation&lt;/h3&gt;
&lt;p&gt;Was my Latin right?  Darn if I know.  Anyways, I noticed that &lt;span class=&quot;inline_code&quot;&gt;memcpy()&lt;/span&gt; is using a sequence of unrolled &lt;span class=&quot;inline_code&quot;&gt;lvx&lt;/span&gt; and &lt;span class=&quot;inline_code&quot;&gt;stvx&lt;/span&gt; instructions.  That means Altivec acceleration!  It may be part of the reason &lt;span class=&quot;inline_code&quot;&gt;memcpy()&lt;/span&gt; is so fast.  Unfortunately, the only way to fill a vector register with literal values is to assemble them in memory and then load them in, so it would not be easy to vectorize the bitmap compiler, except in special cases.  The results might be somewaht different on an Altivec-lacking G3.
&lt;p&gt;Blitting the solid image to memory via a compiled bitmap is between two and three times faster than the non-solid images, and is competitive with &lt;span class=&quot;inline_code&quot;&gt;memcpy()&lt;/span&gt;, except in the 128x128 case.  I don&#39;t know why &lt;span class=&quot;inline_code&quot;&gt;memcpy()&lt;/span&gt; is so much faster in the 128x128 case.  I also don&#39;t know why blitting to the screen is so much faster with &lt;span class=&quot;inline_code&quot;&gt;memcpy()&lt;/span&gt; compared with the other techniques.  If you know or have ideas, please comment on them!
&lt;p&gt;It&#39;s also very likely that I&#39;ve missed a major optimization opportunity.  I&#39;m far from a guru when it comes to the PowerPC.  If you spot one, please post it in the comments!
&lt;h3&gt;Looking ahead&lt;/h3&gt;
My clumsy tests seem to confirm that compiled bitmaps aren&#39;t very fast.  But note that the PowerPC has fairly big instructions, so it may not be the best candidate for a bitmap compiler.  It takes twelve bytes of PowerPC instructions to write a 32 bit literal to a location in memory, but only six bytes of x86 instructions, which halves our bandwidth requirements.  When the &lt;a href=&quot;javascript:alert(&#39;That is, &amp;quot;Intel Chip Based Macs.&amp;quot; Thanks to Andrew J. Brehm for coming up with the best term yet.&#39;);&quot;&gt;ICBMs&lt;/a&gt; ship, I&#39;ll write a bitmap compiler for them and repeat these tests.</content>
  </entry>
  
  <entry>
    <title>Mystery</title>
    <link href="http://ridiculousfish.com/blog/posts/mystery.html"/>
    <updated>2005-06-03T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/mystery</id>
    <content type="html">&lt;p&gt;I&#39;m sure you&#39;ve seen it too, &#39;cause &lt;a href=&quot;http://apple.slashdot.org/apple/05/06/03/1859245.shtml?tid=179&amp;tid=142&amp;tid=3&amp;tid=106&quot;&gt;it was on Slashdot&lt;/a&gt; and if you&#39;re fishing here, you&#39;re definitely an online junkie.  I&#39;m talking about that Anandtech article, of course.  The one that tries to compare OS X to Linux and a PowerPC to an x86.  Lemme see...&lt;a href=&quot;http://www.anandtech.com/mac/showdoc.aspx?i=2436&quot;&gt;this one&lt;/a&gt;.  No more mysteries, they promise!
&lt;p&gt;None of it&#39;s pleasant, but what&#39;s the worst part?  &lt;a href=&quot;http://www.anandtech.com/mac/showdoc.aspx?i=2436&amp;p=6&quot;&gt;The mySQL results&lt;/a&gt;.  I know it&#39;s painful - you don&#39;t have to look again.  All right.  So why was the G5, at best, 2/3 the speed of any of the other machines?
&lt;p&gt;I don&#39;t have an official or authoritative answer.  But I think &lt;a href=&quot;http://lists.apple.com/archives/darwin-dev/2005/Feb/msg00072.html&quot;&gt;this&lt;/a&gt; might have a lot to do with it.
&lt;p&gt;When you commit a transaction to a database, you want to be sure that the data is fully written.  If your machine loses power half a second after the transaction completes, you want to know that the data made it to disk.  To enable this, Mac OS X provides the &lt;span class=&quot;inline_code&quot;&gt;F_FULLFSYNC&lt;/span&gt; command, which you call with &lt;span class=&quot;inline_code&quot;&gt;fcntl()&lt;/span&gt;.  This forces the OS to write all the pending data to the disk drive, and then forces the disk drive to write all the data in its write cache to the platters.  Or that is, it tries to - some ATA and Firewire drives lie and don&#39;t actually flush the cache.  (The check&#39;s in the mail, really...)
&lt;p&gt;&lt;span class=&quot;inline_code&quot;&gt;F_FULLFSYNC&lt;/span&gt; is pretty slow.  But if OS X didn&#39;t do it, you might end up with no data written or partial data written, even out of order writes, if you lose power suddenly.
&lt;p&gt;Well!  &lt;b&gt;mySQL performs a &lt;span class=&quot;inline_code&quot;&gt; F_FULLFSYNC&lt;/span&gt; on OS X, and not on Linux&lt;/b&gt;; as far as I know Linux doesn&#39;t provide a way to do this.
&lt;p&gt;It&#39;s true that mySQL calls &lt;span class=&quot;inline_code&quot;&gt;fsync()&lt;/span&gt; on both, but &lt;span class=&quot;inline_code&quot;&gt;fsync()&lt;/span&gt; doesn&#39;t force the drive to flush its write cache, so it doesn&#39;t necessarily write out the data.  Check out &lt;a href=&quot;http://dev.mysql.com/doc/mysql/en/news-4-1-9.html&quot;&gt;http://dev.mysql.com/doc/mysql/en/news-4-1-9.html&lt;/a&gt; and Dominic&#39;s comments at the bottom.  Oh, and if you missed it, above, look at &lt;a href=&quot;http://lists.apple.com/archives/darwin-dev/2005/Feb/msg00072.html&quot;&gt;this Apple mailing list post&lt;/a&gt;.
&lt;p&gt;So OS X takes a performance hit in order to fufill the contract of transactions.  Linux is faster, but if you lose your wall juice, your transaction may have not been written, or been partially written, even though it appeared to succeed.  And that&#39;s my guess as to the main reason OS X benchmarked slower on mySQL.
&lt;p&gt;Again, this isn&#39;t an official explanation, and I&#39;m not qualified to give one.  But given that Anandtech missed this issue entirely, I&#39;m not sure they are either.
&lt;p&gt;What about Anandtech&#39;s theory, &lt;a href=&quot;http://www.anandtech.com/mac/showdoc.aspx?i=2436&amp;p=8&quot;&gt;here?&lt;/a&gt;  Could the mySQL benchmark be due to the LMbench results?  I must confess, this part left me completely bewildered.&lt;br /&gt;
&lt;ul&gt;
&lt;li style=&quot;margin-bottom: 10px&quot;&gt;They claim that making a new thread is called &amp;quot;forking&amp;quot;.  No, it&#39;s not.  Calling &lt;span class=&quot;inline_code&quot;&gt;fork()&lt;/span&gt; is forking, and &lt;span class=&quot;inline_code&quot;&gt;fork()&lt;/span&gt; makes processes, not threads.&lt;br /&gt;
&lt;/li&gt;&lt;li style=&quot;margin-bottom: 10px&quot;&gt; They claim that Mac OS X is slower at making threads by benchmarking &lt;span class=&quot;inline_code&quot;&gt;fork() and &lt;/span&gt;&lt;span class=&quot;inline_code&quot;&gt;exec()&lt;/span&gt;.  I don&#39;t follow this train of thought at all.  Making a new process is substantially different from making a new thread, less so on Linux, but very much so on OS X.  And, as you can see from &lt;a href=&quot;http://images.anandtech.com/reviews/cpu/mac_compared/mySQLperfmonitor.gif&quot;&gt;their screenshot&lt;/a&gt;, there is one mySQL process with 60 threads; neither &lt;span class=&quot;inline_code&quot;&gt;fork()&lt;/span&gt; nor &lt;span class=&quot;inline_code&quot;&gt;exec()&lt;/span&gt; is being called here.&lt;br /&gt;
&lt;/li&gt;&lt;li style=&quot;margin-bottom: 10px&quot;&gt;They claim that OS X does not use kernel threads to implement user threads.  But of course it does - &lt;a href=&quot;http://www.opensource.apple.com/darwinsource/10.4.1/Libc-391/pthreads/pthread.c&quot;&gt;see for yourself&lt;/a&gt;.
&lt;pre class=&quot;code&quot;&gt;
			/* Create the Mach thread for this thread */
			PTHREAD_MACH_CALL(thread_create(mach_task_self(), &amp;kernel_thread), kern_res);
&lt;/pre&gt;
&lt;/li&gt;&lt;li style=&quot;margin-bottom: 10px&quot;&gt;They claim that OS X has to go through &amp;quot;extra layers&amp;quot; and &amp;quot;several threading wrappers&amp;quot; to create a thread.  But anyone can see in that source file that a pthread maps pretty directly to a Mach thread, so I&#39;m clueless as to what &amp;quot;extra layers&amp;quot; they&#39;re talking about. &lt;br /&gt;
&lt;/li&gt;&lt;li style=&quot;margin-bottom: 10px&quot;&gt;They guess a lot about the important performance factors, but they never actually profile mySQL.  Why not?
&lt;/li&gt;&lt;/ul&gt;
Whew, I&#39;m a bit wore out.  I&#39;ll leave you to draw your own conclusions, and I hope you post them in the comments.</content>
  </entry>
  
  <entry>
    <title>Nil</title>
    <link href="http://ridiculousfish.com/blog/posts/nil.html"/>
    <updated>2005-05-29T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/nil</id>
    <content type="html">What does sending a message to &lt;span class=&quot;inline_code&quot;&gt;nil&lt;/span&gt; do in Objective-C? What value does it return? You probably know that if the method is declared to return an object, you get back nil, but what if the method is declared to return a char? An int? A long long? A float? A struct? And how does it all work?
                        
&lt;p&gt;Let&#39;s find out!
                        &lt;h3&gt;objc_msgSend&lt;/h3&gt;
                        
&lt;p&gt;Here&#39;s what I do know. When you send a message to an object, such as &lt;span class=&quot;inline_code&quot;&gt;[someObject doSomething]&lt;/span&gt;, the compiler compiles that into a function call to the &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend()&lt;/span&gt; function (or &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend_stret()&lt;/span&gt; if the method is declared to return a struct; more on that below). So what does &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend()&lt;/span&gt; do with nil?
                        
&lt;p&gt;Fortunately, that code is available publicly, from &lt;a href=&quot;http://www.opensource.apple.com/&quot;&gt;Apple&#39;s public source page&lt;/a&gt;. We want the &lt;a href=&quot;http://www.opensource.apple.com/darwinsource/10.3.8/objc4-237/runtime/Messengers.subproj/objc-msg-ppc.s&quot;&gt;objc-msg-ppc.s file&lt;/a&gt; (Warning: Apple ID required). .s means assembly, but don&#39;t worry, we can handle it.
                        
&lt;p&gt;(I am displaying a few snippets of that code in this post. All such code is &lt;a href=&quot;/blog/misc/apple-copyright.html&quot;&gt;Copyright Apple Computer&lt;/a&gt;.)
                        
&lt;p&gt;Where&#39;s the &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend()&lt;/span&gt; function? Oh, there it is; search for &quot;ENTRY _objc_msgSend&quot;.
                        &lt;pre class=&quot;code&quot;&gt;
        ENTRY _objc_msgSend
; check whether receiver is nil
        cmplwi  r3,0                            ; receiver nil?
        beq-    LMsgSendNilSelf         ; if so, call handler or return nil

&lt;/pre&gt;
                        
&lt;p&gt;So the first instruction &lt;span class=&quot;inline_code&quot;&gt;cmplwi r3,0&lt;/span&gt; compares r3 (that&#39;s the object) against 0, and the second instruction &lt;span class=&quot;inline_code&quot;&gt;beq- LMsgSendNilSelf&lt;/span&gt; jumps to &lt;span class=&quot;inline_code&quot;&gt;LMsgSendNilSelf&lt;/span&gt; if they were equal.
                        &lt;h3&gt;LMsgSendNilSelf&lt;/h3&gt;
                        
&lt;p&gt;Ok, so what&#39;s this &lt;span class=&quot;inline_code&quot;&gt;LMsgSendNilSelf&lt;/span&gt; thingy? Search for it within the file...ah-ha, there it is. This is where we go if the message receiver is nil, but what does it do?
                        &lt;pre class=&quot;code&quot;&gt;
LMsgSendNilSelf:
        mflr    r0                      ; load new receiver
        bcl     20,31,1f                ; 31 is cr7[so]
1:      mflr    r11
        addis   r11,r11,ha16(__objc_nilReceiver-1b)
        lwz     r11,lo16(__objc_nilReceiver-1b)(r11)
        mtlr    r0
        cmplwi  r11,0                   ; return nil if no new receiver
        beqlr
        mr      r3,r11                  ; send to new receiver
        b       LMsgSendReceiverOk

&lt;/pre&gt;
                        
&lt;p&gt;The first six instructions within &lt;span class=&quot;inline_code&quot;&gt;LMsgSendNilSelf&lt;/span&gt; are just there to load the global variable &lt;span class=&quot;inline_code&quot;&gt;__objc_nilReceiver&lt;/span&gt; into register r11 (yeah, six instructions just to load a variable! Globals with position independent code sure isn&#39;t pretty). Then it compares that variable against nil, via &lt;span class=&quot;inline_code&quot;&gt;cmplwi r11, 0&lt;/span&gt;, and if it was nil the whole &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend()&lt;/span&gt; function returns. No return value; it just returns.
                        
&lt;p&gt;(If &lt;span class=&quot;inline_code&quot;&gt;__objc_nilReceiver&lt;/span&gt; were not nil, it moves &lt;span class=&quot;inline_code&quot;&gt;__objc_nilReceiver&lt;/span&gt; into r3, where the message receiver goes, and acts like the receiver was &lt;span class=&quot;inline_code&quot;&gt;__objc_nilReceiver&lt;/span&gt; all along, meaning that &lt;span class=&quot;inline_code&quot;&gt;__objc_nilReceiver&lt;/span&gt; is there to let you replace the default message-to-&lt;span class=&quot;inline_code&quot;&gt;nil&lt;/span&gt; behavior with your own! How cool is that!?)
                        &lt;h3&gt;What gets returned&lt;/h3&gt;
                        
&lt;p&gt;So to sum up, if you send a message to &lt;span class=&quot;inline_code&quot;&gt;nil&lt;/span&gt;, it&#39;s as if you executed a C function that just called &lt;span class=&quot;inline_code&quot;&gt;return&lt;/span&gt; without specifying any return value. So what return value does that give us? I guess we need to know how Mac OS X on the PowerPC returns values.
                        
&lt;p&gt;Well, that depends on the type the function is declared to return! That stuff is all documented in the lovely &lt;a href=&quot;http://developer.apple.com/documentation/DeveloperTools/Conceptual/PowerPCRuntime/&quot;&gt;PowerPC Runtime Architecture Guide&lt;/a&gt;, which is also hiding out somewhere in /Developer on your system. Ugh, what a mess. Ok, here&#39;s what we&#39;re after: &lt;a href=&quot;http://developer.apple.com/documentation/DeveloperTools/Conceptual/PowerPCRuntime/Calls/chapter_4_section_3.html#//apple_ref/doc/uid/TP40001520-CH203-TPXREF107&quot;&gt;Function Return&lt;/a&gt;. This is what it says, paraphrased:
                        &lt;ul&gt;
                            &lt;li&gt;If a function returns a pointer or an integral type (other than &lt;span class=&quot;inline_code&quot;&gt;long long&lt;/span&gt;), the return value goes in r3, the fourth general purpose register.&lt;/li&gt;
                            &lt;li&gt;If a function returns a floating point value, the return value goes in FPR1, a floating point register.&lt;/li&gt;
                            &lt;li&gt;If a function returns &lt;span class=&quot;inline_code&quot;&gt;long long&lt;/span&gt;, the upper half goes in r3, the lower half in r4.&lt;/li&gt;
                            &lt;li&gt;Struct returning works like this: the caller makes space for the return value and sticks a pointer to the space in r3 (and therefore starts putting parameters in r4 rather than r3), and the callee is responsible for copying its return value into that space. Now we see why struct returns need that special &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend_stret()&lt;/span&gt; function: all the parameters are one register off from where they usually are.&lt;/li&gt;
                        &lt;/ul&gt;
                        
&lt;p&gt;But wait, isn&#39;t r3 the same register where we put the object we sent the message to in the first place? Sure is! So when you send a message to &lt;span class=&quot;inline_code&quot;&gt;nil&lt;/span&gt; where the method is declared to return an object, you get back the &lt;strong&gt;very same &lt;span class=&quot;inline_code&quot;&gt;nil&lt;/span&gt;&lt;/strong&gt; for the return value. The function doesn&#39;t touch the object parameter, and since the return value is in the same place as the receiver parameter to &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend()&lt;/span&gt;, if the receiver is nil then so is the return value. Lucky!
                        &lt;h3&gt;Types, types, types&lt;/h3&gt;
                        
&lt;p&gt;And since &lt;span class=&quot;inline_code&quot;&gt;int&lt;/span&gt;s, &lt;span class=&quot;inline_code&quot;&gt;short&lt;/span&gt;s, &lt;span class=&quot;inline_code&quot;&gt;char&lt;/span&gt;s, and &lt;span class=&quot;inline_code&quot;&gt;long&lt;/span&gt;s are also returned in r3, the same thing happens. Sending a message to nil where you expect to get any of those types back will always give you 0.
                        
&lt;p&gt;What about &lt;span class=&quot;inline_code&quot;&gt;long long&lt;/span&gt;, in which case the return value is half in r3 and the other half in r4? Well, since &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend()&lt;/span&gt; doesn&#39;t touch r4 either, what we send is what we get back, and in this case we send the selector in r4. So for the case of a long long, we expect to get the top 32 bits all 0 and the bottom 32 bits equal to the selector we sent. &lt;strong&gt;We will never get 0 back if we send a message to &lt;span class=&quot;inline_code&quot;&gt;nil&lt;/span&gt; and expect a &lt;span class=&quot;inline_code&quot;&gt;long long&lt;/span&gt;.&lt;/strong&gt; Instead, we get the selector converted to a long long!
                        
&lt;p&gt;And floating point? &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend()&lt;/span&gt; doesn&#39;t touch the floating point registers, so we&#39;ll get back whatever happened to be in FPR1 when we sent the message.
                        
&lt;p&gt;Ok, now for the trickiest case: structs. &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend_stret()&lt;/span&gt; behaves identically to &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend()&lt;/span&gt; with regard to a &lt;span class=&quot;inline_code&quot;&gt;nil&lt;/span&gt;-receiver. And remember that it&#39;s the callee&#39;s responsibility to copy the return value into the caller provided space. Since &lt;span class=&quot;inline_code&quot;&gt;objc_msgSend_stret()&lt;/span&gt; neglects to do that, the data in the space provided by the caller is unchanged. This often means that code like &lt;span class=&quot;inline_code&quot;&gt;myPoint = [nil someMethodReturningPoint];&lt;/span&gt; will leave &lt;span class=&quot;inline_code&quot;&gt;myPoint&lt;/span&gt; unchanged (but this behavior is dependent on the compiler&#39;s optimizations, and so you shouldn&#39;t rely on it).
                        
&lt;p&gt;Phew, my hat&#39;s off to you if you trudged through all that. Hopefully you found something new to you.</content>
  </entry>
  
  <entry>
    <title>Daybreak</title>
    <link href="http://ridiculousfish.com/blog/posts/daybreak.html"/>
    <updated>2005-05-25T00:00:00-07:00</updated>
    <id>http://ridiculousfish.com/posts/daybreak</id>
    <content type="html">I&#39;m a developer on Apple&#39;s AppKit team; I work to make Cocoa better.  With a few exceptions, we are responsible for both &lt;a href=&quot;http://developer.apple.com/cocoa/&quot;&gt;AppKit and Foundation&lt;/a&gt;.  This is my blog.

You can contact me at &lt;a href=&quot;&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#x63;&amp;#x6F;&amp;#x72;&amp;#121;&amp;#100;&amp;#x6F;&amp;#114;&amp;#x61;&amp;#x73;&amp;#x40;&amp;#114;&amp;#105;&amp;#x64;&amp;#x69;&amp;#99;&amp;#x75;&amp;#x6C;&amp;#111;&amp;#x75;&amp;#115;&amp;#x66;&amp;#x69;&amp;#115;&amp;#x68;&amp;#46;&amp;#99;&amp;#x6F;&amp;#x6D;?subject=&quot; title=&quot;&quot;&gt;&amp;#99;&amp;#111;&amp;#x72;&amp;#x79;&amp;#x64;&amp;#x6F;&amp;#x72;&amp;#97;&amp;#x73;&amp;#x40;&amp;#114;&amp;#x69;&amp;#100;&amp;#x69;&amp;#x63;&amp;#117;&amp;#x6C;&amp;#111;&amp;#117;&amp;#x73;&amp;#102;&amp;#105;&amp;#115;&amp;#104;&amp;#46;&amp;#x63;&amp;#x6F;&amp;#109;&lt;/a&gt;


&lt;p&gt;Description forthcoming.</content>
  </entry>
  
 
</feed>
